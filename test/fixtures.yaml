---
version: 1
rwmutex: {}
interactions:
- request:
    body: ""
    form: {}
    headers:
      Authorization:
      - Bearer awesometokenawesometokenawesometoken
      User-Agent:
      - go-linode 1.0.0 https://github.com/chiefy/go-linode
    url: https://api.linode.com/v4/regions
    method: GET
  response:
    body: '{"results": 9, "page": 1, "pages": 1, "data": [{"id": "us-south-1a", "country":
      "us"}, {"id": "us-west-1a", "country": "us"}, {"id": "us-southeast-1a", "country":
      "us"}, {"id": "us-east-1a", "country": "us"}, {"id": "eu-west-1a", "country":
      "uk"}, {"id": "ap-south-1a", "country": "sg"}, {"id": "eu-central-1a", "country":
      "de"}, {"id": "ap-northeast-1b", "country": "jp"}, {"id": "ap-northeast-1a",
      "country": "jp"}]}'
    headers:
      Access-Control-Allow-Credentials:
      - "true"
      Access-Control-Allow-Headers:
      - Authorization, Origin, X-Requested-With, Content-Type, Accept, X-Filter
      Access-Control-Allow-Methods:
      - HEAD, GET, OPTIONS, POST, PUT, DELETE
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Status
      Cache-Control:
      - private, max-age=900
      - private, max-age=60, s-maxage=60
      Connection:
      - keep-alive
      Content-Length:
      - "418"
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json
      Date:
      - Tue, 27 Mar 2018 18:06:50 GMT
      Retry-After:
      - "119"
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization, X-Filter
      - Authorization, X-Filter
      X-Accepted-Oauth-Scopes:
      - '*'
      X-Content-Type-Options:
      - nosniff
      - nosniff
      X-Frame-Options:
      - DENY
      - DENY
      X-Oauth-Scopes:
      - unknown
      X-Ratelimit-Limit:
      - "400"
      X-Ratelimit-Remaining:
      - "399"
      X-Ratelimit-Reset:
      - "1522174130"
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
- request:
    body: ""
    form: {}
    headers:
      Authorization:
      - Bearer awesometokenawesometokenawesometoken
      User-Agent:
      - go-linode 1.0.0 https://github.com/chiefy/go-linode
    url: https://api.linode.com/v4/linode/instances
    method: GET
  response:
    body: '{"results": 1, "pages": 1, "page": 1, "data": [{"created": "2018-03-27T18:03:41",
      "group": "", "ipv4": ["23.239.2.170"], "label": "linode7256733", "image": "linode/debian9",
      "id": 7256733, "backups": {"enabled": true, "schedule": {"day": "Tuesday", "window":
      "W18"}}, "updated": "2018-03-27T18:06:20", "region": "us-west-1a", "ipv6": "2600:3c01::f03c:91ff:feb6:eaf8/64",
      "alerts": {"cpu": 90, "network_in": 10, "transfer_quota": 80, "io": 10000, "network_out":
      10}, "type": "g5-nanode-1", "specs": {"disk": 20480, "vcpus": 1, "memory": 1024,
      "transfer": 1000}, "hypervisor": "kvm", "status": "running"}]}'
    headers:
      Access-Control-Allow-Credentials:
      - "true"
      Access-Control-Allow-Headers:
      - Authorization, Origin, X-Requested-With, Content-Type, Accept, X-Filter
      Access-Control-Allow-Methods:
      - HEAD, GET, OPTIONS, POST, PUT, DELETE
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Status
      Cache-Control:
      - private, max-age=0, s-maxage=0, no-cache, no-store
      - private, max-age=60, s-maxage=60
      Connection:
      - keep-alive
      Content-Length:
      - "604"
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json
      Date:
      - Tue, 27 Mar 2018 18:06:50 GMT
      Retry-After:
      - "119"
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization, X-Filter
      - Authorization, X-Filter
      X-Accepted-Oauth-Scopes:
      - linodes:view
      X-Content-Type-Options:
      - nosniff
      - nosniff
      X-Frame-Options:
      - DENY
      - DENY
      X-Oauth-Scopes:
      - linodes:delete,domains:delete,nodebalancers:delete,images:delete,stackscripts:delete,longview:delete,events:delete,tokens:delete,clients:delete,account:delete,users:delete,tickets:delete,ips:delete,volumes:delete
      X-Ratelimit-Limit:
      - "400"
      X-Ratelimit-Remaining:
      - "399"
      X-Ratelimit-Reset:
      - "1522174130"
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
- request:
    body: ""
    form: {}
    headers:
      Authorization:
      - Bearer awesometokenawesometokenawesometoken
      User-Agent:
      - go-linode 1.0.0 https://github.com/chiefy/go-linode
    url: https://api.linode.com/v4/images
    method: GET
  response:
    body: '{"results": 18, "page": 1, "pages": 1, "data": [{"size": 600, "created_by":
      "linode", "deprecated": true, "is_public": true, "description": null, "created":
      "2011-06-05T19:11:59", "id": "linode/slackware13.37", "type": "manual", "vendor":
      "Slackware", "label": "Slackware 13.37"}, {"size": 1000, "created_by": "linode",
      "deprecated": true, "is_public": true, "description": null, "created": "2013-11-25T16:11:02",
      "id": "linode/slackware14.1", "type": "manual", "vendor": "Slackware", "label":
      "Slackware 14.1"}, {"size": 1500, "created_by": "linode", "deprecated": true,
      "is_public": true, "description": null, "created": "2014-04-17T19:42:07", "id":
      "linode/ubuntu14.04lts", "type": "manual", "vendor": "Ubuntu", "label": "Ubuntu
      14.04 LTS"}, {"size": 1024, "created_by": "linode", "deprecated": true, "is_public":
      true, "description": null, "created": "2014-04-28T19:19:34", "id": "linode/centos6.8",
      "type": "manual", "vendor": "CentOS", "label": "CentOS 6.8"}, {"size": 1500,
      "created_by": "linode", "deprecated": false, "is_public": true, "description":
      null, "created": "2014-07-08T14:07:21", "id": "linode/centos7", "type": "manual",
      "vendor": "CentOS", "label": "CentOS 7"}, {"size": 600, "created_by": "linode",
      "deprecated": true, "is_public": true, "description": null, "created": "2014-09-24T17:59:32",
      "id": "linode/debian7", "type": "manual", "vendor": "Debian", "label": "Debian
      7"}, {"size": 1024, "created_by": "linode", "deprecated": false, "is_public":
      true, "description": "", "created": "2015-04-27T20:26:41", "id": "linode/debian8",
      "type": "manual", "vendor": "Debian", "label": "Debian 8"}, {"size": 1024, "created_by":
      "linode", "deprecated": false, "is_public": true, "description": null, "created":
      "2016-04-22T18:11:29", "id": "linode/ubuntu16.04lts", "type": "manual", "vendor":
      "Ubuntu", "label": "Ubuntu 16.04 LTS"}, {"size": 1500, "created_by": "linode",
      "deprecated": false, "is_public": true, "description": null, "created": "2016-06-13T20:31:34",
      "id": "linode/arch", "type": "manual", "vendor": "Arch", "label": "Arch 2018.02.05"},
      {"size": 6000, "created_by": "linode", "deprecated": false, "is_public": true,
      "description": null, "created": "2016-10-13T13:14:34", "id": "linode/slackware14.2",
      "type": "manual", "vendor": "Slackware", "label": "Slackware 14.2"}, {"size":
      5500, "created_by": "linode", "deprecated": false, "is_public": true, "description":
      null, "created": "2016-10-25T17:31:25", "id": "linode/gentoo2018.01.15", "type":
      "manual", "vendor": "Gentoo", "label": "Gentoo 2018-01-15"}, {"size": 1700,
      "created_by": "linode", "deprecated": true, "is_public": true, "description":
      null, "created": "2016-11-17T19:52:54", "id": "linode/opensuseleap42.2", "type":
      "manual", "vendor": "openSUSE", "label": "openSUSE Leap 42.2"}, {"size": 5000,
      "created_by": "linode", "deprecated": false, "is_public": true, "description":
      null, "created": "2017-06-06T20:44:00", "id": "linode/containerlinux", "type":
      "manual", "vendor": "CoreOS", "label": "CoreOS Container Linux"}, {"size": 1100,
      "created_by": "linode", "deprecated": false, "is_public": true, "description":
      null, "created": "2017-06-16T20:02:29", "id": "linode/debian9", "type": "manual",
      "vendor": "Debian", "label": "Debian 9"}, {"size": 1500, "created_by": "linode",
      "deprecated": false, "is_public": true, "description": null, "created": "2017-07-12T12:23:15",
      "id": "linode/fedora26", "type": "manual", "vendor": "Fedora", "label": "Fedora
      26"}, {"size": 1900, "created_by": "linode", "deprecated": false, "is_public":
      true, "description": null, "created": "2017-07-27T18:03:05", "id": "linode/opensuse42.3",
      "type": "manual", "vendor": "openSUSE", "label": "openSUSE Leap 42.3"}, {"size":
      2500, "created_by": "linode", "deprecated": false, "is_public": true, "description":
      null, "created": "2017-10-19T20:19:16", "id": "linode/ubuntu17.10", "type":
      "manual", "vendor": "Ubuntu", "label": "Ubuntu 17.10"}, {"size": 1900, "created_by":
      "linode", "deprecated": false, "is_public": true, "description": null, "created":
      "2017-12-14T21:06:30", "id": "linode/fedora27", "type": "manual", "vendor":
      "Fedora", "label": "Fedora 27"}]}'
    headers:
      Access-Control-Allow-Credentials:
      - "true"
      Access-Control-Allow-Headers:
      - Authorization, Origin, X-Requested-With, Content-Type, Accept, X-Filter
      Access-Control-Allow-Methods:
      - HEAD, GET, OPTIONS, POST, PUT, DELETE
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Status
      Cache-Control:
      - private, max-age=0, s-maxage=0, no-cache, no-store
      - private, max-age=60, s-maxage=60
      Connection:
      - keep-alive
      Content-Length:
      - "4134"
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json
      Date:
      - Tue, 27 Mar 2018 18:06:51 GMT
      Retry-After:
      - "118"
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization, X-Filter
      - Authorization, X-Filter
      X-Accepted-Oauth-Scopes:
      - '*'
      X-Content-Type-Options:
      - nosniff
      - nosniff
      X-Frame-Options:
      - DENY
      - DENY
      X-Oauth-Scopes:
      - linodes:delete,domains:delete,nodebalancers:delete,images:delete,stackscripts:delete,longview:delete,events:delete,tokens:delete,clients:delete,account:delete,users:delete,tickets:delete,ips:delete,volumes:delete
      X-Ratelimit-Limit:
      - "400"
      X-Ratelimit-Remaining:
      - "398"
      X-Ratelimit-Reset:
      - "1522174130"
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
- request:
    body: ""
    form: {}
    headers:
      Authorization:
      - Bearer awesometokenawesometokenawesometoken
      User-Agent:
      - go-linode 1.0.0 https://github.com/chiefy/go-linode
    url: https://api.linode.com/v4/linode/instances/7256733
    method: GET
  response:
    body: '{"created": "2018-03-27T18:03:41", "group": "", "ipv4": ["23.239.2.170"],
      "label": "linode7256733", "image": "linode/debian9", "id": 7256733, "backups":
      {"enabled": true, "schedule": {"day": "Tuesday", "window": "W18"}}, "updated":
      "2018-03-27T18:06:20", "region": "us-west-1a", "ipv6": "2600:3c01::f03c:91ff:feb6:eaf8/64",
      "alerts": {"cpu": 90, "network_in": 10, "transfer_quota": 80, "io": 10000, "network_out":
      10}, "type": "g5-nanode-1", "specs": {"disk": 20480, "vcpus": 1, "memory": 1024,
      "transfer": 1000}, "hypervisor": "kvm", "status": "running"}'
    headers:
      Access-Control-Allow-Credentials:
      - "true"
      Access-Control-Allow-Headers:
      - Authorization, Origin, X-Requested-With, Content-Type, Accept, X-Filter
      Access-Control-Allow-Methods:
      - HEAD, GET, OPTIONS, POST, PUT, DELETE
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Status
      Cache-Control:
      - private, max-age=0, s-maxage=0, no-cache, no-store
      - private, max-age=60, s-maxage=60
      Connection:
      - keep-alive
      Content-Length:
      - "555"
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json
      Date:
      - Tue, 27 Mar 2018 18:06:51 GMT
      Retry-After:
      - "118"
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization, X-Filter
      - Authorization, X-Filter
      X-Accepted-Oauth-Scopes:
      - linodes:view
      X-Content-Type-Options:
      - nosniff
      - nosniff
      X-Frame-Options:
      - DENY
      - DENY
      X-Oauth-Scopes:
      - linodes:delete,domains:delete,nodebalancers:delete,images:delete,stackscripts:delete,longview:delete,events:delete,tokens:delete,clients:delete,account:delete,users:delete,tickets:delete,ips:delete,volumes:delete
      X-Ratelimit-Limit:
      - "400"
      X-Ratelimit-Remaining:
      - "398"
      X-Ratelimit-Reset:
      - "1522174130"
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
- request:
    body: ""
    form: {}
    headers:
      Authorization:
      - Bearer awesometokenawesometokenawesometoken
      User-Agent:
      - go-linode 1.0.0 https://github.com/chiefy/go-linode
    url: https://api.linode.com/v4/linode/instances/7256733/backups
    method: GET
  response:
    body: '{"snapshot": {"in_progress": null, "current": null}, "automatic": []}'
    headers:
      Access-Control-Allow-Credentials:
      - "true"
      Access-Control-Allow-Headers:
      - Authorization, Origin, X-Requested-With, Content-Type, Accept, X-Filter
      Access-Control-Allow-Methods:
      - HEAD, GET, OPTIONS, POST, PUT, DELETE
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Status
      Cache-Control:
      - private, max-age=0, s-maxage=0, no-cache, no-store
      - private, max-age=60, s-maxage=60
      Connection:
      - keep-alive
      Content-Length:
      - "69"
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json
      Date:
      - Tue, 27 Mar 2018 18:06:51 GMT
      Retry-After:
      - "26"
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization, X-Filter
      - Authorization, X-Filter
      X-Accepted-Oauth-Scopes:
      - linodes:view
      X-Content-Type-Options:
      - nosniff
      - nosniff
      X-Frame-Options:
      - DENY
      - DENY
      X-Oauth-Scopes:
      - linodes:delete,domains:delete,nodebalancers:delete,images:delete,stackscripts:delete,longview:delete,events:delete,tokens:delete,clients:delete,account:delete,users:delete,tickets:delete,ips:delete,volumes:delete
      X-Ratelimit-Limit:
      - "400"
      X-Ratelimit-Remaining:
      - "398"
      X-Ratelimit-Reset:
      - "1522174038"
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
- request:
    body: ""
    form: {}
    headers:
      Authorization:
      - Bearer awesometokenawesometokenawesometoken
      User-Agent:
      - go-linode 1.0.0 https://github.com/chiefy/go-linode
    url: https://api.linode.com/v4/linode/instances/7256733/disks
    method: GET
  response:
    body: '{"results": 2, "page": 1, "pages": 1, "data": [{"size": 20224, "status":
      "ready", "created": "2018-03-27T18:04:22", "updated": "2018-03-27T18:04:42",
      "id": 16325024, "filesystem": "ext4", "label": "Debian 9 Disk"}, {"size": 256,
      "status": "ready", "created": "2018-03-27T18:04:22", "updated": "2018-03-27T18:04:43",
      "id": 16325025, "filesystem": "swap", "label": "256MB Swap Image"}]}'
    headers:
      Access-Control-Allow-Credentials:
      - "true"
      Access-Control-Allow-Headers:
      - Authorization, Origin, X-Requested-With, Content-Type, Accept, X-Filter
      Access-Control-Allow-Methods:
      - HEAD, GET, OPTIONS, POST, PUT, DELETE
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Status
      Cache-Control:
      - private, max-age=0, s-maxage=0, no-cache, no-store
      - private, max-age=60, s-maxage=60
      Connection:
      - keep-alive
      Content-Length:
      - "384"
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json
      Date:
      - Tue, 27 Mar 2018 18:06:52 GMT
      Retry-After:
      - "118"
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization, X-Filter
      - Authorization, X-Filter
      X-Accepted-Oauth-Scopes:
      - linodes:view
      X-Content-Type-Options:
      - nosniff
      - nosniff
      X-Frame-Options:
      - DENY
      - DENY
      X-Oauth-Scopes:
      - linodes:delete,domains:delete,nodebalancers:delete,images:delete,stackscripts:delete,longview:delete,events:delete,tokens:delete,clients:delete,account:delete,users:delete,tickets:delete,ips:delete,volumes:delete
      X-Ratelimit-Limit:
      - "400"
      X-Ratelimit-Remaining:
      - "399"
      X-Ratelimit-Reset:
      - "1522174131"
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
- request:
    body: ""
    form: {}
    headers:
      Authorization:
      - Bearer awesometokenawesometokenawesometoken
      User-Agent:
      - go-linode 1.0.0 https://github.com/chiefy/go-linode
    url: https://api.linode.com/v4/linode/instances/7256733/configs
    method: GET
  response:
    body: '{"results": 1, "pages": 1, "page": 1, "data": [{"devices": {"sdf": null,
      "sda": {"disk_id": 16325024, "volume_id": null}, "sdb": {"disk_id": 16325025,
      "volume_id": null}, "sdg": null, "sdc": {"disk_id": null, "volume_id": 5029},
      "sde": null, "sdh": null, "sdd": null}, "created": "2018-03-27T18:04:22", "memory_limit":
      0, "id": 8523915, "helpers": {"distro": true, "updatedb_disabled": true, "network":
      true, "modules_dep": true, "devtmpfs_automount": true}, "updated": "2018-03-27T18:04:31",
      "run_level": "default", "comments": "", "virt_mode": "paravirt", "kernel": "linode/grub2",
      "initrd": null, "root_device": "/dev/sda", "label": "My Debian 9 Profile"}]}'
    headers:
      Access-Control-Allow-Credentials:
      - "true"
      Access-Control-Allow-Headers:
      - Authorization, Origin, X-Requested-With, Content-Type, Accept, X-Filter
      Access-Control-Allow-Methods:
      - HEAD, GET, OPTIONS, POST, PUT, DELETE
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Status
      Cache-Control:
      - private, max-age=0, s-maxage=0, no-cache, no-store
      - private, max-age=60, s-maxage=60
      Connection:
      - keep-alive
      Content-Length:
      - "660"
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json
      Date:
      - Tue, 27 Mar 2018 18:06:52 GMT
      Retry-After:
      - "117"
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization, X-Filter
      - Authorization, X-Filter
      X-Accepted-Oauth-Scopes:
      - linodes:view
      X-Content-Type-Options:
      - nosniff
      - nosniff
      X-Frame-Options:
      - DENY
      - DENY
      X-Oauth-Scopes:
      - linodes:delete,domains:delete,nodebalancers:delete,images:delete,stackscripts:delete,longview:delete,events:delete,tokens:delete,clients:delete,account:delete,users:delete,tickets:delete,ips:delete,volumes:delete
      X-Ratelimit-Limit:
      - "400"
      X-Ratelimit-Remaining:
      - "397"
      X-Ratelimit-Reset:
      - "1522174130"
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
- request:
    body: ""
    form: {}
    headers:
      Authorization:
      - Bearer awesometokenawesometokenawesometoken
      User-Agent:
      - go-linode 1.0.0 https://github.com/chiefy/go-linode
    url: https://api.linode.com/v4/linode/instances/7256733/volumes
    method: GET
  response:
    body: '{"data": [{"label": "freemont", "id": 5029, "size": 10, "created": "2018-03-27T18:04:08",
      "linode_id": 7256733, "status": "active", "updated": null, "region": "us-west-1a"}],
      "pages": 1, "page": 1, "results": 1}'
    headers:
      Access-Control-Allow-Credentials:
      - "true"
      Access-Control-Allow-Headers:
      - Authorization, Origin, X-Requested-With, Content-Type, Accept, X-Filter
      Access-Control-Allow-Methods:
      - HEAD, GET, OPTIONS, POST, PUT, DELETE
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Status
      Cache-Control:
      - private, max-age=0, s-maxage=0, no-cache, no-store
      - private, max-age=60, s-maxage=60
      Connection:
      - keep-alive
      Content-Length:
      - "211"
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json
      Date:
      - Tue, 27 Mar 2018 18:06:53 GMT
      Retry-After:
      - "30"
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization, X-Filter
      - Authorization, X-Filter
      X-Accepted-Oauth-Scopes:
      - linodes:view
      X-Content-Type-Options:
      - nosniff
      - nosniff
      X-Frame-Options:
      - DENY
      - DENY
      X-Oauth-Scopes:
      - linodes:delete,domains:delete,nodebalancers:delete,images:delete,stackscripts:delete,longview:delete,events:delete,tokens:delete,clients:delete,account:delete,users:delete,tickets:delete,ips:delete,volumes:delete
      X-Ratelimit-Limit:
      - "400"
      X-Ratelimit-Remaining:
      - "398"
      X-Ratelimit-Reset:
      - "1522174044"
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
- request:
    body: ""
    form: {}
    headers:
      Authorization:
      - Bearer awesometokenawesometokenawesometoken
      User-Agent:
      - go-linode 1.0.0 https://github.com/chiefy/go-linode
    url: https://api.linode.com/v4/linode/stackscripts
    method: GET
  response:
    body: '{"results": 999, "page": 1, "pages": 10, "data": [{"is_public": true, "username":
      "linode", "id": 1, "deployments_total": 37, "user_defined_fields": [], "updated":
      "2017-05-31T20:56:28", "label": "StackScript Bash Library", "created": "2009-12-17T17:06:35",
      "images": ["linode/arch", "linode/centos7", "linode/debian8", "linode/fedora25",
      "linode/gentoo2018.01.15", "linode/opensuseleap42.2", "linode/slackware14.2",
      "linode/ubuntu16.04lts", "linode/ubuntu16.10", "linode/ubuntu17.04", "linode/centos6.8",
      "linode/debian7", "linode/fedora24", "linode/slackware13.37", "linode/slackware14.1",
      "linode/ubuntu14.04lts"], "user_gravatar_id": "ead4da00f4fe6a4bd0b4f11a510c031d",
      "description": "Does nothing on its own.  Do not deploy directly.\r\n\r\nA collection
      of useful bash functions to be included in other bash StackScripts with a \"source
      <ssinclude StackScriptID=1>\" line.", "rev_note": "Fix debconf to use metapackage",
      "deployments_active": 27, "script": "#!/bin/bash\n#\n# StackScript Bash Library\n#\n#
      Copyright (c) 2010 Linode LLC / Christopher S. Aker <caker@linode.com>\n# All
      rights reserved.\n#\n# Redistribution and use in source and binary forms, with
      or without modification, \n# are permitted provided that the following conditions
      are met:\n#\n# * Redistributions of source code must retain the above copyright
      notice, this\n# list of conditions and the following disclaimer.\n#\n# * Redistributions
      in binary form must reproduce the above copyright notice, this\n# list of conditions
      and the following disclaimer in the documentation and/or\n# other materials
      provided with the distribution.\n#\n# * Neither the name of Linode LLC nor the
      names of its contributors may be\n# used to endorse or promote products derived
      from this software without specific prior\n# written permission.\n#\n# THIS
      SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND
      ANY\n# EXPRESS OR IMPLIED WARRANTIES, I***REMOVED***LUDING, BUT NOT LIMITED TO, THE IMPLIED
      WARRANTIES\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
      IN NO EVENT\n# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
      DIRECT, INDIRECT,\n# I***REMOVED***IDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
      (I***REMOVED***LUDING, BUT NOT LIMITED\n# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      LOSS OF USE, DATA, OR PROFITS; OR\n# BUSINESS INTERRUPTION) HOWEVER CAUSED AND
      ON ANY THEORY OF LIABILITY, WHETHER IN\n# CONTRACT, STRICT LIABILITY, OR TORT
      (I***REMOVED***LUDING NEGLIGE***REMOVED***E OR OTHERWISE) ARISING IN\n# ANY WAY OUT OF THE USE OF
      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\n# DAMAGE.\n\n###########################################################\n#
      System\n###########################################################\n\nfunction
      system_update {\n\tapt-get update\n\tapt-get -y install aptitude\n\taptitude
      -y full-upgrade\n}\n\nfunction system_primary_ip {\n\t# returns the primary
      IP assigned to eth0\n\techo $(ifconfig eth0 | awk -F: ''/inet addr:/ {print
      $2}'' | awk ''{ print $1 }'')\n}\n\nfunction get_rdns {\n\t# calls host on an
      IP address and returns its reverse dns\n\n\tif [ ! -e /usr/bin/host ]; then\n\t\taptitude
      -y install dnsutils > /dev/null\n\tfi\n\techo $(host $1 | awk ''/pointer/ {print
      $5}'' | sed ''s/\\.$//'')\n}\n\nfunction get_rdns_primary_ip {\n\t# returns
      the reverse dns of the primary IP assigned to this system\n\techo $(get_rdns
      $(system_primary_ip))\n}\n\nfunction system_set_hostname {\n\t# $1 - The hostname
      to define\n\tHOSTNAME=\"$1\"\n\t\t\n\tif [ ! -n \"$HOSTNAME\" ]; then\n\t\techo
      \"Hostname undefined\"\n\t\treturn 1;\n\tfi\n\t\n\techo \"$HOSTNAME\" > /etc/hostname\n\thostname
      -F /etc/hostname\n}\n\nfunction system_add_host_entry {\n\t# $1 - The IP address
      to set a hosts entry for\n\t# $2 - The FQDN to set to the IP\n\tIPADDR=\"$1\"\n\tFQDN=\"$2\"\n\n\tif
      [ -z \"$IPADDR\" -o -z \"$FQDN\" ]; then\n\t\techo \"IP address and/or FQDN
      Undefined\"\n\t\treturn 1;\n\tfi\n\t\n\techo $IPADDR $FQDN  >> /etc/hosts\n}\n\n\n###########################################################\n#
      Users and Authentication\n###########################################################\n\nfunction
      user_add_sudo {\n\t# Installs sudo if needed and creates a user in the sudo
      group.\n\t#\n\t# $1 - Required - username\n\t# $2 - Required - password\n\tUSERNAME=\"$1\"\n\tUSERPASS=\"$2\"\n\n\tif
      [ ! -n \"$USERNAME\" ] || [ ! -n \"$USERPASS\" ]; then\n\t\techo \"No new username
      and/or password entered\"\n\t\treturn 1;\n\tfi\n\t\n\taptitude -y install sudo\n\tadduser
      $USERNAME --disabled-password --gecos \"\"\n\techo \"$USERNAME:$USERPASS\" |
      chpasswd\n\tusermod -aG sudo $USERNAME\n}\n\nfunction user_add_pubkey {\n\t#
      Adds the users public key to authorized_keys for the specified user. Make sure
      you wrap your input variables in double quotes, or the key may not load properly.\n\t#\n\t#\n\t#
      $1 - Required - username\n\t# $2 - Required - public key\n\tUSERNAME=\"$1\"\n\tUSERPUBKEY=\"$2\"\n\t\n\tif
      [ ! -n \"$USERNAME\" ] || [ ! -n \"$USERPUBKEY\" ]; then\n\t\techo \"Must provide
      a username and the location of a pubkey\"\n\t \treturn 1;\n\tfi\n\t\n\tif [
      \"$USERNAME\" == \"root\" ]; then\n\t\tmkdir /root/.ssh\n\t\techo \"$USERPUBKEY\"
      >> /root/.ssh/authorized_keys\n\t\treturn 1;\n\tfi\n\t\n\tmkdir -p /home/$USERNAME/.ssh\n\techo
      \"$USERPUBKEY\" >> /home/$USERNAME/.ssh/authorized_keys\n\tchown -R \"$USERNAME\":\"$USERNAME\"
      /home/$USERNAME/.ssh\n}\n\nfunction ssh_disable_root {\n\t# Disables root SSH
      access.\n\tsed -i ''s/PermitRootLogin yes/PermitRootLogin no/'' /etc/ssh/sshd_config\n\ttouch
      /tmp/restart-ssh\n\t\n}\n\n###########################################################\n#
      Postfix\n###########################################################\n\nfunction
      postfix_install_loopback_only {\n\t# Installs postfix and configure to listen
      only on the local interface. Also\n\t# allows for local mail delivery\n\n\techo
      \"postfix postfix/main_mailer_type select Internet Site\" | debconf-set-selections\n\techo
      \"postfix postfix/mailname string localhost\" | debconf-set-selections\n\techo
      \"postfix postfix/destinations string localhost.localdomain, localhost\" | debconf-set-selections\n\taptitude
      -y install postfix\n\t/usr/sbin/postconf -e \"inet_interfaces = loopback-only\"\n\t#/usr/sbin/postconf
      -e \"local_transport = error:local delivery is disabled\"\n\n\ttouch /tmp/restart-postfix\n}\n\n\n###########################################################\n#
      Apache\n###########################################################\n\nfunction
      apache_install {\n\t# installs the system default apache2 MPM\n\taptitude -y
      install apache2\n\n\ta2dissite default # disable the interfering default virtualhost\n\n\t#
      clean up, or add the NameVirtualHost line to ports.conf\n\tsed -i -e ''s/^NameVirtualHost
      \\*$/NameVirtualHost *:80/'' /etc/apache2/ports.conf\n\tif ! grep -q NameVirtualHost
      /etc/apache2/ports.conf; then\n\t\techo ''NameVirtualHost *:80'' > /etc/apache2/ports.conf.tmp\n\t\tcat
      /etc/apache2/ports.conf >> /etc/apache2/ports.conf.tmp\n\t\tmv -f /etc/apache2/ports.conf.tmp
      /etc/apache2/ports.conf\n\tfi\n}\n\nfunction apache_tune {\n\t# Tunes Apache''s
      memory to use the percentage of RAM you specify, defaulting to 40%\n\n\t# $1
      - the percent of system memory to allocate towards Apache\n\n\tif [ ! -n \"$1\"
      ];\n\t\tthen PERCENT=40\n\t\telse PERCENT=\"$1\"\n\tfi\n\n\taptitude -y install
      apache2-mpm-prefork\n\tPERPROCMEM=10 # the amount of memory in MB each apache
      process is likely to utilize\n\tMEM=$(grep MemTotal /proc/meminfo | awk ''{
      print int($2/1024) }'') # how much memory in MB this system has\n\tMAXCLIENTS=$((MEM*PERCENT/100/PERPROCMEM))
      # calculate MaxClients\n\tMAXCLIENTS=${MAXCLIENTS/.*} # cast to an integer\n\tsed
      -i -e \"s/\\(^[ \\t]*MaxClients[ \\t]*\\)[0-9]*/\\1$MAXCLIENTS/\" /etc/apache2/apache2.conf\n\n\ttouch
      /tmp/restart-apache2\n}\n\nfunction apache_virtualhost {\n\t# Configures a VirtualHost\n\n\t#
      $1 - required - the hostname of the virtualhost to create \n\n\tif [ ! -n \"$1\"
      ]; then\n\t\techo \"apache_virtualhost() requires the hostname as the first
      argument\"\n\t\treturn 1;\n\tfi\n\n\tif [ -e \"/etc/apache2/sites-available/$1\"
      ]; then\n\t\techo /etc/apache2/sites-available/$1 already exists\n\t\treturn;\n\tfi\n\n\tmkdir
      -p /srv/www/$1/public_html /srv/www/$1/logs\n\n\techo \"<VirtualHost *:80>\"
      > /etc/apache2/sites-available/$1\n\techo \"    ServerName $1\" >> /etc/apache2/sites-available/$1\n\techo
      \"    DocumentRoot /srv/www/$1/public_html/\" >> /etc/apache2/sites-available/$1\n\techo
      \"    ErrorLog /srv/www/$1/logs/error.log\" >> /etc/apache2/sites-available/$1\n    echo
      \"    CustomLog /srv/www/$1/logs/access.log combined\" >> /etc/apache2/sites-available/$1\n\techo
      \"</VirtualHost>\" >> /etc/apache2/sites-available/$1\n\n\ta2ensite $1\n\n\ttouch
      /tmp/restart-apache2\n}\n\nfunction apache_virtualhost_from_rdns {\n\t# Configures
      a VirtualHost using the rdns of the first IP as the ServerName\n\n\tapache_virtualhost
      $(get_rdns_primary_ip)\n}\n\n\nfunction apache_virtualhost_get_docroot {\n\tif
      [ ! -n \"$1\" ]; then\n\t\techo \"apache_virtualhost_get_docroot() requires
      the hostname as the first argument\"\n\t\treturn 1;\n\tfi\n\n\tif [ -e /etc/apache2/sites-available/$1
      ];\n\t\tthen echo $(awk ''/DocumentRoot/ {print $2}'' /etc/apache2/sites-available/$1
      )\n\tfi\n}\n\n###########################################################\n#
      mysql-server\n###########################################################\n\nfunction
      mysql_install {\n\t# $1 - the mysql root password\n\n\tif [ ! -n \"$1\" ]; then\n\t\techo
      \"mysql_install() requires the root pass as its first argument\"\n\t\treturn
      1;\n\tfi\n\n\techo \"mysql-server mysql-server/root_password password $1\" |
      debconf-set-selections\n\techo \"mysql-server mysql-server/root_password_again
      password $1\" | debconf-set-selections\n\tapt-get -y install mysql-server mysql-client\n\n\techo
      \"Sleeping while MySQL starts up for the first time...\"\n\tsleep 5\n}\n\nfunction
      mysql_tune {\n\t# Tunes MySQL''s memory usage to utilize the percentage of memory
      you specify, defaulting to 40%\n\n\t# $1 - the percent of system memory to allocate
      towards MySQL\n\n\tif [ ! -n \"$1\" ];\n\t\tthen PERCENT=40\n\t\telse PERCENT=\"$1\"\n\tfi\n\n\tsed
      -i -e ''s/^#skip-innodb/skip-innodb/'' /etc/mysql/my.cnf # disable innodb -
      saves about 100M\n\n\tMEM=$(awk ''/MemTotal/ {print int($2/1024)}'' /proc/meminfo)
      # how much memory in MB this system has\n\tMYMEM=$((MEM*PERCENT/100)) # how
      much memory we''d like to tune mysql with\n\tMYMEMCHUNKS=$((MYMEM/4)) # how
      many 4MB chunks we have to play with\n\n\t# mysql config options we want to
      set to the percentages in the second list, respectively\n\tOPTLIST=(key_buffer
      sort_buffer_size read_buffer_size read_rnd_buffer_size myisam_sort_buffer_size
      query_cache_size)\n\tDISTLIST=(75 1 1 1 5 15)\n\n\tfor opt in ${OPTLIST[@]};
      do\n\t\tsed -i -e \"/\\[mysqld\\]/,/\\[.*\\]/s/^$opt/#$opt/\" /etc/mysql/my.cnf\n\tdone\n\n\tfor
      i in ${!OPTLIST[*]}; do\n\t\tval=$(echo | awk \"{print int((${DISTLIST[$i]}
      * $MYMEMCHUNKS/100))*4}\")\n\t\tif [ $val -lt 4 ]\n\t\t\tthen val=4\n\t\tfi\n\t\tconfig=\"${config}\\n${OPTLIST[$i]}
      = ${val}M\"\n\tdone\n\n\tsed -i -e \"s/\\(\\[mysqld\\]\\)/\\1\\n$config\\n/\"
      /etc/mysql/my.cnf\n\n\ttouch /tmp/restart-mysql\n}\n\nfunction mysql_create_database
      {\n\t# $1 - the mysql root password\n\t# $2 - the db name to create\n\n\tif
      [ ! -n \"$1\" ]; then\n\t\techo \"mysql_create_database() requires the root
      pass as its first argument\"\n\t\treturn 1;\n\tfi\n\tif [ ! -n \"$2\" ]; then\n\t\techo
      \"mysql_create_database() requires the name of the database as the second argument\"\n\t\treturn
      1;\n\tfi\n\n\techo \"CREATE DATABASE $2;\" | mysql -u root -p$1\n}\n\nfunction
      mysql_create_user {\n\t# $1 - the mysql root password\n\t# $2 - the user to
      create\n\t# $3 - their password\n\n\tif [ ! -n \"$1\" ]; then\n\t\techo \"mysql_create_user()
      requires the root pass as its first argument\"\n\t\treturn 1;\n\tfi\n\tif [
      ! -n \"$2\" ]; then\n\t\techo \"mysql_create_user() requires username as the
      second argument\"\n\t\treturn 1;\n\tfi\n\tif [ ! -n \"$3\" ]; then\n\t\techo
      \"mysql_create_user() requires a password as the third argument\"\n\t\treturn
      1;\n\tfi\n\n\techo \"CREATE USER ''$2''@''localhost'' IDENTIFIED BY ''$3'';\"
      | mysql -u root -p$1\n}\n\nfunction mysql_grant_user {\n\t# $1 - the mysql root
      password\n\t# $2 - the user to bestow privileges \n\t# $3 - the database\n\n\tif
      [ ! -n \"$1\" ]; then\n\t\techo \"mysql_create_user() requires the root pass
      as its first argument\"\n\t\treturn 1;\n\tfi\n\tif [ ! -n \"$2\" ]; then\n\t\techo
      \"mysql_create_user() requires username as the second argument\"\n\t\treturn
      1;\n\tfi\n\tif [ ! -n \"$3\" ]; then\n\t\techo \"mysql_create_user() requires
      a database as the third argument\"\n\t\treturn 1;\n\tfi\n\n\techo \"GRANT ALL
      PRIVILEGES ON $3.* TO ''$2''@''localhost'';\" | mysql -u root -p$1\n\techo \"FLUSH
      PRIVILEGES;\" | mysql -u root -p$1\n\n}\n\n###########################################################\n#
      PHP functions\n###########################################################\n\nfunction
      php_install_with_apache {\n\taptitude -y install php5 php5-mysql libapache2-mod-php5\n\ttouch
      /tmp/restart-apache2\n}\n\nfunction php_tune {\n\t# Tunes PHP to utilize up
      to 32M per process\n\n\tsed -i''-orig'' ''s/memory_limit = [0-9]\\+M/memory_limit
      = 32M/'' /etc/php5/apache2/php.ini\n\ttouch /tmp/restart-apache2\n}\n\n###########################################################\n#
      Wordpress functions\n###########################################################\n\nfunction
      wordpress_install {\n\t# installs the latest wordpress tarball from wordpress.org\n\n\t#
      $1 - required - The existing virtualhost to install into\n\n\tif [ ! -n \"$1\"
      ]; then\n\t\techo \"wordpress_install() requires the vitualhost as its first
      argument\"\n\t\treturn 1;\n\tfi\n\n\tif [ ! -e /usr/bin/wget ]; then\n\t\taptitude
      -y install wget\n\tfi\n\n\tVPATH=$(apache_virtualhost_get_docroot $1)\n\n\tif
      [ ! -n \"$VPATH\" ]; then\n\t\techo \"Could not determine DocumentRoot for $1\"\n\t\treturn
      1;\n\tfi\n\n\t# download, extract, chown, and get our config file started\n\tcd
      $VPATH\n\twget http://wordpress.org/latest.tar.gz\n\ttar xfz latest.tar.gz\n\tchown
      -R www-data: wordpress/\n\tcd $VPATH/wordpress\n\tcp wp-config-sample.php wp-config.php\n\tchown
      www-data wp-config.php\n\tchmod 640 wp-config.php\n\n\t# database configuration\n\tWPPASS=$(randomString
      20)\n\tmysql_create_database \"$DB_PASSWORD\" wordpress\n\tmysql_create_user
      \"$DB_PASSWORD\" wordpress \"$WPPASS\"\n\tmysql_grant_user \"$DB_PASSWORD\"
      wordpress wordpress\n\n\t# configuration file updates\n\tfor i in {1..4}\n\t\tdo
      sed -i \"0,/put your unique phrase here/s/put your unique phrase here/$(randomString
      50)/\" wp-config.php\n\tdone\n\n\tsed -i ''s/database_name_here/wordpress/''
      wp-config.php\n\tsed -i ''s/username_here/wordpress/'' wp-config.php\n\tsed
      -i \"s/password_here/$WPPASS/\" wp-config.php\n\n\t# http://downloads.wordpress.org/plugin/wp-super-cache.0.9.8.zip\n}\n\n###########################################################\n#
      Other niceties!\n###########################################################\n\nfunction
      goodstuff {\n\t# Installs the REAL vim, wget, less, and enables color root prompt
      and the \"ll\" list long alias\n\n\taptitude -y install wget vim less\n\tsed
      -i -e ''s/^#PS1=/PS1=/'' /root/.bashrc # enable the colorful root bash prompt\n\tsed
      -i -e \"s/^#alias ll=''ls -l''/alias ll=''ls -al''/\" /root/.bashrc # enable
      ll list long alias <3\n}\n\n\n###########################################################\n#
      utility functions\n###########################################################\n\nfunction
      restartServices {\n\t# restarts services that have a file in /tmp/needs-restart/\n\n\tfor
      service in $(ls /tmp/restart-* | cut -d- -f2-10); do\n\t\t/etc/init.d/$service
      restart\n\t\trm -f /tmp/restart-$service\n\tdone\n}\n\nfunction randomString
      {\n\tif [ ! -n \"$1\" ];\n\t\tthen LEN=20\n\t\telse LEN=\"$1\"\n\tfi\n\n\techo
      $(</dev/urandom tr -dc A-Za-z0-9 | head -c $LEN) # generate a random string\n}"},
      {"is_public": true, "username": "linode", "id": 3, "deployments_total": 0, "user_defined_fields":
      [], "updated": "2015-09-14T20:52:25", "label": "StackScript Python Library",
      "created": "2010-01-12T23:08:19", "images": ["linode/centos7", "linode/debian7",
      "linode/debian8", "linode/fedora22", "linode/ubuntu14.04lts"], "user_gravatar_id":
      "ead4da00f4fe6a4bd0b4f11a510c031d", "description": "Does nothing on its own.
      Do not deploy directly.\r\n\r\nA collection of useful Python functions to be
      included in other StackScripts.", "rev_note": "Initial import.", "deployments_active":
      0, "script": "#!/usr/bin/env python\n\n\"\"\"\nPython Library StackScript\n\n\tAuthor:
      Ricardo N Feliciano <rfeliciano@linode.com>\n\tVersion: 1.0.0.0\n\tRequirements:\n\t\t-
      n/a\n\nThis StackScript is not meant to be directly deployed. Includes a host
      of\nfunctions to do very common task on a distro, as implemented in Python.
      The\nfunctions in this library are designed to be run accross the Linode Core\nDistributions:\n\t-
      Ubuntu\n\t- CentOS\n\t- Debian\n\t- Fedora\n\"\"\"\n\n\nimport crypt\nimport
      fcntl\nimport logging\nimport os\nimport platform\nimport pwd\nimport socket\nimport
      subprocess\nimport sys\nimport time\ntry:\n\timport apt\nexcept:\n\ttry:\n\t\timport
      yum\n\texcept:\n\t\ttry:\n\t\t\timport dnf\n\t\texcept ImportError:\n\t\t\tprint(\"Package
      manager support was not found.\")\n\t\t\t\n\ndistro = None\n\"\"\"String list:
      Contains details of the distribution.\"\"\"\n\n\ndef end():\n\t\"\"\"End the
      StackScript cleanly.\"\"\"\n\t\n\t# Should the StackScripts themselves be removed
      here at some point?\n\tlogging.info(\"The StackScript has been completed.\")\n\tsubprocess.check_output(''echo
      \"The StackScript has completed. Press enter to continue.\" | wall -n'', shell=True)\n\n\ndef
      init():\n\t\"\"\"Start features we consider StackScript standard.\"\"\"\n\t\n\t#
      Sanity check for CentOS 7 & Fedora 22\n\tif os.path.exists(\"/var/log/stackscript.log\"):\n\t\tsys.exit(1)
      # StackScript already started once, bail\n\t\n\twith open(\"/etc/profile.d/stackscript.sh\",
      \"w\") as f:\n\t\tf.write(\"\"\"#!/bin/bash\nif pgrep -f \"python /root/StackScript\"
      &>/dev/null\nthen\n\techo \"####################################################################\"\n\techo
      \"#####\"\n\techo \"#####  Warning: Your StackScript is still running\"\n\techo
      \"#####\"\n\techo \"#####\"\n\techo \"#####  Please do not make any system changes
      until it \"\n\techo \"#####  completes. Log file is located at: \"\n\techo \"#####    /var/log/stackscript.log\"\n\techo
      \"####################################################################\"\n\techo
      \" \"\nelse\n\techo \"####################################################################\"\n\techo
      \"#####\"\n\techo \"#####  The StackScript has completed. Enjoy your system.\"\n\techo
      \"#####\"\n\techo \"#####\"\n\techo \"#####  For reference, the logfile is located
      at: \"\n\techo \"#####    /var/log/stackscript.log\"\n\techo \"####################################################################\"\n\techo
      \" \"\n\trm /etc/profile.d/stackscript.sh\nfi\"\"\")\n\t\n\tlogging_start()\n\n\ndef
      logging_start(the_file=\"/var/log/stackscript.log\", the_level=logging.INFO):\n\t\"\"\"Turn
      on logging.\"\"\"\n\t\n\tlogging.basicConfig(filename=the_file, level=the_level)\n\tlogging.info(\"Logging
      has started. \" + str(time.time()))\n\n\ndef system_detect_distro():\n\t\"\"\"Prepares
      distro information.\n\t\n\tThis is critical to support the Linode Core Distributions
      with a single\n\tscript.\n\t\"\"\"\n\tglobal distro\n\n\t# add support for logging\n\t\n\tdistro
      = dict(zip((''distname'', ''version'', ''codename''),\n\tplatform.linux_distribution(full_distribution_name=0)))\n\t\n\tdistro[''distname'']
      = distro[''distname''].lower()\n\n\tif distro[''distname''] in (''debian'',
      ''ubuntu''):\n\t\tdistro[''family''] = \"debian\"\n\telif distro[''distname'']
      in (''fedora'', ''centos''):\n\t\tdistro[''family''] = \"redhat\"\n\telse:\n\t\traise
      NotImplementedError(\"This distribution is not supported.\")\n\n\ndef system_IP_get():\n\t\"\"\"Return
      IPv4 address configured on eth0.\n\t\n\tThis basically is a disgusting hack.
      Please let me know if you find a\n\tcleaner way to do this.\"\"\"\n\t# add support
      for logging\n\n\ts = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\treturn
      socket.inet_ntoa(fcntl.ioctl(\n\t\ts.fileno(),\n\t\t0x8915, # SIOCGIFADDR\n\t\tstruct.pack(''256s'',
      \"eth0\")\n\t)[20:24])\n\n\ndef system_IP_rdns(IP):\n\t\"\"\"Get PTR for given
      IP address.\"\"\"\n\t# add support for logging\n\n\treturn socket.gethostbyaddr(IP)[0]\n\n\ndef
      system_package_install(package, update_first=True):\n\t\"\"\"Install a package
      with the appropriate package manager.\"\"\"\n\t# add support for logging\n\n\tif
      distro is None:\n\t\tsystem_detect_distro()\n\n\tsystem_update() if update_first
      else None\n\t\n\tif distro[''family''] == \"debian\":\n\t\tos.environ[''DEBIAN_FRONTEND'']
      = \"noninteractive\"\n\t\tcache = apt.Cache()\n\t\tpkg = cache[package]\n\t\tpkg.mark_install()\n\t\tcache.commit()\n\telif
      distro[''distname''] == \"centos\":\n\t\tyb = yum.YumBase()\n\t\tyb.conf.assumeyes
      = True\n\t\tyb.install(name=package)\n\t\tyb.resolveDeps()\n\t\tyb.processTransaction()\n\t\tyb.close()\n\telif
      distro[''distname''] == \"fedora\":\n\t\tdnfb = dnf.Base()\n\t\tdnfb.conf.assumeyes
      = True\n\t\tdnfb.read_all_repos()\n\t\tdnfb.fill_sack()\n\t\tdnfb.install(package)\n\t\tdnfb.resolve()\n\t\tdnfb.download_packages(dnfb.transaction.install_set)\n\t\tdnfb.do_transaction()\n\t\tdnfb.close()\n\n\ndef
      system_update():\n\t\"\"\"Uses the distro''s package manager to update packages.\"\"\"\n\t#add
      support for logging\n\t\n\tif distro is None:\n\t\tsystem_detect_distro()\n\t\n\tif
      distro[''family''] == \"debian\":\n\t\tcache = apt.Cache()\n\t\tcache.update()\n\t\tcache.open(None)\n\t\tcache.upgrade()\n\t\tcache.commit()\n\telif
      distro[''distname''] == \"centos\":\n\t\tyb = yum.YumBase()\n\t\tyb.conf.assumeyes
      = True\n\t\tyb.update()\n\t\tyb.resolveDeps()\n\t\tyb.processTransaction()\n\t\tyb.close()\n\telif
      distro[''distname''] == \"fedora\":\n\t\tdnfb = dnf.Base()\n\t\tdnfb.conf.assumeyes
      = True\n\t\t#dnfb.read_all_repos() #updates were failing with this line\n\t\tdnfb.fill_sack()\n\t\tdnfb.upgrade_all()\n\t\tdnfb.resolve()\n\t\tdnfb.do_transaction()\n\t\tdnfb.close()\n\n\ndef
      user_add(username, password, groups):\n\t\"\"\"Creates a Linux user account.\n\t\n\tArgs:\n\t\tusername
      (String): A Linux username.\n\t\tpassword (String): Password for the user.\n\t\tgroups
      (tuple): Groups that the user should be added to.\n\t\n\tReturns:\n\t\tbool:
      True if successful, False otherwise.\n\t\"\"\"\n\n\t# need to implement logging\n\t#
      need to implement group functionality\n\n\treturn subprocess.call([''useradd'',
      ''-m'', ''-p'', crypt.crypt(password, \"22\"), ''-s'', ''/bin/bash'', username])\n\n\ndef
      user_add_pubkey(username, key):\n\t\"\"\"Adds the public SSH key to the specified
      user.\"\"\"\n\t# need to implement logging\n\t\n\tif username != \"root\":\n\t\tos.seteuid(pwd.getpwnam(username).pw_uid)\n\t\tos.setegid(pwd.getpwnam(username).pw_gid)\n\t\n\tpubkey_dir
      = os.path.join(os.getenv(\"HOME\"), \".ssh\")\n\t\n\tif not os.path.isdir(pubkey_dir):\n\t\tos.makedirs(pubkey_dir)\n\t\n\twith
      open(os.path.join(pubkey_dir, \"authorized_keys\")) as f:\n\t\tf.write(key)\n\t\n\tif
      username != \"root\":\n\t\tos.seteuid(0)\n\t\tos.setegid(0)"}, {"is_public":
      true, "username": "linode", "id": 5, "deployments_total": 3, "user_defined_fields":
      [], "updated": "2015-09-14T20:53:05", "label": "Apache", "created": "2010-01-12T23:28:46",
      "images": ["linode/centos7", "linode/debian7", "linode/debian8", "linode/fedora22",
      "linode/ubuntu14.04lts"], "user_gravatar_id": "ead4da00f4fe6a4bd0b4f11a510c031d",
      "description": "Installs Apache on a Linode. Can also be used as a library for
      other StackScripts.", "rev_note": "Initial import.", "deployments_active": 3,
      "script": "#!/usr/bin/env python\n\n\"\"\"\nApache Web Server (httpd) StackScript\n\t\n\tAuthor:
      Ricardo N Feliciano <rfeliciano@linode.com>\n\tVersion: 1.0.0.0\n\tRequirements:\n\t\t-
      ss://linode/python-library <ssinclude StackScriptID=\"3\">\n\nThis StackScript
      both deploys as well as provides a library of functions for\nthe Apache Web
      Server (httpd). The functions in this StackScript are designed\nto be run across
      the Linode Core Distributions:\n\t- Ubuntu\n\t- CentOS\n\t- Debian\n\t- Fedora\n\"\"\"\n\nimport
      os\nimport subprocess\nimport sys\n\ntry: # we need to rename the included StackScript
      before we can import it\n\tos.rename(\"/root/ssinclude-3\", \"/root/pythonlib.py\")\nexcept:\n\tpass\n\nimport
      pythonlib\n\n\ndef httpd_install(start=True):\n\t\"\"\"Install Apache Web Server
      (httpd)\"\"\"\n\t# add logging support\n\n\tpackage = {\n\t\t''debian'': ''apache2'',\n\t\t''redhat'':
      ''httpd''\n\t}\n\n\tpythonlib.system_package_install(package[pythonlib.distro[''family'']])\n\n\tif(pythonlib.distro[''family'']==\"redhat\"
      and start):\n\t\tsubprocess.call([\"systemctl\", \"start\", \"httpd\"])\n\n\ndef
      httpd_site_enable():\n\t\"\"\"Add a virtual host configuration to Apache httpd.\"\"\"\n\t#
      add logging support\n\n\t# this doesn''t do anything yet\n\n\n#def httpd_mod_enable(mod):\n#\t\"\"\"Enable
      `mod` in Apache.\n#\t\n#\tArgs:\n#\t\tmod String: module to enable. Name should
      be what you would give the\n#\t\ta2enmod command.\n#\t\"\"\"\n#\t# add logging
      support\n#\n#\tif\n#\n#\tThis function has been delayed until a proper x-platform
      solution is made.\n\n\ndef main():\n\t\"\"\"Install Apache httpd.\"\"\"\n\t#
      add logging support\n\t\n\tpythonlib.init()\n\tpythonlib.system_update()\n\thttpd_install()\n\n\tpythonlib.end()\n\n\nif
      __name__ == \"__main__\":\n\tsys.exit(main())"}, {"is_public": true, "username":
      "linode", "id": 7, "deployments_total": 39, "user_defined_fields": [{"label":
      "MySQL/MariaDB root password", "name": "db_root_password", "default": ""}],
      "updated": "2015-09-14T20:53:10", "label": "MySQL", "created": "2010-01-12T23:53:50",
      "images": ["linode/centos7", "linode/debian7", "linode/debian8", "linode/fedora22",
      "linode/ubuntu14.04lts"], "user_gravatar_id": "ead4da00f4fe6a4bd0b4f11a510c031d",
      "description": "Install MySQL or MariaDB to a Linode. Can also be used as a
      library for other StackScripts.", "rev_note": "Initial import.", "deployments_active":
      24, "script": "#!/usr/bin/env python\n\n\"\"\"\nMySQL StackScript\n\t\n\tAuthor:
      Ricardo N Feliciano <rfeliciano@linode.com>\n\tVersion: 1.0.0.0\n\tRequirements:\n\t\t-
      ss://linode/python-library <ssinclude StackScriptID=\"3\">\n\nThis StackScript
      both deploys and provides a library for MySQL. The functions \nin this StackScript
      are designed to be run across the Linode Core Distributions:\n\t- Ubuntu\n\t-
      CentOS\n\t- Debian\n\t- Fedora\n\nStackScript User Defined Variables:\n\n<UDF
      name=\"db_root_password\" label=\"MySQL/MariaDB root password\" default=\"\"
      />\n\"\"\"\n\nimport os\nimport subprocess\nimport sys\n\ntry: # we''ll need
      to rename included StackScripts before we can import them\n\tos.rename(\"/root/ssinclude-3\",
      \"/root/pythonlib.py\")\nexcept:\n\tpass\n\nimport pythonlib\n\n\ndef mysql_install(root_pw
      = False, db_name = False):\n\t\"\"\"Install MySQL or MariaDB\"\"\"\n\t# add
      logging support\n\n\tpackage = {\n\t\t''debian'': ''mysql'',\n\t\t''redhat'':
      ''mariadb''\n\t}\n\n\tpythonlib.system_package_install(package[pythonlib.distro[''family'']]
      +\n\t\"-server\")\n\t\n\tmysql_start()\n\n\t# if provided with a root password,
      set it\n\tif root_pw :\n\t\tsubprocess.call([''mysqladmin'', ''-u'', ''root'',
      ''password'', root_pw])\n\t\n\t# if a database name was provided, let''s create
      it\n\tif db_name :\n\t\tsubprocess.call(''mysql -uroot -p'' + root_pw + '' -e
      \"create database '' + db_name + ''\"'', shell=True)\n\n\ndef mysql_start():\n\t\"\"\"Start
      MariaDB on CentOS and Fedora\"\"\"\n\n\tif pythonlib.distro[''family'']  ==
      \"redhat\":\n\t\tsubprocess.call([''systemctl'', ''start'', ''mariadb.service''])\n\n\ndef
      main():\n\t\"\"\"Install MySQL or MariaDB\"\"\"\n\t# add logging support\n\t\n\tpythonlib.init()\n\tpythonlib.system_update()\n\n\tif
      os.environ[''DB_ROOT_PASSWORD''] != \"\":\n\t\tmysql_install(os.environ[''DB_ROOT_PASSWORD''])\n\telse:\n\t\tmysql_install()\n\n\tpythonlib.end()\n\n\nif
      __name__ == \"__main__\":\n\tsys.exit(main())"}, {"is_public": true, "username":
      "linode", "id": 8, "deployments_total": 3, "user_defined_fields": [], "updated":
      "2015-09-24T00:03:28", "label": "PHP", "created": "2010-01-13T00:24:59", "images":
      ["linode/centos7", "linode/debian7", "linode/debian8", "linode/fedora22", "linode/ubuntu14.04lts"],
      "user_gravatar_id": "ead4da00f4fe6a4bd0b4f11a510c031d", "description": "", "rev_note":
      "v1.0.1", "deployments_active": 0, "script": "#!/usr/bin/env python\n\n\"\"\"\nPHP
      StackScript\n\t\n\tAuthor: Ricardo N Feliciano <rfeliciano@linode.com>\n\tVersion:
      1.0.1.2\n\tRequirements:\n\t\t- ss://linode/python-library <ssinclude StackScriptID=\"3\">\n\nThis
      StackScript both deploys as well as provides a library of functions for\nPHP.
      The functions in this StackScript are designed to be run across the \nLinode
      Core Distributions:\n\t- Ubuntu\n\t- CentOS\n\t- Debian\n\t- Fedora\n\"\"\"\n\nimport
      os\nimport subprocess\nimport sys\n\ntry: # we''ll need to rename included StackScripts
      before we can import them\n\tos.rename(\"/root/ssinclude-3\", \"/root/pythonlib.py\")\nexcept:\n\tpass\n\nimport
      pythonlib\n\n\ndef php_apache_mod_install():\n\t\"\"\"Install Apache httpd PHP
      module.\"\"\"\n\t# add logging support\n\n\tpackage = {\n\t\t''debian'': ''php5'',\n\t\t''redhat'':
      ''php''\n\t}\n\n\tpythonlib.system_package_install(package[pythonlib.distro[''family'']])\n\n\n#def
      php_fpm_install():\n\n\ndef php_install():\n\t\"\"\"Install PHP.\n\t\n\tDefaults
      to installing the mod_PHP implemention of PHP.\n\t\"\"\"\n\t# add logging support\n\n\tphp_apache_mod_install()\n\n\ndef
      php_install_module(module, update_index=True):\n\t\"\"\"Install a PHP module.\"\"\"\n\n\tprefix
      = {\n\t\t''debian'': ''php5-'',\n\t\t''redhat'': ''php-''\n\t}\n\n\tpythonlib.system_package_install(prefix[pythonlib.distro[''family'']]
      + module, update_index)\n\n\ndef php_install_module_common():\n\t\"\"\"Install
      most common PHP modules.\n\n\tInstall GD, mcrypt, pear, mysql, and the cli.\"\"\"\n\t\n\tphp_install_module(\"gd\")\n\t#php_install_module(\"mcrypt\",
      False) #not in CentOS7 repos :(\n\t#php_install_module(\"pear\", False) # both
      families use php-pear so\n\t#installing php5-pear in the Debian family will
      fail\n\tphp_install_module(\"mysql\", False)\n\tphp_install_module(\"cli\",
      False)\n\trestart()\n\n\ndef restart():\n\tif pythonlib.distro[''family''] ==
      \"debian\":\n\t\tsubprocess.call([''service'', ''apache2'', ''restart''])\n\telif
      pythonlib.distro[''family''] == \"redhat\":\n\t\tsubprocess.call([''systemctl'',
      ''restart'', ''httpd''])\n\n\ndef main():\n\t\"\"\"Install PHP.\"\"\"\n\t# add
      logging support\n\t\n\tpythonlib.init()\n\tpythonlib.system_update()\n\tphp_install()\n\n\tpythonlib.end()\n\n\nif
      __name__ == \"__main__\":\n\tsys.exit(main())"}, {"is_public": true, "username":
      "linode", "id": 9, "deployments_total": 2619, "user_defined_fields": [{"label":
      "MySQL/MariaDB root password", "name": "db_root_password"}, {"example": "create
      this empty database", "label": "Create Database", "name": "db_name", "default":
      ""}], "updated": "2018-02-15T00:30:34", "label": "LAMP Stack", "created": "2010-01-13T01:50:15",
      "images": ["linode/centos7", "linode/debian7", "linode/debian8", "linode/fedora22",
      "linode/ubuntu14.04lts"], "user_gravatar_id": "ead4da00f4fe6a4bd0b4f11a510c031d",
      "description": "Installs a full LAMP stack on a Linode. Uses MySQL for Debian
      and Ubuntu and MariaDB for CentOS and Fedora (the new defaults). This can also
      be used as a library for other StackScripts.", "rev_note": "Initial import.",
      "deployments_active": 1332, "script": "#!/usr/bin/env python\n\n\"\"\"\nLAMP
      StackScript\n\t\n\tAuthor: Ricardo N Feliciano <rfeliciano@linode.com>\n\tVersion:
      1.0.0.0\n\tRequirements:\n\t\t- ss://linode/python-library <ssinclude StackScriptID=\"3\">\n\t\t-
      ss://linode/apache <ssinclude StackScriptID=\"5\">\n\t\t- ss://linode/mysql
      <ssinclude StackScriptID=\"7\">\n\t\t- ss://linode/php <ssinclude StackScriptID=\"8\">\n\nThis
      StackScript both deploys and provides a library of functions for\ncreating a
      LAMP stack. The functions in this StackScript are designed to be \nrun across
      Linode''s core distributions:\n\t- Ubuntu\n\t- CentOS\n\t- Debian\n\t- Fedora\n\nStackScript
      User-Defined Variables (UDF): \n\n<UDF name=\"db_root_password\" label=\"MySQL/MariaDB
      root password\" />\n<UDF name=\"db_name\" label=\"Create Database\" default=\"\"
      example=\"create this empty database\" />\n\"\"\"\n\nimport os\nimport sys\n\ntry:
      # we''ll need to rename included StackScripts before we can import them\n\tos.rename(\"/root/ssinclude-3\",
      \"/root/pythonlib.py\")\n\tos.rename(\"/root/ssinclude-5\", \"/root/apache.py\")\n\tos.rename(\"/root/ssinclude-7\",
      \"/root/mysql.py\")\n\tos.rename(\"/root/ssinclude-8\", \"/root/php.py\")\nexcept:\n\tpass\n\nimport
      pythonlib\nimport apache\nimport mysql\nimport php\n\n\ndef main():\n\t\"\"\"Install
      Apache, MySQL/MariaDB, and PHP.\"\"\"\n\t# add logging support\n\tpythonlib.init()\n\t\n\tif
      os.environ[''DB_ROOT_PASSWORD''] != \"\":\n\t\tdb_root_password = os.environ[''DB_ROOT_PASSWORD'']\n\telse:\n\t\tdb_root_password
      = False\n\t\n\tif os.environ[''DB_NAME''] != \"\":\n\t\tdb_name = os.environ[''DB_NAME'']\n\telse:\n\t\tdb_name
      = False\n\n\tpythonlib.system_update()\n\tapache.httpd_install()\n\tmysql.mysql_install(db_root_password,
      db_name)\n\tphp.php_install()\n\tphp.php_install_module_common()\n\n\tpythonlib.end()\n\n\nif
      __name__ == \"__main__\":\n\tsys.exit(main())"}, {"is_public": true, "username":
      "linode", "id": 10, "deployments_total": 20436, "user_defined_fields": [{"label":
      "MySQL root Password", "name": "db_password"}, {"example": "Optionally create
      this database", "label": "Create Database", "name": "db_name", "default": ""},
      {"example": "Optionally create this user", "label": "Create MySQL User", "name":
      "db_user", "default": ""}, {"example": "User''s password", "label": "MySQL User''s
      Password", "name": "db_user_password", "default": ""}], "updated": "2015-09-14T20:54:01",
      "label": "LAMP", "created": "2010-01-13T02:21:52", "images": ["linode/ubuntu12.04lts"],
      "user_gravatar_id": "ead4da00f4fe6a4bd0b4f11a510c031d", "description": "Installs
      a fully functioning, ready to go LAMP stack that''s optimized specifically for
      your Linode''s resources.  By default, it creates a VirtualHost using the reverse
      DNS of your Linode''s primary IP.  \r\n\r\nOptionally creates a MySQL database
      and user, and assigns that user grants to the database.\r\n\r\nYou may use this
      as an example for creating more VirtualHosts.  Set up VirtualHosts, install
      your sites, point your domains to your Linode, and you''re set!", "rev_note":
      "", "deployments_active": 8189, "script": "#!/bin/bash\n# <UDF name=\"db_password\"
      Label=\"MySQL root Password\" />\n# <UDF name=\"db_name\" Label=\"Create Database\"
      default=\"\" example=\"Optionally create this database\" />\n# <UDF name=\"db_user\"
      Label=\"Create MySQL User\" default=\"\" example=\"Optionally create this user\"
      />\n# <UDF name=\"db_user_password\" Label=\"MySQL User''s Password\" default=\"\"
      example=\"User''s password\" />\n\n\nsource <ssinclude StackScriptID=\"1\">\n\nsystem_update\npostfix_install_loopback_only\nmysql_install
      \"$DB_PASSWORD\" && mysql_tune 40\nmysql_create_database \"$DB_PASSWORD\" \"$DB_NAME\"\nmysql_create_user
      \"$DB_PASSWORD\" \"$DB_USER\" \"$DB_USER_PASSWORD\"\nmysql_grant_user \"$DB_PASSWORD\"
      \"$DB_USER\" \"$DB_NAME\"\nphp_install_with_apache && php_tune\napache_install
      && apache_tune 40 && apache_virtualhost_from_rdns\ngoodstuff\nrestartServices"},
      {"is_public": true, "username": "linode", "id": 11, "deployments_total": 356,
      "user_defined_fields": [{"label": "MySQL root Password", "name": "db_password"},
      {"example": "Create this database", "label": "Database Name", "name": "db_name",
      "default": ""}, {"example": "Create this user", "label": "MySQL Username", "name":
      "db_user", "default": ""}, {"example": "User''s password", "label": "MySQL Username
      Password", "name": "db_user_password", "default": ""}], "updated": "2014-07-03T12:00:53",
      "label": "MySQL", "created": "2010-01-13T02:37:47", "images": ["linode/debian7.5",
      "linode/ubuntu12.04lts", "linode/debian7.4", "linode/ubuntu10.04lts", "linode/debian732bit",
      "linode/ubuntu10.04lts32bit"], "user_gravatar_id": "ead4da00f4fe6a4bd0b4f11a510c031d",
      "description": "Brings up a fully functioning MySQL Stack, which is tuned specifically
      for your Linode''s resources.  Optionally creates a database, a user, and assigns
      that user grants to the database.", "rev_note": "", "deployments_active": 169,
      "script": "#!/bin/bash\n# <UDF name=\"db_password\" Label=\"MySQL root Password\"
      />\n# <UDF name=\"db_name\" Label=\"Database Name\" default=\"\" example=\"Create
      this database\" />\n# <UDF name=\"db_user\" Label=\"MySQL Username\" default=\"\"
      example=\"Create this user\" />\n# <UDF name=\"db_user_password\" Label=\"MySQL
      Username Password\" default=\"\" example=\"User''s password\" />\n\nsource <ssinclude
      StackScriptID=1>\n\nsystem_update\npostfix_install_loopback_only\nmysql_install
      \"$DB_PASSWORD\" && mysql_tune 90\nmysql_create_database \"$DB_PASSWORD\" \"$DB_NAME\"\nmysql_create_user
      \"$DB_PASSWORD\" \"$DB_USER\" \"$DB_USER_PASSWORD\"\nmysql_grant_user \"$DB_PASSWORD\"
      \"$DB_USER\" \"$DB_NAME\"\ngoodstuff\nrestartServices"}, {"is_public": true,
      "username": "linode", "id": 12, "deployments_total": 12903, "user_defined_fields":
      [{"label": "MariaDB/MySQL root password", "name": "db_root_password"}, {"label":
      "Database name for WordPress", "name": "db_name", "default": "wordpress"}],
      "updated": "2015-09-28T19:06:30", "label": "WordPress", "created": "2010-01-13T02:52:18",
      "images": ["linode/centos7", "linode/debian7", "linode/debian8", "linode/ubuntu14.04lts"],
      "user_gravatar_id": "ead4da00f4fe6a4bd0b4f11a510c031d", "description": "A ready-to-rock
      WordPress install using the latest release from WordPress.org.\r\n\r\nInstalls
      WordPress on a full LAMP stack using MySQL for Debian/Ubuntu and MariaDB for
      CentOS (the new default).", "rev_note": "Initial import of v1.0.0", "deployments_active":
      5243, "script": "#!/usr/bin/env python\n\n\"\"\"\nWordPress StackScript\n\n\tAuthor:
      Ricardo N Feliciano <rfeliciano@linode.com>\n\tVersion: 1.0.0.0\n\tRequirements:\n\t\t-
      ss://linode/python-library <ssinclude StackScriptID=\"3\">\n\t\t- ss://linode/apache
      <ssinclude StackScriptID=\"5\">\n\t\t- ss://linode/mysql <ssinclude StackScriptID=\"7\">\n\t\t-
      ss://linode/php <ssinclude StackScriptID=\"8\">\n\t\t- ss://linode/lamp-stack
      <ssinclude StackScriptID=\"9\">\n\nThis StackScript both deploys and provides
      a library of functions for creating\na basic WordPress install. This StackScript
      is designed to be run across\nLinode''s Core Distributions:\n\t- Ubuntu LTS\n\t-
      CentOS\n\t- Debian\n\nStackScript User-Defined Variables (UDF):\n\t\n\t<UDF
      name=\"db_root_password\" label=\"MariaDB/MySQL root password\" />\n\t<UDF name=\"db_name\"
      label=\"Database name for WordPress\" default=\"wordpress\" />\n\"\"\"\n\nimport
      os\nimport pwd\nimport shutil\nimport sys\nimport tarfile\nimport urllib\n\ntry:
      # we''ll need to rename included StackScripts before we can import them\n\tos.rename(\"/root/ssinclude-3\",
      \"/root/pythonlib.py\")\n\tos.rename(\"/root/ssinclude-5\", \"/root/apache.py\")\n\tos.rename(\"/root/ssinclude-7\",
      \"/root/mysql.py\")\n\tos.rename(\"/root/ssinclude-8\", \"/root/php.py\")\n\tos.rename(\"/root/ssinclude-9\",
      \"/root/lamp.py\")\nexcept:\n\tpass\n\nimport pythonlib\nimport apache\nimport
      mysql\nimport php\nimport lamp\n\n\ndef install(path):\n\t\"\"\"Install WordPress.\"\"\"\n\t#logging
      support\n\t\n\tshutil.rmtree(path)\n\turllib.urlretrieve(\"https://wordpress.org/latest.tar.gz\",
      \"wordpress.tar.gz\")\n\ttarball = tarfile.open(\"wordpress.tar.gz\")\n\ttarball.extractall(os.path.dirname(path))\n\ttarball.close()\n\n\tos.rename(os.path.dirname(path)
      + \"/wordpress\", path)\n\t\n\t# might be better off a part of the Apache StackScript
      in the future\n\thttpd_user = {\n\t\t''debian'': ''www-data'',\n\t\t''redhat'':
      ''apache''\n\t}\n\t\n\t# Recursively set permissions for our web directory\n\tos.chown(path,
      pwd.getpwnam(httpd_user[pythonlib.distro[''family'']]).pw_uid, -1)\n\tfor root,
      dirs, files in os.walk(path):  \n\t\tfor found_dirs in dirs:  \n\t\t\tos.chown(os.path.join(root,
      found_dirs), pwd.getpwnam(httpd_user[pythonlib.distro[''family'']]).pw_uid,
      -1)\n\t\tfor found_files in files:\n\t\t\tos.chown(os.path.join(root, found_files),
      pwd.getpwnam(httpd_user[pythonlib.distro[''family'']]).pw_uid, -1)\n\n\ndef
      main():\n\t\"\"\"Install WordPress on a basic LAMP stack.\n\t\n\tMost of the
      initial code in this function needs to be pulled from the LAMP\n\tStackScript
      rather than placed here.\n\t\"\"\"\n\t# add logging support\n\tpythonlib.init()\n\t\n\tif
      os.environ[''DB_ROOT_PASSWORD''] != \"\":\n\t\tdb_root_password = os.environ[''DB_ROOT_PASSWORD'']\n\telse:\n\t\tdb_root_password
      = False\n\t\n\tif os.environ[''DB_NAME''] != \"\":\n\t\tdb_name = os.environ[''DB_NAME'']\n\telse:\n\t\tdb_name
      = False\n\t\n\tpythonlib.system_update()\n\tapache.httpd_install()\n\tmysql.mysql_install(db_root_password,
      db_name)\n\tphp.php_install()\n\tphp.php_install_module_common()\n\t\n\t# might
      be better off a part of the Apache StackScript in the future\n\thttpd_docroot
      = \"/var/www/html\"\n\n\tif pythonlib.distro[''distname''] == \"debian\" and
      float(pythonlib.distro[''version'']) < 8.0 :\n\t\thttpd_docroot = \"/var/www\"\n\t\n\tinstall(httpd_docroot)\n\tpythonlib.end()\n\nif
      __name__ == \"__main__\":\n\tsys.exit(main())"}, {"is_public": true, "username":
      "linode", "id": 13, "deployments_total": 510, "user_defined_fields": [{"example":
      "Username to log into your Linode with. We will not be using ''root''.", "label":
      "Linux Username", "name": "linux_user"}, {"example": "The password to log into
      the Linode with.", "label": "Linux User''s Password", "name": "linux_user_password"},
      {"example": "Public SSH key for passwordless logins", "default": "", "name":
      "linux_user_pubkey", "label": "Linux User''s public SSH key"}, {"label": "Database
      root password", "name": "db_root_password"}, {"example": "We''ll send an email
      with further instructions to this address when installation is completed. Check
      your spam folder if neccessary.", "label": "My email address", "name": "completion_email_address"},
      {"oneof": "Latest Drupal 8,Latest Drupal 7", "label": "Drupal Version", "name":
      "drupal_version"}, {"label": "Drupal Database Name", "name": "drupal_db_name"},
      {"label": "Drupal Database User", "name": "drupal_db_user"}, {"label": "Drupal
      Database Password", "name": "drupal_db_password"}], "updated": "2015-12-03T20:02:12",
      "label": "Basic Drupal Installation StackScript", "created": "2010-01-13T02:57:35",
      "images": ["linode/debian8", "linode/ubuntu14.04lts"], "user_gravatar_id": "ead4da00f4fe6a4bd0b4f11a510c031d",
      "description": "Installs Drupal 8 or Drupal 7 with your typical LAMP stack.
      This would be Apache, PHP, MySQL on top of Ubuntu or Debian.\r\n\r\n - We recommend
      a minimum disk image size of 1500MB.", "rev_note": "Updated to Drupal 8.0.1.",
      "deployments_active": 182, "script": "#!/usr/bin/python\n#\n# Basic Drupal Installation
      StackScript\n#   StackScript written by Ricardo N Feliciano <rfeliciano@linode.com>\n#   Version
      1.2.4.0\n#\n#   Notes:\n#\n#       - Deploy your distro with at least 1500MB
      of space.\n#\n## Standard Deployment Variables\n#\n# <UDF name=\"linux_user\"
      label=\"Linux Username\" example=\"Username to log into your Linode with. We
      will not be using ''root''.\" />\n# <UDF name=\"linux_user_password\" label=\"Linux
      User''s Password\" example=\"The password to log into the Linode with.\" />\n#
      <UDF name=\"linux_user_pubkey\" default=\"\" label=\"Linux User''s public SSH
      key\" example=\"Public SSH key for passwordless logins\" />\n# <UDF name=\"db_root_password\"
      label=\"Database root password\" />\n# <UDF name=\"completion_email_address\"
      label=\"My email address\" example=\"We''ll send an email with further instructions
      to this address when installation is completed. Check your spam folder if neccessary.\"
      />\n#\n## Drupal Configuration\n#\n# <UDF name=\"drupal_version\" label=\"Drupal
      Version\" oneof=\"Latest Drupal 8,Latest Drupal 7\" />\n# <UDF name=\"drupal_db_name\"
      label=\"Drupal Database Name\" />\n# <UDF name=\"drupal_db_user\" label=\"Drupal
      Database User\" />\n# <UDF name=\"drupal_db_password\" label=\"Drupal Database
      Password\" />\n#\n### Imports\n#\nimport fcntl\nimport logging\nimport os\nimport
      platform\nimport socket\nimport struct\nimport subprocess\nimport sys\nimport
      time\n\n# Sanity check\nif( os.path.exists( \"/var/log/stackscript.log\" )):\n\tsys.exit(
      1 ) # This script has already ran, exit.\n\n\n### Initiate logging\n#\n# Logs
      the StackScript specified output. Default logging level is `INFO` however you
      can change it\n# to `DEBUG` for much more in-depth log output.\nlogging.basicConfig(
      filename=\"/var/log/stackscript.log\", level=logging.INFO )\nlogging.info( \"Logging
      has started.\" )\n\n\n####################################################################################################\n####
      Variables\n###\n######\ndistro              = {}\nlinuxUser           = os.environ[
      ''LINUX_USER'' ]\nlinuxUserPasswd     = os.environ[ ''LINUX_USER_PASSWORD''
      ]\nlinuxUserPubkey     = os.environ[ ''LINUX_USER_PUBKEY'' ]\ndbRootPasswd        =
      os.environ[ ''DB_ROOT_PASSWORD'' ]\nemailAddress        = os.environ[ ''COMPLETION_EMAIL_ADDRESS''
      ]\n\n# Drupal Configuration\ndrupalVersion       = os.environ[ ''DRUPAL_VERSION''
      ]\ndrupalDBName        = os.environ[ ''DRUPAL_DB_NAME'' ]\ndrupalDBUser        =
      os.environ[ ''DRUPAL_DB_USER'' ]\ndrupalDBPasswd      = os.environ[ ''DRUPAL_DB_PASSWORD''
      ]\n\n\n####################################################################################################\n####
      Functions\n###\n######\n####\n## Installs the greatest web server in the world.
      Optionally restarts the service.\n#\n#   @restart - boolean - whether or not
      Apache should be restarted upon completion.\n##\ndef apacheInstall( restart
      = True ):\n\n    if( distro[ ''group'' ] == 1 ):\n\n        logging.debug( \"Started:
      Installing Apache on a Debian/Ubuntu system.\" )\n        os.system( \"apt-get
      -y install apache2\" )\n        time.sleep( 1 ) # There''s been hanging issues,
      sleeping seems to help\n        os.system( \"a2enmod alias\" )\n        os.system(
      \"a2enmod rewrite\" )\n        os.system( \"a2enmod status\" )\n        os.system(
      \"a2dissite 000-default\" ) # Ubuntu 13.10 and after\n        if( distro[ ''name''
      ].upper() == \"DEBIAN\" and distro[''version''] >= 8 ):\n            os.system(
      \"systemctl restart apache2.service\" ) if restart else None\n        else:\n            os.system(
      \"service apache2 restart\" ) if restart else None\n        time.sleep( 1 )
      # There''s been hanging issues, sleeping seems to help\n        logging.debug(
      \"Completed: Installing Apache on a Debian/Ubuntu system.\" )\n    elif( distro[
      ''group'' ] == 2 ):\n\n        logging.debug( \"Started: Installing Apache on
      a CentOS/Fedora system.\" )\n        os.system( \"yum -y install httpd\" )\n        time.sleep(
      1 ) # There''s been hanging issues, sleeping seems to help\n        os.system(
      \"echo \\\"LoadModule alias_module modules/mod_alias.so\\\" >> /etc/httpd/conf.httpd.conf\"
      )\n        os.system( \"echo \\\"LoadModule rewrite_module modules/mod_rewrite.so\\\"
      >> /etc/httpd/conf.httpd.conf\" )\n        os.system( \"echo \\\"LoadModule
      status_module modules/mod_status.so\\\" >> /etc/httpd/conf.httpd.conf\" )\n        os.system(
      \"systemctl enable httpd.service\" ) # Start Apache on boot\n        os.system(
      \"systemctl restart httpd.service\" ) if restart else None\n        time.sleep(
      1 ) # There''s been hanging issues, sleeping seems to help\n        logging.debug(
      \"Completed: Installing Apache on a CentOS/Fedora system.\" )\n    else:\n\n        logging.error(
      \"This distro is not supported.\" )\n\n\n####\n## Detects what distro we''re
      running. Uses Python''s `platform` modules however mades the info easier\n#   for
      our script to read.\n##\ndef detectDistro( distro ):\n\n    logging.debug( \"Started:
      Detecting Distribution Information.\" )\n    distroInfo = platform.linux_distribution()\n    distro[
      ''name'' ] = distroInfo[ 0 ]\n    distro[ ''version'' ] = distroInfo[ 1 ]\n    distro[
      ''codename'' ] = distroInfo[ 2 ]\n\n    if( distroInfo[ 0 ].upper() == \"UBUNTU\"
      or distroInfo[ 0 ].upper() == \"DEBIAN\" ):\n\n        distro[ ''group'' ] =
      1\n    elif( distroInfo[ 0 ].upper() == \"CENTOS LINUX\" or distroInfo[ 0 ].upper()
      == \"FEDORA\" ):\n\n        distro[ ''group'' ] = 2\n    else:\n\n        logging.warn(
      \"Unable to determine a supported distribution. Will assume a Debian/Ubuntu
      based distro.\" )\n        distro[ ''group'' ] = 1\n\n    logging.debug( \"Completed:
      Detecting Distribution Information.\" )\n\n\n####\n## Installs a Database Management
      System. On Debian and Ubuntu this would be MySQL, on CentOS and\n#   Fedora
      this would be MariaDB.\n#\n#   @rootPassword - the root password to set for
      the database.\n##\ndef dbmsInstall( rootPassword ):\n\n    if( distro[ ''group''
      ] == 1 ):\n\n        logging.debug( \"Started: Installing MySQL on a Debian/Ubuntu
      system.\" )\n        os.system( ''echo \"mysql-server mysql-server/root_password
      password '' + rootPassword + ''\" | debconf-set-selections'' )\n        os.system(
      ''echo \"mysql-server mysql-server/root_password_again password '' + rootPassword
      + ''\" | debconf-set-selections'' )\n        time.sleep( 5 ) # There''s been
      hanging issues, sleeping seems to help\n        os.system( \"apt-get -y install
      mysql-server\" )\n        logging.debug( \"Completed: Installing MySQL on a
      Debian/Ubuntu system.\" )\n    elif( distro[ ''group'' ] == 2 ):\n\n        logging.debug(
      \"Started: Installing MariaDB on a CentOS/Fedora system.\" )\n        time.sleep(
      3 ) # There''s been hanging issues, sleeping seems to help\n        os.system(
      \"yum -y install mariadb-server\" )\n        time.sleep( 2 ) # There''s been
      hanging issues, sleeping seems to help\n        os.system( \"systemctl start
      mariadb.service\" ) # Start MariaDB on boot\n        os.system( \"systemctl
      enable mariadb.service\" ) # Start MariaDB on boot\n        os.system( \"mysqladmin
      -u root password \" + rootPassword )\n        logging.debug( \"Completed: Installing
      MariaDB on a CentOS/Fedora system.\" )\n    else:\n\n        logging.error(
      \"This distro is not supported.\" )\n\n\n####\n## Installs Drupal.\n#\n#   @version
      - string - the version of Drupal to install. Currently 7 or 8.\n#   @virtualHost
      - string - the hostname that will be used for the site.\n#   @rootPath - string
      - where the files should go. The first half of the DocumentRoot.\n##\ndef drupalInstall(
      version, virtualHost, rootPath = ''/srv/www'' ):\n\n    logging.debug( \"Started:
      Installing Drupal.\" )\n    vhostRoot = rootPath + \"/\" + virtualHost\n    logging.debug(
      \"Creating vhost document root and related directories.\" )\n    os.system(
      \"mkdir -p \" + vhostRoot + \"/logs\" )\n    os.system( \"mkdir -p \" + vhostRoot
      + \"/backups\" )\n\n    if( version == \"Latest Drupal 7\" ):\n\n\t\tlogging.debug(
      \"Downloading the latest Drupal 7 release and saving it to \" + vhostRoot )\n\t\t#os.system(
      \"wget -P \" + vhostRoot + \" http://ftp.drupal.org/files/projects/$(wget -O-
      https://www.drupal.org/node/3060/release | egrep -o ''drupal-7\\.[0-9\\.]+.tar.gz''
      | sort -V  | tail -1)\" )\n\t\tos.system( \"wget -P \" + vhostRoot + \" http://ftp.drupal.org/files/projects/drupal-7.41.tar.gz\"
      )\n    elif( version == \"Latest Drupal 8\" ):\n\n\t\tlogging.debug( \"Downloading
      the latest Drupal 8 release and saving it to \" + vhostRoot )\n\t\t#os.system(
      \"wget -P \" + vhostRoot + \" http://ftp.drupal.org/files/projects/$(wget -O-
      https://www.drupal.org/node/3060/release | egrep -o ''drupal-8\\.[0-9\\.-]+.tar.gz''
      | sort -V  | tail -1)\" )\n\t\tos.system( \"wget -P \" + vhostRoot + \" http://ftp.drupal.org/files/projects/drupal-8.0.1.tar.gz\"
      )\n    else:\n\n        logging.error( \"Invalid Drupal version. Quiting.\"
      )\n\n    logging.debug( \"Untarring.\" )\n    if( distro[ ''name'' ].upper()
      == \"FEDORA\" ): # Fedora doesn''t have Tar for some reason\n        os.system(
      \"yum -y install tar\" )\n    os.system( \"tar xfz \" + vhostRoot + \"/drupal-*.tar.gz
      -C \" + vhostRoot )\n    logging.debug( \"Deleting the tarball.\" )\n    os.system(
      \"rm -r \" + vhostRoot + \"/drupal-*.tar.gz\" )\n    logging.debug( \"Renaming
      the Drupal directory as `public_html`.\" )\n    os.system( \"mv \" + vhostRoot
      + \"/drupal-* \" + vhostRoot + \"/public_html\" )\n    # Create a new settings.php
      file.\n    os.system( \"cp \" + vhostRoot + \"/public_html/sites/default/default.settings.php
      \" + vhostRoot + \"/public_html/sites/default/settings.php\" )\n    os.system(
      \"cp \" + vhostRoot + \"/public_html/sites/default/default.services.yml \" +
      vhostRoot + \"/public_html/sites/default/services.yml\" )\n    os.system( \"chown
      -R \" + linuxUser + \":\" + linuxUser + \" /home/\" + linuxUser )\n    os.system(
      \"chmod 750 /home/\" + linuxUser )\n    os.system( \"chmod -R 770 \" + vhostRoot
      + \"/public_html\" )\n\n    if( distro[ ''group'' ] == 1 ):\n\n        os.system(
      \"adduser www-data \" + linuxUser )\n    elif( distro[ ''group'' ] == 2 ):\n\n        os.system(
      \"usermod -a -G \" + linuxUser + \" apache\" )\n\n    # Create dbms database
      and user for Drupal\n    os.system( \"echo \\\"CREATE DATABASE \" + drupalDBName
      + \"\\\" | mysql -u root -p\" + dbRootPasswd )\n    logging.debug( \"Created
      database.\" )\n    os.system( \"echo \\\"CREATE USER ''\" + drupalDBUser + \"''@''localhost''
      IDENTIFIED BY ''\" + drupalDBPasswd + \"'';\\\" | mysql -u root -p\" + dbRootPasswd
      )\n    logging.debug( \"Created database user.\" )\n    os.system( \"echo \\\"GRANT
      ALL PRIVILEGES ON \" + drupalDBName + \".* TO ''\" + drupalDBUser + \"''@''localhost'';\\\"
      | mysql -u root -p\" + dbRootPasswd )\n    logging.debug( \"Granted user access
      to the database.\" )\n    os.system( \"echo \\\"FLUSH PRIVILEGES;\\\" | mysql
      -u root -p\" + dbRootPasswd )\n    logging.debug( \"Flushed privileges.\" )\n    drupalDBConfig
      = \"\"\"\\$databases[ ''\\\\''''default''\\\\'''' \\]\\[ ''\\\\''''default''\\\\''''
      ] = array(\\\\n\\\\t''\\\\''''database''\\\\'''' => ''\\\\''''\"\"\" + drupalDBName
      + \"\"\"''\\\\'''',\\\\n\\\\t''\\\\''''username''\\\\'''' => ''\\\\''''\"\"\"
      + drupalDBUser + \"\"\"''\\\\'''',\\\\n\\\\t''\\\\''''password''\\\\'''' =>
      ''\\\\''''\"\"\" + drupalDBPasswd + \"\"\"''\\\\'''',\\\\n\\\\t''\\\\''''host''\\\\''''
      => ''\\\\''''localhost''\\\\'''',\\\\n\\\\t''\\\\''''driver''\\\\'''' => ''\\\\''''mysql''\\\\'''',\\\\n\\\\t''\\\\''''prefix''\\\\''''
      => ''\\\\''''''\\\\''''\\\\n);\"\"\"\n    if( version == \"Latest Drupal 7\"
      ):\n        os.system( \"sed -i ''s/$databases = array();/\" + drupalDBConfig
      + \"/'' \" + vhostRoot + \"/public_html/sites/default/settings.php\" )\n    generateVHOST(
      virtualHost, vhostRoot )\n    logging.debug( \"Completed: Installing Drupal.\"
      )\n\n\n####\n## Creates an Apache vhost file.\n#\n#   @servername - string -
      ServerName field for Apache.\n#   @vhostRoot - string - Main directory for site.
      Parent of its public_html directory.\n#   @restart - boolean - Restart Apache
      if needed. Defaults to True.\n##\ndef generateVHOST( serverName, vhostRoot,
      restart = True ):\n\n    logging.debug( \"Started: Generating VHOST file.\"
      )\n\n    if( distro[ ''name'' ].upper() == \"DEBIAN\" and distro[''version'']
      < 8 ):\n        apache24Line = \"\"\n    else:\n        apache24Line = \"\\n\\t\\tRequire
      all granted\"\n\n    # server admin address should change if a notify email
      is included in this StackScript\n    vhostFile = \"\"\"<VirtualHost *:80>\\n\\tServerAdmin
      root@localhost\\n\\tServerName \"\"\" + serverName + \"\"\"\\n\\n\\tDirectoryIndex
      index.html index.php\\n\\tDocumentRoot \"\"\" + vhostRoot + \"\"\"/public_html\\n\\n\\tLogLevel
      warn\\n\\tErrorLog \"\"\" + vhostRoot + \"\"\"/logs/error.log\\n\\tCustomLog
      \"\"\" + vhostRoot + \"\"\"/logs/access.log combined\\n\\n\\t<Directory \"/home/\"\"\"
      + linuxUser + \"\"\"/\"\"\" + serverName + \"\"\"/public_html\">\\n\\t\\tOptions
      +Indexes\\n\\t\\tAllowOverride All\\n\\t\\tOrder allow,deny\\n\\t\\tAllow from
      all\"\"\" + apache24Line + \"\"\"\\n\\t</Directory>\\n</VirtualHost>\"\"\"\n    logging.debug(
      \"Created variable with file contents.\" )\n\n    if( distro[ ''group'' ] ==
      1 ):\n\n        logging.debug( \"Creating the vhost file on a Debian/Ubuntu
      system.\" )\n        fo = open( \"/etc/apache2/sites-available/\" + serverName
      + \".conf\", \"w\" )\n        fo.write( vhostFile )\n        fo.close()\n        os.system(
      \"a2ensite \" + serverName + \".conf\" )\n        logging.debug( \"Enabled vhost
      on a Debian/Ubuntu system.\" )\n        if( distro[ ''name'' ].upper() == \"DEBIAN\"
      and distro[''version''] >= 8 ):\n            os.system( \"systemctl restart
      apache2.service\" ) if restart else None\n        else:\n            os.system(
      \"service apache2 restart\" ) if restart else None\n    elif( distro[ ''group''
      ] == 2 ):\n\n        logging.debug( \"Creating the vhost file on a CentOS/Fedora
      system.\" )\n        fo = open( \"/etc/httpd/conf.d/vhost.conf\", \"w\" )\n        fo.write(
      vhostFile )\n        fo.close()\n        logging.debug( \"Enabled vhost on a
      CentOS/Fedora system.\" )\n        os.system( \"systemctl restart httpd.service\"
      ) if restart else None\n    else:\n\n        logging.error( \"This distro is
      not supported.\" )\n\n    logging.debug( \"Completed: Generating VHOST file.\"
      )\n\n\n####\n## Returns the IPv4 attached to the interface.\n#\n#   @ifname
      - string - Interface name to use. i.e. eth0\n##\ndef getInterfaceAddress( ifname
      ):\n\n    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    return socket.inet_ntoa(
      fcntl.ioctl(\n        s.fileno(),\n        0x8915,  # SIOCGIFADDR\n        struct.pack(''256s'',
      ifname[:15])\n    )[20:24])\n\n\n####\n## Returns the reverse DNS value from
      the given IP address.\n#\n#   @IP - string - IP address to use. If not provided,
      assumes server''s own FQDN.\n##\ndef getReverseDNS( IP = None ):\n\n    logging.debug(
      \"Started: getReverseDNS.\" )\n\n    if( IP == None ):\n\n        logging.debug(
      \"getReverseDNS ran with an IP address\" )\n        #return socket.getfqdn()
      # Assuming this host\n        IP = getInterfaceAddress( \"eth0\" ) # get rDNS
      for eth0 IP\n\n    logging.debug( \"IP choosen was: \" + IP )\n    logging.debug(
      \"Completed: getReverseDNS.\" )\n    return socket.gethostbyaddr( IP )[ 0 ]\n\n\n####\n##
      Initializes the network. Mostly a cheap way to get default DHCP values from
      Linode to load.\n##\ndef initNetwork():\n\n    if( distro[ ''group'' ] == 1
      ):\n\n        logging.debug( \"Started: Initializing the network on a Debian/Ubuntu
      system.\" )\n        os.system( \"ifdown eth0 && ifup eth0\" ) # This pulls
      in the default Linode rDNS for us\n        logging.debug( \"Completed: Initializing
      the network on a Debian/Ubuntu system.\" )\n    elif( distro[ ''group'' ] ==
      2 ):\n\n        logging.debug( \"Started: Initializing the network on a CentOS/Fedora
      system.\" )\n        os.system( \"hostnamectl set-hostname \" + getReverseDNS()
      ) # This pulls in the default Linode rDNS for us\n        os.system( \"systemctl
      restart network.service\" )\n        logging.debug( \"Completed: Initializing
      the network on a CentOS/Fedora system.\" )\n    else:\n\n        logging.error(
      \"This distro is not supported.\" )\n\n\n####\n## Installs PHP (duh). We''ll
      just being using regular PHP, meaning via Apache.\n#\n#   @IP - string - IP
      address to use. If not provided, assumes server''s own FQDN.\n##\ndef phpInstall():\n\n    if(
      distro[ ''group'' ] == 1 ):\n\n        logging.debug( \"Started: Installing
      PHP on a Debian/Ubuntu system.\" )\n        os.system( \"apt-get -y install
      php5 php5-mysql php5-gd php5-mcrypt php5-cli\" )\n        time.sleep( 5 ) #
      There''s been hanging issues, sleeping seems to help\n        logging.debug(
      \"Completed: Installing PHP on a Debian/Ubuntu system.\" )\n    elif( distro[
      ''group'' ] == 2 ):\n\n        logging.debug( \"Started: Installing PHP on a
      CentOS/Fedora system.\" )\n        os.system( \"yum -y install php php-mysql
      php-gd php-mcrypt php-cli php-mbstring php-xml\" )\n        time.sleep( 5 )
      # There''s been hanging issues, sleeping seems to help\n        logging.debug(
      \"Completed: Installing PHP on a CentOS/Fedora system.\" )\n    else:\n\n        logging.error(
      \"This distro is not supported.\" )\n\n####\n## Installs Postfix, only listens
      on localhost. This is so this StackScript as well as Drupal can\n#   send emails
      as needed.\n#\n#   @restart - boolean - If True, postfix will be restart upon
      completion. Defaults to True.\n##\ndef postfixInstall( restart = True ):\n\n    if(
      distro[ ''group'' ] == 1 ):\n\n        logging.debug( \"Started: Installing
      postfix on a Debian/Ubuntu system\" )\n        os.system( \"echo \\\"postfix
      postfix/main_mailer_type select Internet Site\\\" | debconf-set-selections\"
      )\n        os.system( \"echo \\\"postfix postfix/mailname string localhost\\\"
      | debconf-set-selections\" )\n        os.system( \"echo \\\"postfix postfix/destinations
      string localhost.localdomain, localhost\\\" | debconf-set-selections\" )\n        os.system(
      \"apt-get -y install postfix\" )\n        time.sleep( 5 ) # There''s been hanging
      issues, sleeping seems to help\n        os.system( \"/usr/sbin/postconf -e \\\"inet_interfaces
      = loopback-only\\\"\" )\n        if( distro[ ''name'' ].upper() == \"DEBIAN\"
      and distro[''version''] >= 8 ):\n            os.system( \"postfix reload\" )\n        else:\n            os.system(
      \"service postfix restart\" ) if restart else None\n        time.sleep( 3 )
      # There''s been hanging issues, sleeping seems to help\n        logging.debug(
      \"Completed: Installing postfix on a Debian/Ubuntu system\" )\n    elif( distro[
      ''group'' ] == 2 ):\n\n        logging.debug( \"Started: Installing postfix
      on a CentOS/Fedora system\" )\n        os.system( \"yum -yq install postfix\"
      )\n        time.sleep( 3 ) # There''s been hanging issues, sleeping seems to
      help\n        os.system( \"/usr/sbin/postconf -e \\\"inet_interfaces = loopback-only\\\"\"
      )\n        os.system( \"systemctl restart postfix.service\" ) if restart else
      None\n        time.sleep( 3 ) # There''s been hanging issues, sleeping seems
      to help\n        logging.debug( \"Completed:Installing postfix on a CentOS/Fedora
      system\" )\n    else:\n\n        logging.error( \"This distro is not supported.\"
      )\n\n\n####\n## Updates the system''s repositories.\n##\ndef systemUpdate():\n\n    if(
      distro[ ''group'' ] == 1 ):\n\n        logging.debug( \"Started: Updating a
      Debian/Ubuntu system.\" )\n        os.system( \"apt-get update\" )\n        os.system(
      \"apt-get -y upgrade\" )\n        time.sleep( 5 ) # There''s been hanging issues,
      sleeping seems to help\n        logging.debug( \"Completed: Updating a Debian/Ubuntu
      system.\" )\n    elif( distro[ ''group'' ] == 2 ):\n\n        logging.debug(
      \"Started: Updating a CentOS/Fedora system.\" )\n        os.system( \"yum -yq
      upgrade\" )\n        time.sleep( 5 ) # There''s been hanging issues, sleeping
      seems to help\n        logging.debug( \"Completed: Updating a CentOS/Fedora
      system.\" )\n    else:\n\n        logging.error( \"This distro is not supported.\"
      )\n\n\n####################################################################################################\n####
      Main logic\n###\n######\n\n# Detect Distro\ndetectDistro( distro )\nlogging.info(
      \"Detected \" + distro[ ''name'' ] + \" \" + distro[ ''version'' ] + \".\" )\n\n#
      Initialize Network\n#initNetwork()\n#time.sleep( 9 ) # Let the network catch
      up\n#logging.info( \"Network initialized.\" )\n\n# Update packages\nsystemUpdate()\nlogging.info(
      \"Updated repositories.\" )\n\npostfixInstall()\nhostname = getReverseDNS()\n\n#
      Configure a regular user account\nif( distro[ ''group'' ] == 1 ):\n\n    os.system(
      \"useradd -m \" + linuxUser + \" -s /bin/bash\" )\n    logging.debug( \"Created
      new Linux user with a home directory.\" )\nelse:\n\n    os.system( \"useradd
      -m \" + linuxUser + \" -s /bin/bash\" )\n    logging.debug( \"Created new Linux
      user with a home directory.\" )\n\nos.system( \"echo ''\" + linuxUser + \":\"
      + linuxUserPasswd + \"'' | chpasswd\" )\nlogging.debug( \"Set the user''s password.\"
      )\nlogging.info( \"The user `\" + linuxUser + \"` has been created successfully.\"
      )\n\n# Install SSH key\nif( linuxUserPubkey != \"\" ):\n\n    os.system( \"mkdir
      /root/.ssh\" )\n    os.system( \"echo ''\" + linuxUserPubkey + \"'' > /root/.ssh/authorized_keys\"
      )\n    os.system( \"mkdir /home/\" + linuxUser + \"/.ssh\" )\n    os.system(
      \"echo ''\" + linuxUserPubkey + \"'' > /home/\" + linuxUser + \"/.ssh/authorized_keys\"
      )\n    logging.info( \"Added the SSH key to both root and \" + linuxUser )\n\n#
      Install Apache\napacheInstall( False )\nlogging.info( \"Installed Apache.\"
      )\n\n# Install a Relational Database Management System (RDBMS)\ndbmsInstall(
      dbRootPasswd )\nlogging.info( \"Installed a DBMS.\" )\n\n# Install PHP\nphpInstall()\nlogging.info(
      \"Installed PHP.\" )\n\n# Install Drupal\ndrupalInstall( drupalVersion, hostname,
      \"/home/\" + linuxUser )\nlogging.info( \"Installed Drupal.\" )\n\n# Restart
      everything\nif( distro[ ''group'' ] == 1 ):\n\n    if( distro[ ''name'' ].upper()
      == \"DEBIAN\" and distro[''version''] >= 8 ):\n        os.system( \"systemctl
      restart apache2.service\" )\n        os.system( \"systemctl restart mysql.service\"
      )\n    else:\n        os.system( \"service apache2 restart\" )\n        os.system(
      \"service mysql restart\" )\n\n    logging.debug( \"Restarting services from
      a Debian/Ubuntu system.\" )\nelif( distro[ ''group'' ] == 2 ):\n\n    os.system(
      \"systemctl restart httpd.service\" )\n    os.system( \"systemctl restart mariadb.service\"
      )\n    logging.debug( \"Restarting services from a CentOS/Fedora system.\" )\n\nelse:\n    logging.eror(
      \"This distro is not supported.\" )\n\n# Build email\nif( distro[ ''group''
      ] == 1 ):\n\n    os.system( \"apt-get -y install mailutils\" )\nelif( distro[
      ''group'' ] == 2 ):\n\n    os.system( \"yum -y install mailx\" )\nlogging.info(
      \"Installed a simple mail command.\" )\ncompletionEmail = \"\"\"Linode User,\n\nYour
      Drupal installation has completed. You can set up your site here:\n\n - http://\"\"\"
      + hostname + \"\"\"/install.php.\n\nEnjoy using Drupal!\n\n-The Linode Team\"\"\"\nos.system(
      \"echo \\\"\" + completionEmail + \"\\\" | mail -s \\\"Basic Drupal Install
      StackScript Completed\\\" \" + emailAddress )\n\n# Completion\nlogging.info(
      \"Restarted neccessary services.\" )\nlogging.info( \"Sent completion email
      to \" + emailAddress )\nlogging.info( \"The StackScript has been completed.\"
      )"}, {"is_public": true, "username": "nbebout", "id": 20, "deployments_total":
      0, "user_defined_fields": [], "updated": "2010-02-01T02:45:20", "label": "Fedora/CentOS
      Bash Library", "created": "2010-01-29T23:10:50", "images": ["linode/centos5.632bit",
      "linode/centos5.6", "linode/fedora1132bit"], "user_gravatar_id": "5dd8fb66331617dbbd6f90a10cdd47ac",
      "description": "", "rev_note": "", "deployments_active": 0, "script": "#!/bin/bash\n\n###########################################################\n#
      System\n###########################################################\n\nfunction
      system_update {\n  yum -y update\n}\n\nfunction system_primary_ip {\n  # returns
      the primary IP assigned to eth0\n  echo $(ifconfig eth0 | awk -F: ''/inet addr:/
      {print $2}'' | awk ''{ print $1 }'')\n}\n\nfunction get_rdns {\n  # calls host
      on an IP address and returns its reverse dns\n  if [ ! -e /usr/bin/host ]; then\n   yum
      -y install bind-utils > /dev/null\n  fi\n  echo $(host $1 | awk ''/pointer/
      {print $5}'' | sed ''s/\\.$//'')\n}\n\nfunction get_rdns_primary_ip {\n  # returns
      the reverse dns of the primary IP assigned to this system\n  echo $(get_rdns
      $(system_primary_ip))\n}\n\nfunction install_basics {\n  yum install -y jwhois
      rsync openssh-clients wget\n}"}, {"is_public": true, "username": "lindemo2",
      "id": 21, "deployments_total": 57, "user_defined_fields": [], "updated": "2010-02-01T02:55:40",
      "label": "Fedora/CentOS Basics", "created": "2010-01-29T23:16:40", "images":
      ["linode/centos5.632bit", "linode/centos5.6", "linode/fedora1132bit"], "user_gravatar_id":
      "094e4d8a80fcf9de99749177f789e23f", "description": "This StackScript will deploy
      a fully updated CentOS or Fedora server, which also has a few useful packages
      installed (wget, rsync, openssh-clients and jwhois)", "rev_note": "Initial import",
      "deployments_active": 15, "script": "#!/bin/bash\n\nsource <ssinclude StackScriptID=20>\n\nsystem_update\ninstall_basics"},
      {"is_public": true, "username": "rnolen", "id": 41, "deployments_total": 50,
      "user_defined_fields": [], "updated": "2012-06-15T02:55:42", "label": "LEMP_lib",
      "created": "2010-01-31T17:03:31", "images": ["linode/debian632bit", "linode/debian6"],
      "user_gravatar_id": "e0766abdfe8757cb2557e9f9d45718b0", "description": "Collection
      of functions for a LEMP stack.\r\n\r\nIn this script I aimed for readability
      so users may readily discern precisely what is happening to their server.",
      "rev_note": "keeping up with the times", "deployments_active": 1, "script":
      "#!/bin/bash\n\n#################################\n#  system update    #\n#################################\n\nfunction
      lemp_system_update_aptitude {\n\n#add dotdeb repo\n  echo -e \"\\ndeb http://packages.dotdeb.org
      squeeze all\\ndeb-src http://packages.dotdeb.org squeeze all\\ndeb http://packages.dotdeb.org
      squeeze-php54 all\\ndeb-src http://packages.dotdeb.org squeeze-php54 all\" >>
      /etc/apt/sources.list\n\n#add dotdeb key\n  wget http://www.dotdeb.org/dotdeb.gpg\n  apt-key
      add dotdeb.gpg\n\n#i prefer aptitude. you may not.\n  aptitude update\n  aptitude
      -y full-upgrade #only sissies use safe-upgrade. ARE YOU A SISSY?\n\n\n}\n\n\n#################################\n#  mysql
      install    #\n#################################\n\nfunction lemp_mysql_install
      {\n\n#not going to install mysql from dotdeb. if you want to, remove this entry
      from /etc/apt/preferences and aptitude update.\n  echo -e \"Package: libmysqlclient-dev
      libmysqlclient16 libmysqld-dev libmysqld-pic mysql-client-5.1 mysql-client mysql-common
      mysql-server-5.1 mysql-server-core-5.1 mysql-server \\nPin: release o=Debian
      \\nPin-Priority: 900\" >> /etc/apt/preferences\n\n  echo \"mysql-server-5.1
      mysql-server/root_password password $DB_PASSWORD\" | debconf-set-selections\n  echo
      \"mysql-server-5.1 mysql-server/root_password_again password $DB_PASSWORD\"
      | debconf-set-selections\n  aptitude -y install mysql-server\n\n}\n\n#################################\n#  PHP-FPM      #\n#################################\n\nfunction
      lemp_php-fpm {\n\n#installing only the basics.\n  aptitude install -y php5-fpm
      php5-mysql php5\n\n#php5-fpm conf\n\n#\n#nice strict permissions\n  sed -i ''s/;listen.owner
      = www-data/listen.owner = www-data/'' /etc/php5/fpm/pool.d/www.conf\n  sed -i
      ''s/;listen.group = www-data/listen.group = www-data/'' /etc/php5/fpm/pool.d/www.conf\n  sed
      -i ''s/;listen.mode = 0666/listen.mode = 0600/'' /etc/php5/fpm/pool.d/www.conf\n#\n#these
      settings are fairly conservative and can probably be increased without things
      melting\n  sed -i ''s/pm.max_children = 5/pm.max_children = 12/'' /etc/php5/fpm/pool.d/www.conf\n  sed
      -i ''s/pm.start_servers = 2/pm.start_servers = 4/'' /etc/php5/fpm/pool.d/www.conf\n  sed
      -i ''s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/'' /etc/php5/fpm/pool.d/www.conf\n  sed
      -i ''s/pm.max_spare_servers = 3/pm.max_spare_servers = 4/'' /etc/php5/fpm/pool.d/www.conf\n  sed
      -i ''s/;pm.max_requests = 500/pm.max_requests = 500/'' /etc/php5/fpm/pool.d/www.conf\n#\n\n  \n#Engage.\n  /etc/init.d/php5-fpm
      start\n\n}\n\n\n#################################\n#  nginx      #\n#################################\n\nfunction
      lemp_nginx {\n\n#install it.\n  aptitude install -y nginx-full\n\n#Make it so.\n  /etc/init.d/nginx
      start\n\n}"}, {"is_public": true, "username": "plumata", "id": 43, "deployments_total":
      6, "user_defined_fields": [], "updated": "2010-02-08T05:27:27", "label": "MXBackup",
      "created": "2010-02-04T01:30:32", "images": ["linode/ubuntu9.1032bit", "linode/ubuntu9.1064bit"],
      "user_gravatar_id": "0502fcdf4985e1afcdf0203a61ff93ae", "description": "StackScript
      for a MX Backup configuration.", "rev_note": "Update docs", "deployments_active":
      1, "script": "#!/bin/bash\n#\n# mxbackup\n#\n# Summary: Installs Postix on Debian
      platforms as an MX backup. Tested on Ubuntu 9.10 i686 (32bit).\n#\n# Copyright
      (c) 2010, Charles Hooper <chooper@plumata.com>\n# All rights reserved.\n#\n#
      Redistribution and use in source and binary forms, with or without modification,
      \n# are permitted provided that the following conditions are met:\n#\n# * Redistributions
      of source code must retain the above copyright notice, this\n# list of conditions
      and the following disclaimer.\n#\n# * Redistributions in binary form must reproduce
      the above copyright notice, this\n# list of conditions and the following disclaimer
      in the documentation and/or\n# other materials provided with the distribution.\n#\n#
      * Neither the name of Plumata LLC nor the names of its contributors may be\n#
      used to endorse or promote products derived from this software without specific
      prior\n# written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
      HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\n# EXPRESS OR IMPLIED WARRANTIES,
      I***REMOVED***LUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n# OF MERCHANTABILITY
      AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\n# SHALL THE
      COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n# I***REMOVED***IDENTAL,
      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (I***REMOVED***LUDING, BUT NOT LIMITED\n#
      TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
      OR\n# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
      WHETHER IN\n# CONTRACT, STRICT LIABILITY, OR TORT (I***REMOVED***LUDING NEGLIGE***REMOVED***E OR OTHERWISE)
      ARISING IN\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
      POSSIBILITY OF SUCH\n# DAMAGE.\n\n# <udf name=\"mailname\" label=\"Choose a
      mailname, often times this is the hostname\">\n# <udf name=\"postmaster\" label=\"Postmaster
      email address (not local.)\" example=\"your.email@gmail.com\">\n\n# Write out
      preseed file\ncat > /tmp/postfix-preseed.cfg << EOF\npostfix postfix/root_address    string\npostfix
      postfix/rfc1035_violation       boolean false\npostfix postfix/retry_upgrade_warning   boolean\npostfix
      postfix/kernel_version_warning  boolean\npostfix postfix/mydomain_warning        boolean\npostfix
      postfix/mynetworks      string  127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128\npostfix
      postfix/not_configured  error\npostfix postfix/mailbox_limit   string  0\npostfix
      postfix/relayhost       string\npostfix postfix/procmail        boolean\npostfix
      postfix/bad_recipient_delimiter error\npostfix postfix/protocols       select\npostfix
      postfix/mailname        string  /etc/mailname\npostfix postfix/tlsmgr_upgrade_warning  boolean\npostfix
      postfix/recipient_delim string  +\npostfix postfix/main_mailer_type        select  No
      configuration\npostfix postfix/destinations    string\npostfix postfix/chattr  boolean
      false\nEOF\n\n# New sources.list\ncat > /etc/apt/sources.list << EOF\n## main
      & restricted repositories\ndeb http://us.archive.ubuntu.com/ubuntu/ karmic main
      restricted\ndeb-src http://us.archive.ubuntu.com/ubuntu/ karmic main restricted\n\ndeb
      http://security.ubuntu.com/ubuntu karmic-security main restricted\ndeb-src http://security.ubuntu.com/ubuntu
      karmic-security main restricted\n\n## universe repositories\ndeb http://us.archive.ubuntu.com/ubuntu/
      karmic universe\ndeb-src http://us.archive.ubuntu.com/ubuntu/ karmic universe\ndeb
      http://us.archive.ubuntu.com/ubuntu/ karmic-updates universe\ndeb-src http://us.archive.ubuntu.com/ubuntu/
      karmic-updates universe\n\ndeb http://security.ubuntu.com/ubuntu karmic-security
      universe\ndeb-src http://security.ubuntu.com/ubuntu karmic-security universe\nEOF\n\n#
      Update\napt-get -y update && apt-get -y upgrade\n\n# Install debconf-utils so
      we can _use_ our preseed file\napt-get -y install debconf-utils\n\n# Load preseed
      file\ndebconf-set-selections /tmp/postfix-preseed.cfg\n\n# Install postfix et.
      al\napt-get -y install postfix postfix-doc pflogsumm\n\n# Open up submission
      port\nsed -i -e \"s/#submission/submission/\" /etc/postfix/master.cf\n\n# Create/write
      out config files\ncat > /etc/postfix/main.cf << EOF\n# See /usr/share/postfix/main.cf.dist
      for a commented, more complete version\n\n# Debian specific:  Specifying a file
      name will cause the first\n# line of that file to be used as the name.  The
      Debian default\n# is /etc/mailname.\nmyorigin = /etc/mailname\n\nsmtpd_banner
      = \\$myhostname ESMTP \\$mail_name (Ubuntu)\nbiff = no\n\n# appending .domain
      is the MUA''s job.\nappend_dot_mydomain = no\n\n# Uncomment the next line to
      generate \"delayed mail\" warnings\n#delay_warning_time = 4h\n\nreadme_directory
      = no\n\n####\n# Disable local delivery\nmydestination =\nlocal_recipient_maps
      =\nlocal_transport = error:local mail delivery is disabled\nvirtual_alias_maps
      = hash:/etc/postfix/virtual\n\nmynetworks = 127.0.0.0/8\n\nparent_domain_matches_subdomains
      =\n    debug_peer_list,\n    smtpd_access_maps\n\nsmtpd_recipient_restrictions
      =\n    permit_mynetworks,\n    reject_unauth_destination\n\n# Relay and specify
      smarthost\ntransport_maps = hash:/etc/postfix/transport\nrelay_domains = hash:/etc/postfix/transport\n\nshow_user_unknown_table_name
      = no\n\n# Misc config\nmessage_size_limit = 30720000\nEOF\n\ncat > /etc/postfix/virtual
      << EOF\npostmaster      ${POSTMASTER}\nabuse           ${POSTMASTER}\nroot            ${POSTMASTER}\nsecurity        ${POSTMASTER}\nadmin           ${POSTMASTER}\nsupport         ${POSTMASTER}\nEOF\n\n#
      transport will have to be filled in after install\necho -n \"\" > /etc/postfix/transport\n\necho
      -n \"${MAILNAME}\" > /etc/mailname\n\n# Write reload script\ncat > /etc/postfix/reload
      << EOF\n#!/bin/bash\n# Build hashes and reload postfix\npostmap /etc/postfix/virtual\npostmap
      /etc/postfix/transport\npostfix reload\nEOF\nchmod +x /etc/postfix/reload\n\n/etc/postfix/reload"},
      {"is_public": true, "username": "plumata", "id": 44, "deployments_total": 15,
      "user_defined_fields": [], "updated": "2010-02-04T02:53:33", "label": "Enable
      Universe - Ubuntu 9.10 Karmic", "created": "2010-02-04T02:53:22", "images":
      ["linode/ubuntu9.1032bit"], "user_gravatar_id": "0502fcdf4985e1afcdf0203a61ff93ae",
      "description": "Enable the universe and restricted repos in Ubuntu 9.10 (Karmic).
      The script performs an apt-get update but does NOT perform any upgrades", "rev_note":
      "Initial import", "deployments_active": 4, "script": "#!/bin/bash\n\n# New sources.list\ncat
      > /etc/apt/sources.list << EOF\n## main & restricted repositories\ndeb http://us.archive.ubuntu.com/ubuntu/
      karmic main restricted\ndeb-src http://us.archive.ubuntu.com/ubuntu/ karmic
      main restricted\n\ndeb http://security.ubuntu.com/ubuntu karmic-security main
      restricted\ndeb-src http://security.ubuntu.com/ubuntu karmic-security main restricted\n\n##
      universe repositories\ndeb http://us.archive.ubuntu.com/ubuntu/ karmic universe\ndeb-src
      http://us.archive.ubuntu.com/ubuntu/ karmic universe\ndeb http://us.archive.ubuntu.com/ubuntu/
      karmic-updates universe\ndeb-src http://us.archive.ubuntu.com/ubuntu/ karmic-updates
      universe\n\ndeb http://security.ubuntu.com/ubuntu karmic-security universe\ndeb-src
      http://security.ubuntu.com/ubuntu karmic-security universe\nEOF\n\n# Update\napt-get
      -y update"}, {"is_public": true, "username": "nbebout", "id": 52, "deployments_total":
      10, "user_defined_fields": [], "updated": "2010-02-06T03:39:12", "label": "Fedora/CentOS
      Basics", "created": "2010-02-06T03:39:05", "images": ["linode/centos5.632bit",
      "linode/centos5.6", "linode/fedora1132bit"], "user_gravatar_id": "5dd8fb66331617dbbd6f90a10cdd47ac",
      "description": "This StackScript will deploy a fully updated CentOS or Fedora
      server, which also has a few useful packages installed (wget, rsync, openssh-clients
      and jwhois)", "rev_note": "Initial import", "deployments_active": 3, "script":
      "#!/bin/bash\n\nsource <ssinclude StackScriptID=20>\n\nsystem_update\ninstall_basics"},
      {"is_public": true, "username": "plumata", "id": 53, "deployments_total": 2,
      "user_defined_fields": [], "updated": "2010-02-08T02:29:21", "label": "MongoDB
      Install", "created": "2010-02-08T02:25:35", "images": ["linode/ubuntu9.1032bit",
      "linode/ubuntu9.1064bit"], "user_gravatar_id": "0502fcdf4985e1afcdf0203a61ff93ae",
      "description": "Installs MongoDB on Debian platforms. Tested on Ubuntu 9.10
      x86_64. I basically copy and pasted everything from this page: http://library.linode.com/databases/mongodb/\r\n\r\nReport
      any errors/bugs to Charles Hooper <chooper@plumata.com>", "rev_note": "Update
      docs", "deployments_active": 1, "script": "#!/bin/sh\n#\n# install_mongo.sh\n#\n#
      Summary: Installs MongoDB on Debian platforms. Tested on Ubuntu 9.10 x86_64.\n#\n#
      I basically copied and pasted everything from this page:\n# http://library.linode.com/databases/mongodb/\n#\n#
      Copyright (c) 2010, Charles Hooper <chooper@plumata.com>\n# All rights reserved.\n#\n#
      Redistribution and use in source and binary forms, with or without modification,
      \n# are permitted provided that the following conditions are met:\n#\n# * Redistributions
      of source code must retain the above copyright notice, this\n# list of conditions
      and the following disclaimer.\n#\n# * Redistributions in binary form must reproduce
      the above copyright notice, this\n# list of conditions and the following disclaimer
      in the documentation and/or\n# other materials provided with the distribution.\n#\n#
      * Neither the name of Plumata LLC nor the names of its contributors may be\n#
      used to endorse or promote products derived from this software without specific
      prior\n# written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
      HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\n# EXPRESS OR IMPLIED WARRANTIES,
      I***REMOVED***LUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n# OF MERCHANTABILITY
      AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\n# SHALL THE
      COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n# I***REMOVED***IDENTAL,
      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (I***REMOVED***LUDING, BUT NOT LIMITED\n#
      TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
      OR\n# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
      WHETHER IN\n# CONTRACT, STRICT LIABILITY, OR TORT (I***REMOVED***LUDING NEGLIGE***REMOVED***E OR OTHERWISE)
      ARISING IN\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
      POSSIBILITY OF SUCH\n# DAMAGE.\n\n\nBASEURL=\"http://downloads.mongodb.org/linux/\"\nFILENAME=\"mongodb-linux-`uname
      -m`-1.2.2.tgz\"\nDIRNAME=`echo \"${FILENAME}\" | sed -e ''s/.tgz//''`\n\ncd
      /tmp\n\n# Make all needed directories and create files\nmkdir -p /opt/bin /opt/config
      /srv/db/mongodb\ntouch /srv/db/mongodb.log\n\n# Download and extract MongoDB\nwget
      \"${BASEURL}${FILENAME}\" && tar xzvf \"${FILENAME}\"\nmv \"${DIRNAME}\" /opt/\nln
      -s /opt/${DIRNAME} /opt/mongodb\n\n# Install various scripts and config files\ncat
      > /opt/bin/mongodb-stop << EOF\n#!/bin/bash\n\npid=\\`ps -o pid,command ax |
      grep mongod | awk ''!/awk/ && !/grep/ {print \\$1}''\\`;\nif [ \"\\${pid}\"
      != \"\" ]; then\n    kill -2 \\${pid};\nfi\nEOF\n\ncat > /opt/bin/mongodb-start
      << EOF\n#!/bin/sh\n\n/opt/mongodb/bin/mongod --config /opt/config/mongodb \\\n##
      --upgrade \\ ##runs a database upgrade option if needed\nEOF\n\ncat > /opt/config/mongodb
      << EOF\n# Configuration Options for MongoDB\n#\n# For More Information, Consider:\n#
      - Configuration Parameters: http://www.mongodb.org/display/DOCS/Command+Line+Parameters\n#
      - File Based Configuration: http://www.mongodb.org/display/DOCS/File+Based+Configuration\n\ndbpath
      = /srv/db/mongodb\nlogpath = /srv/db/mongodb.log\nlogappend = true\n\nbind_ip
      = 127.0.0.1\nport = 27017\nfork = true\n\nauth = true\n# noauth = true\nEOF\n\ncat
      > /etc/init.d/mongodb << EOF\n#! /bin/sh\n\n### BEGIN INIT INFO\n# Provides:          mongodb\n#
      Required-Start:    \\$all\n# Required-Stop:     \\$all\n# Default-Start:     2
      3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: starts mongodb database
      system\n# Description:       starts mongodb using basic start scripts\n### END
      INIT INFO\n\nPATH=/opt/mongodb/bin:/sbin:/bin:/usr/sbin:/usr/bin\nNAME=mongodb\n\ntest
      -x \\$DAEMON || exit 0\n\nset -e\n\ncase \"\\$1\" in\n  start)\n        echo
      -n \"Starting \\$DESC: \"\n\n        start-stop-daemon --start --user mongodb
      -c mongodb:mongodb \\\n            --startas /opt/bin/mongodb-start\n\n        echo
      \"\\$NAME.\"\n        ;;\n  stop)\n        echo -n \"Stopping \\$DESC: \"\n\n        start-stop-daemon
      --stop --exec /opt/mongodb/bin/mongod -c mongodb:mongodb \\\n            /opt/bin/mongodb-stop\n\n        echo
      \"\\$NAME.\"\n        ;;\n      *)\n            N=/etc/init.d/\\$NAME\n            echo
      \"Usage: \\$N {start|stop}\" >&2\n            exit 1\n            ;;\n    esac\n\n    exit
      0\nEOF\n\n# Set perms on scripts\nchmod +x /opt/bin/mongodb-start\nchmod +x
      /opt/bin/mongodb-stop\nchmod +x /etc/init.d/mongodb\n\n# Start MongoDB at boot\n/usr/sbin/update-rc.d
      -f mongodb defaults\n\n# Create MongoDB user and finish setting perms\nadduser
      --system --no-create-home --disabled-login --disabled-password --group mongodb
      || true\nchown mongodb:mongodb -R /srv/db/\n\n# Start MongoDB\n/etc/init.d/mongodb
      start ; sleep 1 ; tail /srv/db/mongodb.log"}, {"is_public": true, "username":
      "nigma", "id": 122, "deployments_total": 3, "user_defined_fields": [], "updated":
      "2012-05-21T11:29:36", "label": "lib-apache", "created": "2010-02-18T12:38:55",
      "images": ["linode/ubuntu12.04lts32bit", "linode/ubuntu12.04lts"], "user_gravatar_id":
      "98262df6476a32977cb432a748052a59", "description": "Functions for installing
      Apache in worker mode for Python/mod-wsgi apps.\r\n\r\napache_worker_install\r\napache_mod_wsgi_install\r\napache_cleanup\r\n\r\nhttps://github.com/nigma/StackScripts\r\n",
      "rev_note": "Updated for Ubuntu 12.04", "deployments_active": 0, "script": "#!/bin/bash\n#\n#
      Install and configure apache and mod_wsgi\n#\n# Copyright (c) 2010 Filip Wasilewski
      <en@ig.ma>.\n#\n# My ref: http://www.linode.com/?r=aadfce9845055011e00f0c6c9a5c01158c452deb\n\nfunction
      apache_worker_install {\n    aptitude -y install apache2-mpm-worker apache2-dev\n}\n\nfunction
      apache_mod_wsgi_install {\n    aptitude -y install libapache2-mod-wsgi\n}\n\nfunction
      apache_cleanup {\n    a2dissite default # disable default vhost\n}"}, {"is_public":
      true, "username": "nigma", "id": 123, "deployments_total": 5, "user_defined_fields":
      [], "updated": "2012-05-21T16:39:35", "label": "lib-system-ubuntu", "created":
      "2010-02-18T12:49:32", "images": ["linode/ubuntu12.04lts32bit", "linode/ubuntu12.04lts"],
      "user_gravatar_id": "98262df6476a32977cb432a748052a59", "description": "Functions
      for creating users, editing system settings and installing utilities.\r\n\r\nsystem_add_user\r\nsystem_add_system_user\r\nsystem_lock_user\r\nsystem_get_user_home\r\nsystem_user_add_ssh_key\r\nsystem_update_hostname\r\nsystem_security_logcheck\r\nsystem_security_fail2ban\r\nsystem_security_ufw_configure_basic\r\nsystem_configure_private_network
      \r\nrestart_services\r\nrestart_initd_services\r\n\r\nhttps://github.com/nigma/StackScripts\r\n",
      "rev_note": "Updated for Ubuntu 12.04", "deployments_active": 1, "script": "#!/bin/bash\n#\n#
      System related utilities\n#\n# Copyright (c) 2010 Filip Wasilewski <en@ig.ma>.\n#\n#
      My ref: http://www.linode.com/?r=aadfce9845055011e00f0c6c9a5c01158c452deb\n\nfunction
      lower {\n    # helper function\n    echo $1 | tr ''[:upper:]'' ''[:lower:]''\n}\n\nfunction
      system_add_user {\n    # system_add_user(username, password, groups, shell=/bin/bash)\n    USERNAME=`lower
      $1`\n    PASSWORD=$2\n    SUDO_GROUP=$3\n    SHELL=$4\n    if [ -z \"$4\" ];
      then\n        SHELL=\"/bin/bash\"\n    fi\n    useradd --create-home --shell
      \"$SHELL\" --user-group --groups \"$SUDO_GROUP\" \"$USERNAME\"\n    echo \"$USERNAME:$PASSWORD\"
      | chpasswd\n}\n\nfunction system_add_system_user {\n    # system_add_system_user(username,
      home, shell=/bin/bash)\n    USERNAME=`lower $1`\n    HOME_DIR=$2\n    SHELL=$3\n    if
      [ -z \"$3\" ]; then\n        SHELL=\"/bin/bash\"\n    fi\n    useradd --system
      --create-home --home-dir \"$HOME_DIR\" --shell \"$SHELL\" --user-group $USERNAME\n}\n\nfunction
      system_lock_user {\n    # system_lock_user(username)\n    passwd -l \"$1\"\n}\n\nfunction
      system_get_user_home {\n    # system_get_user_home(username)\n    cat /etc/passwd
      | grep \"^$1:\" | cut --delimiter=\":\" -f6\n}\n\nfunction system_user_add_ssh_key
      {\n    # system_user_add_ssh_key(username, ssh_key)\n    USERNAME=`lower $1`\n    USER_HOME=`system_get_user_home
      \"$USERNAME\"`\n    sudo -u \"$USERNAME\" mkdir \"$USER_HOME/.ssh\"\n    sudo
      -u \"$USERNAME\" touch \"$USER_HOME/.ssh/authorized_keys\"\n    sudo -u \"$USERNAME\"
      echo \"$2\" >> \"$USER_HOME/.ssh/authorized_keys\"\n    chmod 0600 \"$USER_HOME/.ssh/authorized_keys\"\n}\n\nfunction
      system_sshd_edit_bool {\n    # system_sshd_edit_bool (param_name, \"Yes\"|\"No\")\n    VALUE=`lower
      $2`\n    if [ \"$VALUE\" == \"yes\" ] || [ \"$VALUE\" == \"no\" ]; then\n        sed
      -i \"s/^#*\\($1\\).*/\\1 $VALUE/\" /etc/ssh/sshd_config\n    fi\n}\n\nfunction
      system_sshd_permitrootlogin {\n    system_sshd_edit_bool \"PermitRootLogin\"
      \"$1\"\n}\n\nfunction system_sshd_passwordauthentication {\n    system_sshd_edit_bool
      \"PasswordAuthentication\" \"$1\"\n}\n\nfunction system_update_hostname {\n    #
      system_update_hostname(system hostname)\n    if [ -z \"$1\" ]; then\n        echo
      \"system_update_hostname() requires the system hostname as its first argument\"\n        return
      1;\n    fi\n    echo $1 > /etc/hostname\n    hostname -F /etc/hostname\n    echo
      -e \"\\n127.0.0.1 $1 $1.local\\n\" >> /etc/hosts\n}\n\nfunction system_security_logcheck
      {\n    aptitude -y install logcheck logcheck-database\n    # configure email\n    #
      start after setup\n}\n\nfunction system_security_fail2ban {\n    aptitude -y
      install fail2ban\n}\n\nfunction system_security_ufw_configure_basic {\n    #
      see https://help.ubuntu.com/community/UFW\n    ufw logging on\n\n    ufw default
      deny\n\n    ufw allow ssh/tcp\n    ufw limit ssh/tcp\n\n    ufw allow http/tcp\n    ufw
      allow https/tcp\n\n    ufw enable\n}\n\nfunction system_configure_private_network
      {\n    # system_configure_private_network(private_ip)\n    PRIVATE_IP=$1\n    NETMASK=\"255.255.128.0\"\n    cat
      >>/etc/network/interfaces <<EOF\nauto eth0:0\niface eth0:0 inet static\n address
      $PRIVATE_IP\n netmask $NETMASK\nEOF\n    touch /tmp/restart_initd-networking\n}\n\nfunction
      restart_services {\n    # restarts upstart services that have a file in /tmp/needs-restart/\n    for
      service_name in $(ls /tmp/ | grep restart-* | cut -d- -f2-10); do\n        service
      $service_name restart\n        rm -f /tmp/restart-$service_name\n    done\n}\n\nfunction
      restart_initd_services {\n    # restarts upstart services that have a file in
      /tmp/needs-restart/\n    for service_name in $(ls /tmp/ | grep restart_initd-*
      | cut -d- -f2-10); do\n        /etc/init.d/$service_name restart\n        rm
      -f /tmp/restart_initd-$service_name\n    done\n}\n\n# Maintain for compatibility
      with scripts using this library for Ubuntu 10.04\n\nfunction system_get_codename
      {\n    echo `lsb_release -sc`\n}\n\nfunction system_get_release {\n    echo
      `lsb_release -sr`\n}\n\nfunction system_sshd_pubkeyauthentication {\n    system_sshd_edit_bool
      \"PubkeyAuthentication\" \"$1\"\n}\n\nfunction system_update_locale_en_US_UTF_8
      {\n    # locale-gen en_US.UTF-8\n    dpkg-reconfigure locales\n    update-locale
      LANG=en_US.UTF-8\n}\n\nfunction system_enable_universe {\n    sed -i ''s/^#\\(.*deb.*\\)
      universe/\\1 universe/'' /etc/apt/sources.list\n    aptitude update\n}\n\nfunction
      system_security_ufw_install {\n    aptitude -y install ufw\n}"}, {"is_public":
      true, "username": "nigma", "id": 124, "deployments_total": 0, "user_defined_fields":
      [], "updated": "2012-05-21T11:32:03", "label": "lib-system", "created": "2010-02-18T12:51:24",
      "images": ["linode/ubuntu12.04lts32bit", "linode/ubuntu12.04lts"], "user_gravatar_id":
      "98262df6476a32977cb432a748052a59", "description": "Functions for installing
      common utilities and versioning changes to /etc config files.\r\n\r\nsystem_install_utils\r\nsystem_install_build\r\nsystem_install_subversion\r\nsystem_install_git\r\nsystem_install_mercurial\r\nsystem_start_etc_dir_versioning\r\nsystem_record_etc_dir_changes\r\n\r\nhttps://github.com/nigma/StackScripts\r\n",
      "rev_note": "Updated for Ubuntu 12.04", "deployments_active": 0, "script": "#!/bin/bash\n#\n#
      Install common utilities\n#\n# Copyright (c) 2010 Filip Wasilewski <en@ig.ma>.\n#\n#
      My ref: http://www.linode.com/?r=aadfce9845055011e00f0c6c9a5c01158c452deb\n\nfunction
      system_install_utils {\n    aptitude -y install htop iotop bsd-mailx python-software-properties
      zsh\n}\n\nfunction system_install_build {\n    aptitude -y install build-essential
      gcc\n}\n\nfunction system_install_subversion {\n    aptitude -y install subversion\n}\n\nfunction
      system_install_git {\n    aptitude -y install git-core\n}\n\nfunction system_install_mercurial
      {\n    aptitude -y install mercurial\n}\n\nfunction system_start_etc_dir_versioning
      {\n    hg init /etc\n    hg add /etc\n    hg commit -u root -m \"Started versioning
      of /etc directory\" /etc\n    chmod -R go-rwx /etc/.hg\n}\n\nfunction system_record_etc_dir_changes
      {\n    if [ ! -n \"$1\" ];\n        then MESSAGE=\"Committed /etc changes\"\n        else
      MESSAGE=\"$1\"\n    fi\n    hg addremove /etc\n    hg commit -u root -m \"$MESSAGE\"
      /etc || echo > /dev/null # catch \"nothing changed\" return code\n}"}, {"is_public":
      true, "username": "nigma", "id": 125, "deployments_total": 3, "user_defined_fields":
      [], "updated": "2012-05-21T11:34:13", "label": "lib-postgresql", "created":
      "2010-02-18T12:55:29", "images": ["linode/ubuntu12.04lts32bit", "linode/ubuntu12.04lts"],
      "user_gravatar_id": "98262df6476a32977cb432a748052a59", "description": "Functions
      for installing and configuring PostgreSQL\r\n\r\npostgresql_install\r\npostgresql_create_user\r\npostgresql_create_database\r\n\r\nhttps://github.com/nigma/StackScripts",
      "rev_note": "Updated for Ubuntu 12.04", "deployments_active": 1, "script": "#!/bin/bash\n#\n#
      Install PostgreSQL\n#\n# Copyright (c) 2010 Filip Wasilewski <en@ig.ma>.\n#\n#
      My ref: http://www.linode.com/?r=aadfce9845055011e00f0c6c9a5c01158c452deb\n\nfunction
      postgresql_install {\n    aptitude -y install postgresql postgresql-contrib
      postgresql-dev libpq-dev\n}\n\nfunction postgresql_create_user {\n    # postgresql_create_user(username,
      password)\n    if [ -z \"$1\" ]; then\n        echo \"postgresql_create_user()
      requires username as the first argument\"\n        return 1;\n    fi\n    if
      [ -z \"$2\" ]; then\n        echo \"postgresql_create_user() requires a password
      as the second argument\"\n        return 1;\n    fi\n\n    echo \"CREATE ROLE
      $1 WITH LOGIN E***REMOVED***RYPTED PASSWORD ''$2'';\" | sudo -i -u postgres psql\n}\n\nfunction
      postgresql_create_database {\n    # postgresql_create_database(dbname, owner)\n    if
      [ -z \"$1\" ]; then\n        echo \"postgresql_create_database() requires database
      name as the first argument\"\n        return 1;\n    fi\n    if [ -z \"$2\"
      ]; then\n        echo \"postgresql_create_database() requires an owner username
      as the second argument\"\n        return 1;\n    fi\n\n    sudo -i -u postgres
      createdb --owner=$2 $1\n}"}, {"is_public": true, "username": "nigma", "id":
      126, "deployments_total": 2, "user_defined_fields": [], "updated": "2012-05-21T11:36:42",
      "label": "lib-python", "created": "2010-02-18T13:00:48", "images": ["linode/ubuntu12.04lts32bit",
      "linode/ubuntu12.04lts"], "user_gravatar_id": "98262df6476a32977cb432a748052a59",
      "description": "Functions for installing python and basic packages.\r\n\r\nhttps://github.com/nigma/StackScripts\r\n",
      "rev_note": "Updated for Ubuntu 12.04", "deployments_active": 1, "script": "#!/bin/bash\n#\n#
      Install python and base packages\n#\n# Copyright (c) 2010 Filip Wasilewski <en@ig.ma>.\n#\n#
      My ref: http://www.linode.com/?r=aadfce9845055011e00f0c6c9a5c01158c452deb\n\nfunction
      python_install {\n    aptitude -y install python python-dev python-setuptools\n    easy_install
      pip\n    pip install virtualenv virtualenvwrapper\n}"}, {"is_public": true,
      "username": "nigma", "id": 127, "deployments_total": 11, "user_defined_fields":
      [], "updated": "2012-05-21T11:40:18", "label": "lib-django", "created": "2010-02-18T13:01:29",
      "images": ["linode/ubuntu12.04lts32bit", "linode/ubuntu12.04lts"], "user_gravatar_id":
      "98262df6476a32977cb432a748052a59", "description": "Functions for creating and
      configuring base Django for serving under Apache and mod-wsgi.\r\n\r\ndjango_create_project(project_path)\r\ndjango_change_project_owner(project_path,
      user)\r\ndjango_install_db_driver(project_path, driver_package)\r\ndjango_configure_db_settings(project_path,
      engine, name, user, password, host, port)\r\ndjango_configure_apache_virtualhost(hostname,
      project_path, wsgi_user)\r\n\r\nhttps://github.com/nigma/StackScripts\r\n",
      "rev_note": "Updated for Ubuntu 12.04 and Django 1.4", "deployments_active":
      3, "script": "#!/bin/bash\n#\n# Setup django project and add apache vhost configuration\n#\n#
      Copyright (c) 2010 Filip Wasilewski <en@ig.ma>.\n#\n# My ref: http://www.linode.com/?r=aadfce9845055011e00f0c6c9a5c01158c452deb\n\nPROJECT_CODE_DIR=app\nDJANGO_PROJECT=webapp\n\nfunction
      django_change_project_owner {\n    # django_change_project_owner(project_path,
      user)\n    PROJECT_PATH=\"$1\"\n    USER=\"$2\"\n    chown -R \"$USER:$USER\"
      \"$PROJECT_PATH\"\n}\n\nfunction django_create_project {\n    # django_create_project(project_path)\n\n    PROJECT_PATH=\"$1\"\n    if
      [ -z \"$PROJECT_PATH\" ]; then\n        echo \"django_create_project() requires
      the project root path as the first argument\"\n        return 1;\n    fi\n\n    mkdir
      -p \"$PROJECT_PATH/$PROJECT_CODE_DIR/conf/apache\"\n    mkdir -p \"$PROJECT_PATH/logs\"
      \"$PROJECT_PATH/run/eggs\"\n\n    virtualenv \"$PROJECT_PATH/venv\"\n    $PROJECT_PATH/venv/bin/pip
      install Django\n\n    pushd \"$PROJECT_PATH/$PROJECT_CODE_DIR\"\n    \"$PROJECT_PATH/venv/bin/python\"
      \"$PROJECT_PATH/venv/bin/django-admin.py\" startproject \"$DJANGO_PROJECT\"
      .\n    popd\n    mkdir -p \"$PROJECT_PATH/$PROJECT_CODE_DIR/$DJANGO_PROJECT/static\"\n\n    echo
      \"Django\" >> \"$PROJECT_PATH/$PROJECT_CODE_DIR/requirements.txt\"\n}\n\nfunction
      django_install_db_driver {\n    # django_install_db_driver(project_path, driver_package)\n    $1/venv/bin/pip
      install \"$2\"\n    echo \"$2\" >> \"$PROJECT_PATH/$PROJECT_CODE_DIR/requirements.txt\"\n}\n\nfunction
      django_configure_db_settings {\n    # django_configure_db_settings(project_path,
      engine, name, user, password, host, port)\n    PROJECT_PATH=\"$1\"\n    SETTINGS=\"$PROJECT_PATH/$PROJECT_CODE_DIR/$DJANGO_PROJECT/settings.py\"\n    sed
      -i -e \"s/''ENGINE'': ''django.db.backends.''/''ENGINE'': ''django.db.backends.$2''/\"
      \"$SETTINGS\"\n    sed -i -e \"s/''NAME'': ''''/''NAME'': ''$3''/\" \"$SETTINGS\"\n    sed
      -i -e \"s/''USER'': ''''/''USER'': ''$4''/\" \"$SETTINGS\"\n    sed -i -e \"s/''PASSWORD'':
      ''''/''PASSWORD'': ''$5''/\" \"$SETTINGS\"\n    if [ -n \"$6\" ]; then\n        sed
      -i -e \"s/''HOST'': ''''/''HOST'': ''$6''/\" \"$SETTINGS\"\n    fi\n    if [
      -n \"$7\" ]; then\n        sed -i -e \"s/''PORT'': ''''/''PORT'': ''$7''/\"
      \"$SETTINGS\"\n    fi\n}\n\nfunction django_configure_apache_virtualhost {\n    #
      django_configure_apache_virtualhost(hostname, project_path, wsgi_user)\n\n    VHOST_HOSTNAME=\"$1\"\n    PROJECT_PATH=\"$2\"\n    USER=\"$3\"\n    GROUP=\"$USER\"\n\n    if
      [ -z \"$VHOST_HOSTNAME\" ]; then\n        echo \"django_configure_apache_virtualhost()
      requires the hostname as the first argument\"\n        return 1;\n    fi\n\n    if
      [ -z \"$PROJECT_PATH\" ]; then\n        echo \"django_configure_apache_virtualhost()
      requires path to the django project as the second argument\"\n        return
      1;\n    fi\n\n    APACHE_CONF=\"200-$VHOST_HOSTNAME\"\n    APACHE_CONF_PATH=\"$PROJECT_PATH/$PROJECT_CODE_DIR/conf/apache/$APACHE_CONF\"\n\n    cat
      > \"$APACHE_CONF_PATH\" << EOF\n<VirtualHost *:80>\n    ServerAdmin root@$VHOST_HOSTNAME\n    ServerName
      $VHOST_HOSTNAME\n    ServerSignature Off\n\n    Alias /static/ $PROJECT_PATH/$PROJECT_CODE_DIR/$DJANGO_PROJECT/static/\n    Alias
      /robots.txt $PROJECT_PATH/$PROJECT_CODE_DIR/$DJANGO_PROJECT/static/robots.txt\n    Alias
      /favicon.ico $PROJECT_PATH/$PROJECT_CODE_DIR/$DJANGO_PROJECT/static/favicon.ico\n\n    SetEnvIf
      User_Agent \"monit/*\" dontlog\n    CustomLog \"|/usr/sbin/rotatelogs $PROJECT_PATH/logs/access.log.%Y%m%d-%H%M
      5M\" combined env=!dontlog\n    ErrorLog \"|/usr/sbin/rotatelogs $PROJECT_PATH/logs/error.log.%Y%m%d-%H%M
      5M\"\n    LogLevel warn\n\n    WSGIScriptAlias / $PROJECT_PATH/$PROJECT_CODE_DIR/$DJANGO_PROJECT/wsgi.py\n\n    WSGIDaemonProcess
      $VHOST_HOSTNAME user=$USER group=$GROUP processes=2 threads=10 maximum-requests=10000
      display-name=%{GROUP} python-path=$PROJECT_PATH/$PROJECT_CODE_DIR:$PROJECT_PATH/venv/lib/python2.7/site-packages
      python-eggs=$PROJECT_PATH/run/eggs\n    WSGIProcessGroup $VHOST_HOSTNAME\n    WSGIScriptAlias
      / $PROJECT_PATH/$PROJECT_CODE_DIR/$DJANGO_PROJECT/wsgi.py\n\n    <Directory
      $PROJECT_PATH/$PROJECT_CODE_DIR/$DJANGO_PROJECT/static>\n        Order deny,allow\n        Allow
      from all\n        Options -Indexes FollowSymLinks\n    </Directory>\n\n    <Directory
      $PROJECT_PATH/$PROJECT_CODE_DIR/conf/apache>\n        Order deny,allow\n        Allow
      from all\n    </Directory>\n\n </VirtualHost>\nEOF\n\n    ln -s -t /etc/apache2/sites-available/
      \"$APACHE_CONF_PATH\"\n    a2ensite \"$APACHE_CONF\"\n}"}, {"is_public": true,
      "username": "nigma", "id": 128, "deployments_total": 1, "user_defined_fields":
      [], "updated": "2012-05-21T11:41:39", "label": "lib-mongodb", "created": "2010-02-18T13:14:36",
      "images": ["linode/ubuntu12.04lts32bit", "linode/ubuntu12.04lts"], "user_gravatar_id":
      "98262df6476a32977cb432a748052a59", "description": "Functions for installing
      mongodb", "rev_note": "Updated for Ubuntu 12.04", "deployments_active": 0, "script":
      "#!/bin/bash\n#\n# Installs MongoDB.\n#\n# Copyright (c) 2010 Filip Wasilewski
      <en@ig.ma>.\n#\n# My ref: http://www.linode.com/?r=aadfce9845055011e00f0c6c9a5c01158c452deb\n\n\nfunction
      mongodb_install {\n    aptitude -y install mongodb\n}"}, {"is_public": true,
      "username": "nigma", "id": 130, "deployments_total": 0, "user_defined_fields":
      [], "updated": "2012-05-21T11:50:14", "label": "lib-monit", "created": "2010-02-18T13:45:50",
      "images": ["linode/ubuntu12.04lts32bit", "linode/ubuntu12.04lts"], "user_gravatar_id":
      "98262df6476a32977cb432a748052a59", "description": "Functions for installing
      and configuring Monit system monitoring.", "rev_note": "Initial import", "deployments_active":
      0, "script": "#!/bin/bash\n#\n# Monit system monitoring. See also http://mmonit.com/wiki/Monit/ConfigurationExamples\n#\n#
      Copyright (c) 2012 Filip Wasilewski <en@ig.ma>.\n#\n# My ref: http://www.linode.com/?r=aadfce9845055011e00f0c6c9a5c01158c452deb\n\n\nfunction
      monit_install {\n    aptitude -y install monit\n}\n\nfunction monit_configure_email
      {\n    # system_monit_configure_email(email)\ncat <<EOT >/etc/monit/conf.d/email-interface\n  set
      mailserver localhost\n  set alert $1\nEOT\n}\n\nfunction monit_configure_web
      {\n    # system_monit_configure_web(domain)\ncat <<EOT >/etc/monit/conf.d/web-interface\n  set
      httpd port 2812 and\n    use address $1\n    allow $(randomString 10):$(randomString
      30)\n    allow @sudo readonly\n    signature disable\nEOT\nufw allow 2812/tcp\n}\n\nfunction
      monit_def_system {\n    # monit_def_system(hostname)\ncat <<EOT >/etc/monit/conf.d/system.cfg\n  check
      system $1\n    if loadavg (1min) > 10 then alert\n    if loadavg (5min) > 7
      then alert\n    if memory usage > 85% then alert\n    if swap usage > 25% then
      alert\n    if cpu usage (user) > 90% then alert\n    if cpu usage (system) >
      60% then alert\n    if cpu usage (wait) > 50% then alert\n    group system\nEOT\n}\n\nfunction
      monit_def_rootfs {\ncat <<EOT >/etc/monit/conf.d/rootfs.cfg\n  check filesystem
      rootfs with path /\n    if space usage > 80% for 5 times within 15 cycles then
      alert\n    if inode usage > 85% then alert\n    group system\nEOT\n}\n\nfunction
      monit_def_cron {\ncat <<EOT >/etc/monit/conf.d/cron.cfg\n  check process cron
      with pidfile /var/run/crond.pid\n    start program = \"/sbin/start cron\"\n    stop  program
      = \"/sbin/stop cron\"\n    if 5 restarts within 5 cycles then timeout\n    depends
      on cron_rc\n    group system\n\n  check file cron_rc with path /etc/init.d/cron\n    if
      failed checksum then unmonitor\n    if failed permission 755 then unmonitor\n    if
      failed uid root then unmonitor\n    if failed gid root then unmonitor\n    group
      system\nEOT\n}\n\nfunction monit_def_sshd {\ncat <<EOT >/etc/monit/conf.d/sshd.cfg\n  check
      process sshd with pidfile /var/run/sshd.pid\n    start program \"/etc/init.d/ssh
      start\"\n    stop program \"/etc/init.d/ssh stop\"\n    # if failed port 22
      protocol ssh then restart\n    # if 3 restarts within 3 cycles then timeout\nEOT\n}\n\nfunction
      monit_def_ping_google {\ncat <<EOT >/etc/monit/conf.d/ping_google.cfg\n  check
      host google-ping with address google.com\n    if failed port 80 proto http then
      alert\n    group server\nEOT\n}\n\nfunction monit_def_postfix {\ncat <<EOT >/etc/monit/conf.d/postfix.cfg\n  check
      process postfix with pidfile /var/spool/postfix/pid/master.pid\n    start program
      = \"/etc/init.d/postfix start\"\n    stop  program = \"/etc/init.d/postfix stop\"\n    if
      cpu > 60% for 2 cycles then alert\n    if cpu > 80% for 5 cycles then restart\n    if
      totalmem > 200.0 MB for 5 cycles then restart\n    if children > 250 then restart\n    if
      loadavg(5min) greater than 10 for 8 cycles then stop\n    if failed host localhost
      port 25 protocol smtp with timeout 15 seconds then alert\n    if failed host
      localhost port 25 protocol smtp for 3 cycles then restart\n    if 3 restarts
      within 5 cycles then timeout\n    group mail\n\n  check file postfix_rc with
      path /etc/init.d/postfix\n    if failed checksum then unmonitor\n    if failed
      permission 755 then unmonitor\n    if failed uid root then unmonitor\n    if
      failed gid root then unmonitor\n    group mail\nEOT\n}\n\n\nfunction monit_def_postgresql
      {\ncat <<EOT >/etc/monit/conf.d/postgresql.cfg\n  check process postgres with
      pidfile /var/run/postgresql/9.1-main.pid\n    start program = \"/etc/init.d/postgresql
      start\"\n    stop program = \"/etc/init.d/postgresql stop\"\n    if failed unixsocket
      /var/run/postgresql/.s.PGSQL.5432 protocol pgsql then restart\n    if failed
      host localhost port 5432 protocol pgsql then restart\n    if 5 restarts within
      5 cycles then timeout\n    depends on postgresql_bin\n    depends on postgresql_rc\n    group
      database\n\n  check file postgresql_bin with path /usr/lib/postgresql/9.1/bin/postgres\n    if
      failed checksum then unmonitor\n    if failed permission 755 then unmonitor\n    if
      failed uid root then unmonitor\n    if failed gid root then unmonitor\n    group
      database\n\n  check file postgresql_rc with path /etc/init.d/postgresql\n    if
      failed checksum then unmonitor\n    if failed permission 755 then unmonitor\n    if
      failed uid root then unmonitor\n    if failed gid root then unmonitor\n    group
      database\n\n  check file postgresql_log with path /var/log/postgresql/postgresql-9.1-main.log\n    if
      size > 100 MB then alert\n    group database\nEOT\n}\n\nfunction monit_def_mysql
      {\ncat <<EOT > /etc/monit/conf.d/mysql.cfg\n  check process mysqld with pidfile
      /var/run/mysqld/mysqld.pid\n    start program = \"/sbin/start mysql\" with timeout
      20 seconds\n    stop program = \"/sbin/stop mysql\"\n    if failed host localhost
      port 3306 protocol mysql then restart\n    if failed unixsocket /var/run/mysqld/mysqld.sock
      protocol mysql then restart\n    if 5 restarts within 5 cycles then timeout\n    depends
      on mysql_bin\n    depends on mysql_rc\n    group database\n\n  check file mysql_bin
      with path /usr/sbin/mysqld\n    if failed checksum then unmonitor\n    if failed
      permission 755 then unmonitor\n    if failed uid root then unmonitor\n    if
      failed gid root then unmonitor\n    group database\n\n  check file mysql_rc
      with path /etc/init.d/mysql\n    if failed checksum then unmonitor\n    if failed
      permission 755 then unmonitor\n    if failed uid root then unmonitor\n    if
      failed gid root then unmonitor\n    group database\nEOT\n}\n\nfunction monit_def_mongodb
      {\ncat <<EOT >/etc/monit/conf.d/mongodb.cfg\n  check process mongodb with pidfile
      /var/lib/mongodb/mongod.lock\n    start program = \"/sbin/start mongodb\"\n    stop  program
      = \"/sbin/stop mongodb\"\n    if failed host localhost port 28017 protocol http\n      and
      request \"/\" with timeout 10 seconds then restart\n    if 5 restarts within
      5 cycles then timeout\n    group database\nEOT\n}\n\nfunction monit_def_memcached
      {\ncat <<EOT >/etc/monit/conf.d/memcached.cfg\n  check process memcached with
      pidfile /var/run/memcached.pid\n    start program = \"/etc/init.d/memcached
      start\"\n    stop program = \"/etc/init.d/memcached stop\"\n    if 5 restarts
      within 5 cycles then timeout\n    group database\nEOT\n}\n\nfunction monit_def_apache
      {\ncat <<EOT >/etc/monit/conf.d/apache2.cfg\n  check process apache with pidfile
      /var/run/apache2.pid\n    start program = \"/etc/init.d/apache2 start\"\n    stop  program
      = \"/etc/init.d/apache2 stop\"\n    if cpu > 60% for 2 cycles then alert\n    if
      cpu > 80% for 5 cycles then alert\n    if totalmem > 200.0 MB for 5 cycles then
      alert\n    if children > 250 then alert\n    if loadavg(5min) greater than 10
      for 8 cycles then stop\n    if failed host localhost port 80 protocol HTTP request
      / within 2 cycles then alert\n    if failed host localhost port 80 protocol
      apache-status\n        dnslimit > 25% or  loglimit > 80% or waitlimit < 20%
      retry 2 within 2 cycles then alert\n    #if 5 restarts within 5 cycles then
      timeout\n    depends on apache_bin\n    depends on apache_rc\n    group www\n\n  check
      file apache_bin with path /usr/sbin/apache2\n    if failed checksum then unmonitor\n    if
      failed permission 755 then unmonitor\n    if failed uid root then unmonitor\n    if
      failed gid root then unmonitor\n    group www\n\n  check file apache_rc with
      path /etc/init.d/apache2\n    if failed checksum then unmonitor\n    if failed
      permission 755 then unmonitor\n    if failed uid root then unmonitor\n    if
      failed gid root then unmonitor\n    group www\nEOT\n}"}, {"is_public": true,
      "username": "nigma", "id": 131, "deployments_total": 1869, "user_defined_fields":
      [{"example": "Email address to send notification and system alerts. Check Spam
      folder if you don''t receive a notification within 6 minutes.", "label": "Send
      email notification to", "name": "notify_email"}, {"example": "This is the account
      that you will be using to log in.", "label": "Unprivileged user account name",
      "name": "user_name"}, {"label": "Unprivileged user password", "name": "user_password"},
      {"example": "Recommended method of authentication. It is more secure than password
      log in.", "label": "Public Key for user", "name": "user_sshkey", "default":
      ""}, {"example": "Turn off password authentication if you have added a Public
      Key.", "oneof": "Yes,No", "label": "Use SSH password authentication", "name":
      "sshd_passwordauth", "default": "No"}, {"example": "Root account should not
      be exposed.", "oneof": "No,Yes", "label": "Permit SSH root login", "name": "sshd_permitrootlogin",
      "default": "No"}, {"oneof": "/bin/zsh,/bin/bash", "label": "Shell", "name":
      "user_shell", "default": "/bin/bash"}, {"example": "Name of your server, i.e.
      linode1.", "label": "System hostname", "name": "sys_hostname", "default": "myvps"},
      {"oneof": "Yes,No", "label": "Configure PostgreSQL and create database?", "name":
      "setup_postgresql", "default": "Yes"}, {"example": "PostgreSQL database name,
      ASCII only.", "label": "PostgreSQL database name", "name": "postgresql_database",
      "default": ""}, {"example": "PostgreSQL database user name, ASCII only.", "label":
      "PostgreSQL database user", "name": "postgresql_user", "default": ""}, {"label":
      "PostgreSQL user password", "name": "postgresql_password", "default": ""}, {"oneof":
      "Yes,No", "label": "Configure MySQL and create database?", "name": "setup_mysql",
      "default": "No"}, {"label": "MySQL root Password", "name": "mysql_database_password",
      "default": ""}, {"example": "MySQL database name, ASCII only.", "label": "MySQL
      database name", "name": "mysql_database", "default": ""}, {"example": "MySQL
      database user name, ASCII only.", "label": "MySQL database user", "name": "mysql_user",
      "default": ""}, {"label": "MySQL user password", "name": "mysql_password", "default":
      ""}, {"oneof": "Yes,No", "label": "Install MongoDB", "name": "setup_mongodb",
      "default": "No"}, {"oneof": "Yes,No", "label": "Install Apache", "name": "setup_apache",
      "default": "Yes"}, {"example": "Standalone: project will be created in /srv/project_name
      directory under new user account; InUserHome: project will be created in /home/$user/project_name;
      InUserHomeRoot: project will be created in user''s home directory (/home/$user).",
      "oneof": "Standalone,InUserHome,InUserHomeRoot,No", "label": "Configure sample
      django/mod_wsgi project?", "name": "setup_django_project", "default": "Standalone"},
      {"example": "Your server domain configured in the DNS. Leave blank for RDNS
      (*.members.linode.com).", "label": "Django domain", "name": "django_domain",
      "default": ""}, {"example": "Name of your django project (if ''Create sample
      project'' is selected), i.e. my_website.", "label": "Django project name", "name":
      "django_project_name", "default": "my_project"}, {"example": "System user that
      will be used to run the mod-wsgi project process in the ''Standalone'' setup
      mode. Defaults to unprivileged account name provided above.", "label": "Django
      project owner user", "name": "django_user", "default": ""}, {"example": "Configure
      network card to listen on this Private IP (if enabled in Linode/Remote Access
      settings tab). See http://library.linode.com/networking/configuring-static-ip-interfaces",
      "label": "Private IP", "name": "sys_private_ip", "default": ""}, {"oneof": "Yes,No",
      "label": "Install Monit system monitoring?", "name": "setup_monit", "default":
      "Yes"}], "updated": "2012-05-21T16:24:23", "label": "Security, PostgreSQL/MySQL/MongoDB,
      Apache, Django", "created": "2010-02-18T13:46:38", "images": ["linode/ubuntu12.04lts32bit",
      "linode/ubuntu12.04lts"], "user_gravatar_id": "98262df6476a32977cb432a748052a59",
      "description": "Sets up a sample Django project backed up by PostgreSQL, MySQL
      or MongoDB.\r\n\r\nInstalls a complete web environment with Apache, PostgreSQL/MySQL/MongoDB,
      Python, mod_wsgi, virtualenv and Django. Additionally deploys and configures
      postfix loopback for mail sending, Uncomplicated Firewall, Fail2Ban and system
      monitoring using Monit.\r\n\r\nWrites command output to /root/stackscript.log
      and records /etc changes using Mercurial. When completed notifies via email.\r\n\r\nGitHub
      repository is at https://github.com/nigma/StackScripts.\r\n\r\nWritten by Filip
      Wasilewski. Interested in Django development? Email me at en@ig.ma.\r\n", "rev_note":
      "Updated for Ubuntu 12.04 and Django 1.4", "deployments_active": 476, "script":
      "#!/bin/bash\n#\n# Installs a complete web environment with Apache, Python,
      Django and PostgreSQL.\n#\n# Copyright (c) 2010 Filip Wasilewski <en@ig.ma>.\n#\n#
      My ref: http://www.linode.com/?r=aadfce9845055011e00f0c6c9a5c01158c452deb\n\n#
      <UDF name=\"notify_email\" Label=\"Send email notification to\" example=\"Email
      address to send notification and system alerts. Check Spam folder if you don''t
      receive a notification within 6 minutes.\" />\n\n# <UDF name=\"user_name\" label=\"Unprivileged
      user account name\" example=\"This is the account that you will be using to
      log in.\" />\n# <UDF name=\"user_password\" label=\"Unprivileged user password\"
      />\n# <UDF name=\"user_sshkey\" label=\"Public Key for user\" default=\"\" example=\"Recommended
      method of authentication. It is more secure than password log in.\" />\n# <UDF
      name=\"sshd_passwordauth\" label=\"Use SSH password authentication\" oneof=\"Yes,No\"
      default=\"No\" example=\"Turn off password authentication if you have added
      a Public Key.\" />\n# <UDF name=\"sshd_permitrootlogin\" label=\"Permit SSH
      root login\" oneof=\"No,Yes\" default=\"No\" example=\"Root account should not
      be exposed.\" />\n\n# <UDF name=\"user_shell\" label=\"Shell\" oneof=\"/bin/zsh,/bin/bash\"
      default=\"/bin/bash\" />\n\n# <UDF name=\"sys_hostname\" label=\"System hostname\"
      default=\"myvps\" example=\"Name of your server, i.e. linode1.\" />\n\n# <UDF
      name=\"setup_postgresql\" label=\"Configure PostgreSQL and create database?\"
      oneof=\"Yes,No\" default=\"Yes\" />\n# <UDF name=\"postgresql_database\" label=\"PostgreSQL
      database name\" example=\"PostgreSQL database name, ASCII only.\" default=\"\"
      />\n# <UDF name=\"postgresql_user\" label=\"PostgreSQL database user\" example=\"PostgreSQL
      database user name, ASCII only.\" default=\"\" />\n# <UDF name=\"postgresql_password\"
      label=\"PostgreSQL user password\" default=\"\" />\n\n# <UDF name=\"setup_mysql\"
      label=\"Configure MySQL and create database?\" oneof=\"Yes,No\" default=\"No\"
      />\n# <UDF name=\"mysql_database_password\" label=\"MySQL root Password\" default=\"\"
      />\n# <UDF name=\"mysql_database\" label=\"MySQL database name\" example=\"MySQL
      database name, ASCII only.\" default=\"\" />\n# <UDF name=\"mysql_user\" label=\"MySQL
      database user\" example=\"MySQL database user name, ASCII only.\" default=\"\"
      />\n# <UDF name=\"mysql_password\" label=\"MySQL user password\" default=\"\"
      />\n\n# <UDF name=\"setup_mongodb\" label=\"Install MongoDB\" oneof=\"Yes,No\"
      default=\"No\" />\n\n# <UDF name=\"setup_apache\" label=\"Install Apache\" oneof=\"Yes,No\"
      default=\"Yes\" />\n\n# <UDF name=\"setup_django_project\" label=\"Configure
      sample django/mod_wsgi project?\" oneof=\"Standalone,InUserHome,InUserHomeRoot,No\"
      default=\"Standalone\" example=\"Standalone: project will be created in /srv/project_name
      directory under new user account; InUserHome: project will be created in /home/$user/project_name;
      InUserHomeRoot: project will be created in user''s home directory (/home/$user).\"
      />\n# <UDF name=\"django_domain\" label=\"Django domain\" default=\"\" example=\"Your
      server domain configured in the DNS. Leave blank for RDNS (*.members.linode.com).\"
      />\n# <UDF name=\"django_project_name\" label=\"Django project name\" default=\"my_project\"
      example=\"Name of your django project (if ''Create sample project'' is selected),
      i.e. my_website.\" />\n# <UDF name=\"django_user\" label=\"Django project owner
      user\" default=\"\" example=\"System user that will be used to run the mod-wsgi
      project process in the ''Standalone'' setup mode. Defaults to unprivileged account
      name provided above.\" />\n\n# <UDF name=\"sys_private_ip\" Label=\"Private
      IP\" default=\"\" example=\"Configure network card to listen on this Private
      IP (if enabled in Linode/Remote Access settings tab). See http://library.linode.com/networking/configuring-static-ip-interfaces\"
      />\n# <UDF name=\"setup_monit\" label=\"Install Monit system monitoring?\" oneof=\"Yes,No\"
      default=\"Yes\" />\n\nset -e\nset -u\n#set -x\n\nUSER_GROUPS=sudo\n\nexec &>
      /root/stackscript.log\n\nsource <ssinclude StackScriptID=\"1\"> # StackScript
      Bash Library\nsystem_update\n\nsource <ssinclude StackScriptID=\"124\"> # lib-system\nsystem_install_mercurial\nsystem_start_etc_dir_versioning
      #start recording changes of /etc config files\n\n# Configure system\nsource
      <ssinclude StackScriptID=\"123\"> # lib-system-ubuntu\nsystem_update_hostname
      \"$SYS_HOSTNAME\"\nsystem_record_etc_dir_changes \"Updated hostname\" # SS124\n\n#
      Create user account\nsystem_add_user \"$USER_NAME\" \"$USER_PASSWORD\" \"$USER_GROUPS\"
      \"$USER_SHELL\"\nif [ \"$USER_SSHKEY\" ]; then\n    system_user_add_ssh_key
      \"$USER_NAME\" \"$USER_SSHKEY\"\nfi\nsystem_record_etc_dir_changes \"Added unprivileged
      user account\" # SS124\n\n# Configure sshd\nsystem_sshd_permitrootlogin \"$SSHD_PERMITROOTLOGIN\"\nsystem_sshd_passwordauthentication
      \"$SSHD_PASSWORDAUTH\"\ntouch /tmp/restart-ssh\nsystem_record_etc_dir_changes
      \"Configured sshd\" # SS124\n\n# Lock user account if not used for login\nif
      [ \"SSHD_PERMITROOTLOGIN\" == \"No\" ]; then\n    system_lock_user \"root\"\n    system_record_etc_dir_changes
      \"Locked root account\" # SS124\nfi\n\n# Install Postfix\npostfix_install_loopback_only
      # SS1\nsystem_record_etc_dir_changes \"Installed postfix loopback\" # SS124\n\n#
      Setup logcheck\nsystem_security_logcheck\nsystem_record_etc_dir_changes \"Installed
      logcheck\" # SS124\n\n# Setup fail2ban\nsystem_security_fail2ban\nsystem_record_etc_dir_changes
      \"Installed fail2ban\" # SS124\n\n# Setup firewall\nsystem_security_ufw_configure_basic\nsystem_record_etc_dir_changes
      \"Configured UFW\" # SS124\n\nsource <ssinclude StackScriptID=\"126\"> # lib-python\npython_install\nsystem_record_etc_dir_changes
      \"Installed python\" # SS124\n\n# lib-system - SS124\nsystem_install_utils\nsystem_install_build\nsystem_install_subversion\nsystem_install_git\nsystem_record_etc_dir_changes
      \"Installed common utils\"\n\n# Install and configure apache and mod_wsgi\nif
      [ \"$SETUP_APACHE\" == \"Yes\" ]; then\n    source <ssinclude StackScriptID=\"122\">
      # lib-apache\n    apache_worker_install\n    system_record_etc_dir_changes \"Installed
      apache\" # SS124\n    apache_mod_wsgi_install\n    system_record_etc_dir_changes
      \"Installed mod-wsgi\" # SS124\n    apache_cleanup\n    system_record_etc_dir_changes
      \"Cleaned up apache config\" # SS124\nfi\n\n# Install PostgreSQL and setup database\nif
      [ \"$SETUP_POSTGRESQL\" == \"Yes\" ]; then\n    source <ssinclude StackScriptID=\"125\">
      # lib-postgresql\n    postgresql_install\n    system_record_etc_dir_changes
      \"Installed PostgreSQL\"\n    postgresql_create_user \"$POSTGRESQL_USER\" \"$POSTGRESQL_PASSWORD\"\n    postgresql_create_database
      \"$POSTGRESQL_DATABASE\" \"$POSTGRESQL_USER\"\n    system_record_etc_dir_changes
      \"Configured PostgreSQL\"\nfi\n\n# Install MySQL and setup database\nif [ \"$SETUP_MYSQL\"
      == \"Yes\" ]; then\n    set +u # ignore undefined variables in Linode''s SS1\n    mysql_install
      \"$MYSQL_DATABASE_PASSWORD\" && mysql_tune 30\n    mysql_create_database \"$MYSQL_DATABASE_PASSWORD\"
      \"$MYSQL_DATABASE\"\n    mysql_create_user \"$MYSQL_DATABASE_PASSWORD\" \"$MYSQL_USER\"
      \"$MYSQL_PASSWORD\"\n    mysql_grant_user \"$MYSQL_DATABASE_PASSWORD\" \"$MYSQL_USER\"
      \"$MYSQL_DATABASE\"\n    set -u\n    system_record_etc_dir_changes \"Configured
      MySQL\"\nfi\n\n# Install MongoDB\nif [ \"$SETUP_MONGODB\" == \"Yes\" ]; then\n    source
      <ssinclude StackScriptID=\"128\"> # lib-mongodb\n    mongodb_install\n    system_record_etc_dir_changes
      \"Installed MongoDB\"\nfi\n\n# Setup and configure sample django project\nRDNS=$(get_rdns_primary_ip)\nDJANGO_PROJECT_PATH=\"\"\n\nif
      [ \"$SETUP_DJANGO_PROJECT\" != \"No\" ]; then\n    source <ssinclude StackScriptID=\"127\">
      # lib-django\n\n    if [ -z \"$DJANGO_DOMAIN\" ]; then DJANGO_DOMAIN=$RDNS;
      fi\n\n    case \"$SETUP_DJANGO_PROJECT\" in\n    Standalone)\n        DJANGO_PROJECT_PATH=\"/srv/$DJANGO_PROJECT_NAME\"\n        if
      [ -n \"$DJANGO_USER\" ]; then\n            if [ \"$DJANGO_USER\" != \"$USER_NAME\"
      ]; then\n                system_add_system_user \"$DJANGO_USER\" \"$DJANGO_PROJECT_PATH\"
      \"$USER_SHELL\"\n            fi\n        else\n            DJANGO_USER=$USER_NAME\n        fi\n      ;;\n    InUserHome)\n        DJANGO_USER=$USER_NAME\n        DJANGO_PROJECT_PATH=$(system_get_user_home
      \"$USER_NAME\")/$DJANGO_PROJECT_NAME\n      ;;\n    InUserHomeRoot)\n        DJANGO_USER=$USER_NAME\n        DJANGO_PROJECT_PATH=$(system_get_user_home
      \"$USER_NAME\")\n      ;;\n    esac\n\n    django_create_project \"$DJANGO_PROJECT_PATH\"\n    django_change_project_owner
      \"$DJANGO_PROJECT_PATH\" \"$DJANGO_USER\"\n\n    if [ \"$SETUP_APACHE\" == \"Yes\"
      ]; then\n        django_configure_apache_virtualhost \"$DJANGO_DOMAIN\" \"$DJANGO_PROJECT_PATH\"
      \"$DJANGO_USER\"\n        touch /tmp/restart-apache2\n    fi\n    if [ \"$SETUP_POSTGRESQL\"
      == \"Yes\" ]; then\n        django_install_db_driver \"$DJANGO_PROJECT_PATH\"
      \"psycopg2\"\n        django_configure_db_settings \"$DJANGO_PROJECT_PATH\"
      \"postgresql_psycopg2\" \"$POSTGRESQL_DATABASE\" \"$POSTGRESQL_USER\" \"$POSTGRESQL_PASSWORD\"
      \"127.0.0.1\" \"\"\n    fi\n    if [ \"$SETUP_MYSQL\" == \"Yes\" ]; then\n        django_install_db_driver
      \"$DJANGO_PROJECT_PATH\" \"MySQL-python\"\n    fi\n    system_record_etc_dir_changes
      \"Configured django project ''$DJANGO_PROJECT_NAME''\"\nfi\n\nif [ -n \"$SYS_PRIVATE_IP\"
      ]; then\n    system_configure_private_network \"$SYS_PRIVATE_IP\"\n    system_record_etc_dir_changes
      \"Configured private network\"\nfi\n\nrestart_services\nrestart_initd_services\n\nif
      [ \"$SETUP_MONIT\" == \"Yes\" ]; then\n    source <ssinclude StackScriptID=\"130\">
      # lib-monit\n    monit_install\n    system_record_etc_dir_changes \"Installed
      Monit\"\n\n    monit_configure_email \"$NOTIFY_EMAIL\"\n    monit_configure_web
      $(system_primary_ip)\n    system_record_etc_dir_changes \"Configured Monit interfaces\"\n\n    monit_def_system
      \"$SYS_HOSTNAME\"\n    monit_def_rootfs\n    monit_def_cron\n    monit_def_postfix\n    monit_def_ping_google\n    if
      [ \"$SETUP_POSTGRESQL\" == \"Yes\" ]; then monit_def_postgresql; fi\n    if
      [ \"$SETUP_MYSQL\" == \"Yes\" ]; then monit_def_mysql; fi\n    if [ \"$SETUP_MONGODB\"
      == \"Yes\" ]; then monit_def_mongodb; fi\n    if [ \"$SETUP_APACHE\" == \"Yes\"
      ]; then monit_def_apache; fi\n    #if [ \"$SETUP_MEMCACHE\" == \"Yes\" ]; then
      monit_def_memcached; fi\n    system_record_etc_dir_changes \"Created Monit rules
      for installed services\"\n    monit reload\nfi\n\n# Send info message\ncat >
      ~/setup_message <<EOD\nHi,\n\nYour Linode VPS configuration is completed.\n\nEOD\n\nif
      [ \"$SETUP_DJANGO_PROJECT\" != \"No\" ]; then\n    cat >> ~/setup_message <<EOD\nYou
      can now navigate to http://${DJANGO_DOMAIN}/ to see your web server running.\nThe
      Django project files are in $DJANGO_PROJECT_PATH/app.\n\nEOD\nfi\n\nif [ \"$SETUP_MONIT\"
      == \"Yes\" ]; then\n    cat >> ~/setup_message <<EOD\nMonit web interface is
      at http://${RDNS}:2812/ (use your system username/password).\n\nEOD\nfi\n\ncat
      >> ~/setup_message <<EOD\nTo access your server ssh to $USER_NAME@$RDNS\n\nThanks
      for using this StackScript. Follow http://github.com/nigma/StackScripts for
      updates.\n\nNeed help with developing web apps? Email me at en@ig.ma.\n\nBest,\nFilip\n--\nhttp://en.ig.ma/\nEOD\n\nmail
      -s \"Your Linode VPS is ready\" \"$NOTIFY_EMAIL\" < ~/setup_message"}, {"is_public":
      true, "username": "henszey", "id": 154, "deployments_total": 9, "user_defined_fields":
      [], "updated": "2011-05-09T14:09:15", "label": "StackScript Bash Library for
      RH Derivatives", "created": "2010-02-22T19:17:19", "images": ["linode/centos5.632bit",
      "linode/centos5.6", "linode/fedora1132bit"], "user_gravatar_id": "ff806e033c906e67bdd779bd20eb0a01",
      "description": "Port of caker''s library for Ubuntu to Centos/RHEL/Fedora",
      "rev_note": "Added make for APC installation function", "deployments_active":
      2, "script": "#!/bin/bash\n#\n# StackScript Bash Library\n#\n# Copyright (c)
      2010 Justin Ellison <justin@techadvise.com>, ported from Chris Aker''s\n# Ubuntu
      StackScript http://www.linode.com/stackscripts/view/?StackScriptID=1\n# All
      rights reserved.\n#\n# Redistribution and use in source and binary forms, with
      or without modification, \n# are permitted provided that the following conditions
      are met:\n#\n# * Redistributions of source code must retain the above copyright
      notice, this\n# list of conditions and the following disclaimer.\n#\n# * Redistributions
      in binary form must reproduce the above copyright notice, this\n# list of conditions
      and the following disclaimer in the documentation and/or\n# other materials
      provided with the distribution.\n#\n# * Neither the name of Linode LLC nor the
      names of its contributors may be\n# used to endorse or promote products derived
      from this software without specific prior\n# written permission.\n#\n# THIS
      SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND
      ANY\n# EXPRESS OR IMPLIED WARRANTIES, I***REMOVED***LUDING, BUT NOT LIMITED TO, THE IMPLIED
      WARRANTIES\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
      IN NO EVENT\n# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
      DIRECT, INDIRECT,\n# I***REMOVED***IDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
      (I***REMOVED***LUDING, BUT NOT LIMITED\n# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      LOSS OF USE, DATA, OR PROFITS; OR\n# BUSINESS INTERRUPTION) HOWEVER CAUSED AND
      ON ANY THEORY OF LIABILITY, WHETHER IN\n# CONTRACT, STRICT LIABILITY, OR TORT
      (I***REMOVED***LUDING NEGLIGE***REMOVED***E OR OTHERWISE) ARISING IN\n# ANY WAY OUT OF THE USE OF
      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\n# DAMAGE.\n\n###########################################################\n#
      System\n###########################################################\n\nfunction
      system_update {\n\tyum -yq upgrade\n}\n\nfunction system_primary_ip {\n\t# returns
      the primary IP assigned to eth0\n\techo $(ifconfig eth0 | awk -F: ''/inet addr:/
      {print $2}'' | awk ''{ print $1 }'')\n}\n\nfunction get_rdns {\n\t# calls host
      on an IP address and returns its reverse dns\n\n\tif [ ! -e /usr/bin/host ];
      then\n\t\tyum -yq install bind-utils > /dev/null\n\tfi\n\techo $(host $1 | awk
      ''/pointer/ {print $5}'' | sed ''s/\\.$//'')\n}\n\nfunction get_rdns_primary_ip
      {\n\t# returns the reverse dns of the primary IP assigned to this system\n\techo
      $(get_rdns $(system_primary_ip))\n}\n\nfunction get_physical_memory {\n\techo
      $(awk ''/MemTotal/ {print int($2/1024)}'' /proc/meminfo) # how much memory in
      MB this system has\n}\n\n###########################################################\n#
      Postfix\n###########################################################\n\nfunction
      postfix_install_loopback_only {\n\t# Installs postfix and configure to listen
      only on the local interface. Also\n\t# allows for local mail delivery\n\n\tyum
      -yq install postfix\n\tyum -yq remove sendmail\n\n\ttouch /tmp/restart-postfix\n}\n\n\n###########################################################\n#
      Apache\n###########################################################\n\nfunction
      apache_install {\n\t# installs the system default apache2 MPM\n\tyum -yq install
      httpd\n\n\tsed -i -e ''s/^#NameVirtualHost \\*:80$/NameVirtualHost *:80/'' /etc/httpd/conf/httpd.conf\n\n\ttouch
      /tmp/restart-httpd\n}\n\nfunction apache_tune {\n\t# Tunes Apache''s memory
      to use the percentage of RAM you specify, defaulting to 40%\n\n\t# $1 - the
      percent of system memory to allocate towards Apache\n\n\tif [ ! -n \"$1\" ];\n\t\tthen
      PERCENT=40\n\t\telse PERCENT=\"$1\"\n\tfi\n\n\tyum -yq install httpd\n\tPERPROCMEM=10
      # the amount of memory in MB each apache process is likely to utilize\n\tMEM=$(get_physical_memory)\n\tMAXCLIENTS=$((MEM*PERCENT/100/PERPROCMEM))
      # calculate MaxClients\n\tMAXCLIENTS=${MAXCLIENTS/.*} # cast to an integer\n\tsed
      -i -e \"s/\\(^[ \\t]*\\(MaxClients\\|ServerLimit\\)[ \\t]*\\)[0-9]*/\\1$MAXCLIENTS/\"
      /etc/httpd/conf/httpd.conf\n\n\ttouch /tmp/restart-httpd\n}\n\nfunction apache_virtualhost
      {\n\t# Configures a VirtualHost\n\n\t# $1 - required - the hostname of the virtualhost
      to create \n\n\tif [ ! -n \"$1\" ]; then\n\t\techo \"apache_virtualhost() requires
      the hostname as the first argument\"\n\t\treturn 1;\n\tfi\n\n\tif [ -e \"/etc/httpd/conf.d/${1}-vhost.conf\"
      ]; then\n\t\techo /etc/httpd/conf.d/${1}-vhost.conf already exists\n\t\treturn;\n\tfi\n\n\tmkdir
      -p /srv/www/$1/public_html /srv/www/$1/logs\n\n\techo \"<VirtualHost *:80>\"
      > /etc/httpd/conf.d/${1}-vhost\n\techo \"    ServerName $1\" >> /etc/httpd/conf.d/${1}-vhost\n\techo
      \"    DocumentRoot /srv/www/$1/public_html/\" >> /etc/httpd/conf.d/${1}-vhost\n\techo
      \"    <Directory /srv/www/$1/public_html/>\" >> /etc/httpd/conf.d/${1}-vhost\n\techo
      \"    \tAllowOverride All\" >> /etc/httpd/conf.d/${1}-vhost\n\techo \"    </Directory>\"
      >> /etc/httpd/conf.d/${1}-vhost\n\techo \"    ErrorLog /srv/www/$1/logs/error.log\"
      >> /etc/httpd/conf.d/${1}-vhost\n\techo \"    CustomLog /srv/www/$1/logs/access.log
      combined\" >> /etc/httpd/conf.d/${1}-vhost\n\techo \"</VirtualHost>\" >> /etc/httpd/conf.d/${1}-vhost\n\n\tln
      -s /etc/httpd/conf.d/${1}-vhost /etc/httpd/conf.d/${1}-vhost.conf\n\n\ttouch
      /tmp/restart-httpd\n}\n\nfunction apache_virtualhost_from_rdns {\n\t# Configures
      a VirtualHost using the rdns of the first IP as the ServerName\n\n\tapache_virtualhost
      $(get_rdns_primary_ip)\n}\n\n\nfunction apache_virtualhost_get_docroot {\n\tif
      [ ! -n \"$1\" ]; then\n\t\techo \"apache_virtualhost_get_docroot() requires
      the hostname as the first argument\"\n\t\treturn 1;\n\tfi\n\n\tif [ -e /etc/httpd/conf.d/${1}-vhost
      ];\n\t\tthen echo $(awk ''/DocumentRoot/ {print $2}'' /etc/httpd/conf.d/${1}-vhost
      )\n\tfi\n}\n\nfunction apache_mod_deflate_config {\n\tcat <<EOD > /etc/httpd/conf.d/deflate.conf\n<IfModule
      mod_deflate.c>\n        # these are known to be safe with MSIE 6\n        AddOutputFilterByType
      DEFLATE text/html text/plain text/xml\n\n        # everything else may cause
      problems with MSIE 6\n        AddOutputFilterByType DEFLATE text/css\n        AddOutputFilterByType
      DEFLATE application/x-javascript application/javascript application/ecmascript\n        AddOutputFilterByType
      DEFLATE application/rss+xml\n\n\t# Exclude Not compatible browsers.\n\tBrowserMatch
      ^Mozilla/4 gzip-only-text/html\n\tBrowserMatch ^Mozilla/4\\.0[678] no-gzip\n\tBrowserMatch
      \\bMSI[E] !no-gzip !gzip-only-text/html\n\n</IfModule>\nEOD\n\ttouch /tmp/restart-httpd\n}\n\n###########################################################\n#
      mysql-server\n###########################################################\n\nfunction
      mysql_install {\n\t# $1 - the mysql root password\n\n\tif [ ! -n \"$1\" ]; then\n\t\techo
      \"mysql_install() requires the root pass as its first argument\"\n\t\treturn
      1;\n\tfi\n\n\tyum -yq install mysql-server\n\n\t/etc/init.d/mysqld start\n\techo
      \"Sleeping while MySQL starts up for the first time...\"\n\tsleep 20\n\t#Remove
      anonymous users\n\techo \"DELETE FROM mysql.user WHERE User='''';\" | mysql
      -u root \n\t#Remove remote root\n\techo \"DELETE FROM mysql.user WHERE User=''root''
      AND Host!=''localhost'';\" | mysql -u root \n\t#Remove test db\n\techo \"DROP
      DATABASE test;\" | mysql -u root \n\t#Set root password\n\techo \"UPDATE mysql.user
      SET Password=PASSWORD(''$1'') WHERE User=''root'';\" | mysql -u root \n\t#Flush
      privs\n\techo \"FLUSH PRIVILEGES;\" | mysql -u root \n\n}\n\nfunction mysql_disable_innodb
      {\n\techo \"sskip-innodb\" >> /etc/my.cnf # disable innodb - saves about 100M\n\ttouch
      /tmp/restart-mysqld\n}\n\nfunction mysql_tune {\n\t# Tunes MySQL''s memory usage
      to utilize the percentage of memory you specify, defaulting to 40%\n\n\t# $1
      - the percent of system memory to allocate towards MySQL\n\n\tif [ ! -n \"$1\"
      ];\n\t\tthen PERCENT=40\n\t\telse PERCENT=\"$1\"\n\tfi\n\n\tMEM=$(get_physical_memory)\n\tMYMEM=$((MEM*PERCENT/100))
      # how much memory we''d like to tune mysql with\n\tMYMEMCHUNKS=$((MYMEM/4))
      # how many 4MB chunks we have to play with\n\n\t# mysql config options we want
      to set to the percentages in the second list, respectively\n\tOPTLIST=(key_buffer
      sort_buffer_size read_buffer_size read_rnd_buffer_size myisam_sort_buffer_size
      query_cache_size)\n\tDISTLIST=(75 1 1 1 5 15)\n\n\tfor opt in ${OPTLIST[@]};
      do\n\t\tsed -i -e \"/\\[mysqld\\]/,/\\[.*\\]/s/^$opt/#$opt/\" /etc/my.cnf\n\tdone\n\n\tfor
      i in ${!OPTLIST[*]}; do\n\t\tval=$(echo | awk \"{print int((${DISTLIST[$i]}
      * $MYMEMCHUNKS/100))*4}\")\n\t\tif [ $val -lt 4 ]\n\t\t\tthen val=4\n\t\tfi\n\t\tconfig=\"${config}\\n${OPTLIST[$i]}
      = ${val}M\"\n\tdone\n\n\tsed -i -e \"s/\\(\\[mysqld\\]\\)/\\1\\n$config\\n/\"
      /etc/my.cnf\n\n\ttouch /tmp/restart-mysqld\n}\n\nfunction mysql_create_database
      {\n\t# $1 - the mysql root password\n\t# $2 - the db name to create\n\n\tif
      [ ! -n \"$1\" ]; then\n\t\techo \"mysql_create_database() requires the root
      pass as its first argument\"\n\t\treturn 1;\n\tfi\n\tif [ ! -n \"$2\" ]; then\n\t\techo
      \"mysql_create_database() requires the name of the database as the second argument\"\n\t\treturn
      1;\n\tfi\n\n\techo \"CREATE DATABASE $2;\" | mysql -u root -p\"$1\"\n}\n\nfunction
      mysql_create_user {\n\t# $1 - the mysql root password\n\t# $2 - the user to
      create\n\t# $3 - their password\n\n\tif [ ! -n \"$1\" ]; then\n\t\techo \"mysql_create_user()
      requires the root pass as its first argument\"\n\t\treturn 1;\n\tfi\n\tif [
      ! -n \"$2\" ]; then\n\t\techo \"mysql_create_user() requires username as the
      second argument\"\n\t\treturn 1;\n\tfi\n\tif [ ! -n \"$3\" ]; then\n\t\techo
      \"mysql_create_user() requires a password as the third argument\"\n\t\treturn
      1;\n\tfi\n\n\techo \"CREATE USER ''$2''@''localhost'' IDENTIFIED BY ''$3'';\"
      | mysql -u root -p\"$1\"\n}\n\nfunction mysql_grant_user {\n\t# $1 - the mysql
      root password\n\t# $2 - the user to bestow privileges \n\t# $3 - the database\n\n\tif
      [ ! -n \"$1\" ]; then\n\t\techo \"mysql_create_user() requires the root pass
      as its first argument\"\n\t\treturn 1;\n\tfi\n\tif [ ! -n \"$2\" ]; then\n\t\techo
      \"mysql_create_user() requires username as the second argument\"\n\t\treturn
      1;\n\tfi\n\tif [ ! -n \"$3\" ]; then\n\t\techo \"mysql_create_user() requires
      a database as the third argument\"\n\t\treturn 1;\n\tfi\n\n\techo \"GRANT ALL
      PRIVILEGES ON $3.* TO ''$2''@''localhost'';\" | mysql -u root -p\"$1\"\n\techo
      \"FLUSH PRIVILEGES;\" | mysql -u root -p\"$1\"\n\n}\n\n###########################################################\n#
      PHP functions\n###########################################################\n\nfunction
      install_testing_repo {\n\tif [ -n \"`grep CentOS /etc/redhat-release`\" ] &&
      [ ! -e /etc/yum.repos.d/CentOS-Testing.repo ]; then\n\t\tcat <<''EOD'' > /etc/yum.repos.d/CentOS-Testing.repo\n#
      CentOS-Testing:\n# !!!! CAUTION !!!!\n# This repository is a proving grounds
      for packages on their way to CentOSPlus and CentOS Extras.\n# They may or may
      not replace core CentOS packages, and are not guaranteed to function properly.\n#
      These packages build and install, but are waiting for feedback from testers
      as to\n# functionality and stability. Packages in this repository will come
      and go during the\n# development period, so it should not be left enabled or
      used on production systems without due\n# consideration.\n[testing]\nname=CentOS-5
      Testing\nbaseurl=http://dev.centos.org/centos/$releasever/testing/$basearch/\nenabled=1\ngpgcheck=1\ngpgkey=http://dev.centos.org/centos/RPM-GPG-KEY-CentOS-testing\nincludepkgs=php*\nEOD\n\tfi\n}\n\nfunction
      php_install_apc {\n\tyum -yq install php-pear php-devel httpd-devel make\n\techo
      yes | pecl install apc\n\techo \"extension=apc.so\" > /etc/php.d/apc.ini\n\tif
      [ -n \"$1\" ]; then\n\t\techo \"apc.shm_size=${1}\" >> /etc/php.d/apc.ini\n\tfi\n\techo
      \"apc.include_once_override = 1\" >> /etc/php.d/apc.ini\n\ttouch /tmp/restart-httpd\n}\n\nfunction
      php_install_with_apache {\n\tinstall_testing_repo\n\tyum -yq install php php-mysql
      php-cli mod_php php-cli php-gd\n\ttouch /tmp/restart-httpd\n}\n\nfunction php_tune
      {\n\t# Tunes PHP to utilize up to nMB per process, 32 by default\n\tif [ ! -n
      \"$1\" ];\n\t\tthen MEM=\"32\"\n\t\telse MEM=\"${1}\"\n\tfi\n\n\tsed -i''-orig''
      \"s/memory_limit = [0-9]\\+M/memory_limit = ${MEM}M/\" /etc/php.ini\n\ttouch
      /tmp/restart-httpd\n}\n\n\nfunction disable_service {\n\tif [ ! -n \"$1\" ];
      then\n\t\techo \"disable_service() requires the service as its first argument\"\n\t\treturn
      1;\n\tfi\n\tchkconfig --level=12345 $1 off\n\t/etc/init.d/${1} stop\n\n}\n\nfunction
      enable_epel_repo {\n\trpm -Uvh http://download.fedora.redhat.com/pub/epel/5/i386/epel-release-5-3.noarch.rpm\n}\n\n###########################################################\n#
      Other niceties!\n###########################################################\n\nfunction
      goodstuff {\n\tyum -yq install vim-enhanced subversion\n}\n\n\n###########################################################\n#
      utility functions\n###########################################################\n\nfunction
      restartServices {\n\t# restarts services that have a file in /tmp/needs-restart/\n\n\tfor
      service in $(ls /tmp/restart-* | cut -d- -f2); do\n\t\t/etc/init.d/$service
      restart\n\t\trm -f /tmp/restart-$service\n\tdone\n}\n\nfunction randomString
      {\n\tif [ ! -n \"$1\" ];\n\t\tthen LEN=20\n\t\telse LEN=\"$1\"\n\tfi\n\n\techo
      $(</dev/urandom tr -dc A-Za-z0-9 | head -c $LEN) # generate a random string\n}"},
      {"is_public": true, "username": "henszey", "id": 162, "deployments_total": 1,
      "user_defined_fields": [], "updated": "2011-05-09T14:09:10", "label": "Drupal
      Library for RH Derivatives", "created": "2010-02-24T01:28:24", "images": ["linode/centos5.632bit",
      "linode/centos5.6", "linode/fedora1132bit"], "user_gravatar_id": "ff806e033c906e67bdd779bd20eb0a01",
      "description": "", "rev_note": "Initial import", "deployments_active": 0, "script":
      "#!/bin/bash\n\n#RH Bash Lib\ncase \"$-\" in\n\t*i*) \n\t\tPATH=$(cd ${0%/*}
      && pwd -P)\n\t\tsource \"${PATH}/bash_lib_rh.sh\"\n\t;;\n\t*) \n\t\tsource ''<ssinclude
      StackScriptID=\"154\">''\n\t;;\nesac\n\nfunction drush_install {\n\n\tif [ !
      -e /usr/bin/cvs ]; then\n\t\tyum -yq install cvs\n\tfi    \n\tif [ ! -e /usr/bin/which
      ]; then\n\t\tyum -yq install which\n\tfi    \n\tcd /tmp && cvs -z6 -d:pserver:anonymous:anonymous@cvs.drupal.org:/cvs/drupal-contrib
      checkout -d drush contributions/modules/drush\n\tif [ ! -f /tmp/drush/drush
      ]; then\n\t\techo \"Could not checkout drush from cvs\"\n\t\texit 1                             \n\tfi\n\n\tcd
      /usr/local && /tmp/drush/drush dl drush && cd bin && ln -s ../drush/drush drush
      && ln -s /usr/local/bin/drush /usr/bin/drush\n\tif [ ! -x /usr/local/bin/drush
      ]; then\n\t\techo \"Could not install drush in /usr/local/bin\"\n\t\texit 1                     \n\tfi\n\n\tcd
      && rm -rf /tmp/drush\n}\n\nfunction drush_make_install {\n\tmkdir ~/.drush &&
      cd ~/.drush && /usr/local/bin/drush dl drush_make\n\tif [ ! -d ~/.drush/drush_make
      ]; then\n\t\techo \"Could not install drush_make\"\n\t\texit 1\n\tfi\n}\n\nfunction
      drupal_install {\n        # installs the latest drupal version from drupal.org\n\n        #
      $1 - required - The existing virtualhost to install into\n\n        if [ ! -n
      \"$1\" ]; then\n                echo \"drupal_install() requires the virtualhost
      as its first argument\"\n                return 1;                                                             \n        fi                                                                            \n\n        if
      [ ! -e /usr/bin/wget ]; then\n                yum -yq install wget\n        fi                              \n\n        #
      Install drush to install drupal latest version\n        if [ ! -e /usr/bin/php
      ]; then\n                php_install_with_apache\n        fi                                              \n\n        if
      [ ! -e /usr/local/bin/drush ]; then\n\t\tdrush_install\n        fi                                                                                   \n\n        VPATH=$(apache_virtualhost_get_docroot
      $1)\n\n        if [ ! -n \"$VPATH\" ]; then\n                echo \"Could not
      determine DocumentRoot for $1\"\n                return 1;                                     \n        fi                                                    \n\n        #
      download, extract, chown, and get our config file started\n        cd $VPATH                                                  \n        cd
      .. && rm -rf public_html                                \n        drush dl drupal
      && mv $(find . -type d -name drupal\\*) public_html\n        cd $VPATH                                                         \n        cp
      sites/default/default.settings.php sites/default/settings.php  \n        mkdir
      -p sites/default/files                                         \n        chmod
      640 sites/default/settings.php                              \n        chown
      -R apache: .                                              \n\n        # database
      configuration\n        if [ ! -n \"$DB_USER_PASSWORD\" ]; then\n                DB_USER_PASSWORD=$(randomString
      20)\n        fi                                         \n\n        mysql_create_database
      \"$DB_PASSWORD\" \"$DB_NAME\"\n        mysql_create_user \"$DB_PASSWORD\" \"$DB_USER\"
      \"$DB_USER_PASSWORD\"\n        mysql_grant_user \"$DB_PASSWORD\" \"$DB_USER\"
      \"$DB_NAME\"          \n\n        sed -i \"/^$db_url/s/mysql\\:\\/\\/username:password/mysqli\\:\\/\\/$DB_USER:$DB_USER_PASSWORD/\"
      sites/default/settings.php                                                              \n        sed
      -i \"/^$db_url/s/databasename/$DB_NAME/\" sites/default/settings.php               \n\n        #
      setup crontab and clean-urls\n\tif [ -e /etc/cron.daily/drupal-crons ]; then\n\t\tcat
      <<EOD >> /etc/cron.daily/drupal-crons\n/usr/local/bin/drush -r $VPATH cron >/dev/null\nEOD\n\telse\n\t\tcat
      <<EOD > /etc/cron.daily/drupal-crons\n#!/bin/bash\n/usr/local/bin/drush -r $VPATH
      cron >/dev/null\nEOD\n\t\tchmod 755 /etc/cron.daily/drupal-crons\n\tfi\n        touch
      /tmp/restart-httpd                                                           \n\n}"},
      {"is_public": true, "username": "mocra", "id": 163, "deployments_total": 240,
      "user_defined_fields": [{"example": "1.8.7-2010.01", "label": "Ruby Enterprise
      Edition Version", "name": "ree_version", "default": "1.8.7-2010.01"}, {"example":
      "/opt/local will install REE to /opt/local/ree", "label": "Install Prefix for
      REE and Passenger", "name": "install_prefix", "default": "/opt/local"}, {"label":
      "Rails/Rack environment to run", "name": "rr_env", "default": "production"}],
      "updated": "2010-05-17T01:41:29", "label": "Postgres + REE + Nginx + Passenger",
      "created": "2010-02-24T09:05:29", "images": ["linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts",
      "linode/ubuntu9.1032bit", "linode/ubuntu9.1064bit", "linode/ubuntu8.04lts32bit",
      "linode/ubuntu8.04lts64bit", "linode/ubuntu8.1032bit", "linode/ubuntu8.1064bit",
      "linode/ubuntu9.0432bit", "linode/ubuntu9.0464bit"], "user_gravatar_id": "816804f37e37ec0fe3343369eca48e69",
      "description": "Installs Postgres, Ruby Enterprise edition, and Nginx with Passenger.
      It also adds REE to the system-wide $PATH", "rev_note": "Fix up comments", "deployments_active":
      18, "script": "#!/bin/bash\n# \n# Installs Postgres, Ruby Enterprise edition,
      and Nginx with Passenger. \n# It also adds REE to the system-wide $PATH\n#\n#
      <UDF name=\"ree_version\" Label=\"Ruby Enterprise Edition Version\" default=\"1.8.7-2010.01\"
      example=\"1.8.7-2010.01\" />\n# <UDF name=\"install_prefix\" Label=\"Install
      Prefix for REE and Passenger\" default=\"/opt/local\" example=\"/opt/local will
      install REE to /opt/local/ree\" />\n# <UDF name=\"rr_env\" Label=\"Rails/Rack
      environment to run\" default=\"production\" />\n\nsource <ssinclude StackScriptID=44>
      # Enable Universe\n\n# Set up some necessary ENV variables\n  # Should be set
      from UDF if run through Linode\n  if [ ! -n \"$REE_VERSION\" ]; then\n    REE_VERSION=\"1.8.7-2010.01\"\n  fi\n  if
      [ ! -n \"$INSTALL_PREFIX\" ]; then\n    INSTALL_PREFIX=\"/usr/local\"\n  fi\n  if
      [ ! -n \"$RR_ENV\" ]; then\n    RR_ENV=\"production\"\n  fi\n  if [ ! -n \"$TMPDIR\"
      ]; then\n    TMPDIR=\"/var/tmp\"\n  fi\n\n  REE_NAME=\"ruby-enterprise-$REE_VERSION\"\n  REE_FILENAME=\"$REE_NAME.tar.gz\"\n  REE_DOWNLOAD=\"http://rubyforge.org/frs/download.php/68719/$REE_FILENAME\"\n  WORKING_DIR=\"$TMPDIR/flux-setup\"\n\n  mkdir
      -p \"$WORKING_DIR\"\n\n# Set up PostgreSQL\n  apt-get -y install postgresql
      libpq-dev\n\n# Set up Ruby Enterprise Edition\n  # Dependencies\n  apt-get -y
      install build-essential zlib1g-dev libssl-dev libreadline5-dev\n\n  # Download\n  cd       \"$WORKING_DIR\"\n  wget     \"$REE_DOWNLOAD\"
      -O \"$REE_FILENAME\"\n  tar xzf  \"$REE_FILENAME\"\n  cd       \"$REE_NAME\"\n  \n  #
      Install\n  ./installer --auto=\"$INSTALL_PREFIX/$REE_NAME\"\n  ln -s \"$INSTALL_PREFIX/$REE_NAME\"
      \"$INSTALL_PREFIX/ree\"\n\n  # Add REE to the PATH\n  PATH=\"$INSTALL_PREFIX/ree/bin:$PATH\"\n\n#
      Set up Nginx and Passenger\n  passenger-install-nginx-module --auto --auto-download
      --prefix=\"$INSTALL_PREFIX/nginx\"\n\n# Set up environment\n  # Global environment
      variables\n  cat > /etc/environment << EOF\nPATH=\"$PATH\"\nRAILS_ENV=\"$RR_ENV\"\nRACK_ENV=\"$RR_ENV\"\nEOF\n\n#
      Clean up\n  rm -rf \"$WORKING_DIR\""}, {"is_public": true, "username": "xenofox",
      "id": 165, "deployments_total": 213, "user_defined_fields": [], "updated": "2010-02-24T20:16:28",
      "label": "User Security", "created": "2010-02-24T18:17:59", "images": ["linode/debian5.032bit",
      "linode/debian5.064bit", "linode/ubuntu8.04lts32bit", "linode/ubuntu8.04lts64bit",
      "linode/ubuntu9.1032bit", "linode/ubuntu9.1064bit", "linode/debian4.0", "linode/debian4.064bit",
      "linode/ubuntu8.1032bit", "linode/ubuntu8.1064bit", "linode/ubuntu9.0432bit",
      "linode/ubuntu9.0464bit"], "user_gravatar_id": "ebf132362b622423ed5baca2988911b8",
      "description": "Configures a Node to a more Secure User Structure.\r\n* Updates
      the Debian/Ubuntu System to Newest Packages\r\n* Adds a standard user account\r\n*
      (Optionally) Restricts SSH to only Public Key Authorization\r\n* Disables root
      login via SSH\r\n* Disables SSH access to anyone not in sshusers group.\r\n*
      Installs & Configures Sudo to allow sudo access to the wheel group.\r\n\r\n-
      Note. Due to the Nature of this script, it can take a few minutes to complete.
      \r\n- This is a work in progress. All Current features are working. New Features
      are coming.", "rev_note": "authorized_keys now gets chmod and chown", "deployments_active":
      27, "script": "#!/bin/bash\n#\n# Security StackScript\n# By Donald von Stufft
      <donald.stufft@gmail.com>\n#\n# <udf name=\"user_name\" label=\"Unprivileged
      User Account\" />\n# <udf name=\"user_password\" label=\"Unprivileged User Password\"
      />\n# <udf name=\"user_sshkey\" label=\"Public Key for User\" default=\"\" />\n#\n#
      <udf name=\"sshd_port\" label=\"SSH Port\" default=\"22\" />\n# <udf name=\"sshd_protocol\"
      label=\"SSH Protocol\" oneOf=\"1,2,1 and 2\" default=\"2\" />\n# <udf name=\"sshd_permitroot\"
      label=\"SSH Permit Root Login\" oneof=\"No,Yes\" default=\"No\" />\n# <udf name=\"sshd_passwordauth\"
      label=\"SSH Password Authentication\" oneOf=\"No,Yes\" default=\"No\" />\n#
      <udf name=\"sshd_group\" label=\"SSH Allowed Groups\" default=\"sshusers\" example=\"List
      of groups seperated by spaces\" />\n#\n# <udf name=\"sudo_usergroup\" label=\"Usergroup
      to use for Admin Accounts\" default=\"wheel\" />\n# <udf name=\"sudo_passwordless\"
      label=\"Passwordless Sudo\" oneof=\"Require Password,Do Not Require Password\",
      default=\"Require Password\" />\n\nsource <ssinclude StackScriptID=\"1\">\n\n#
      Update the System\nsystem_update\n\n# Install and Configure Sudo\naptitude -y
      install sudo\n\ncp /etc/sudoers /etc/sudoers.tmp\nchmod 0640 /etc/sudoers.tmp\ntest
      \"${SUDO_PASSWORDLESS}\" == \"Do Not Require Password\" && (echo \"%`echo ${SUDO_USERGROUP}
      | tr ''[:upper:]'' ''[:lower:]''` ALL = NOPASSWD: ALL\" >> /etc/sudoers.tmp)\ntest
      \"${SUDO_PASSWORDLESS}\" == \"Require Password\" && (echo \"%`echo ${SUDO_USERGROUP}
      | tr ''[:upper:]'' ''[:lower:]''` ALL = (ALL) ALL\" >> /etc/sudoers.tmp)\nchmod
      0440 /etc/sudoers.tmp\nmv /etc/sudoers.tmp /etc/sudoers\n\n# Configure SSHD\necho
      \"Port ${SSHD_PORT}\" > /etc/ssh/sshd_config.tmp\necho \"Protocol ${SSHD_PROTOCOL}\"
      >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(HostKey .*\\)/\\1/p'' < /etc/ssh/sshd_config
      >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(UsePrivilegeSeparation .*\\)/\\1/p''
      < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(KeyRegenerationInterval
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(ServerKeyBits
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(SyslogFacility
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(LogLevel
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(LoginGraceTime
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\necho \"PermitRootLogin
      `echo ${SSHD_PERMITROOT} | tr ''[:upper:]'' ''[:lower:]''`\" >> /etc/ssh/sshd_config.tmp\nsed
      -n ''s/\\(StrictModes .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed
      -n ''s/\\(RSAAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed
      -n ''s/\\(PubkeyAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed
      -n ''s/\\(IgnoreRhosts .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed
      -n ''s/\\(RhostsRSAAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed
      -n ''s/\\(HostbasedAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed
      -n ''s/\\(PermitEmptyPasswords .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed
      -n ''s/\\(ChallengeResponseAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config
      >> /etc/ssh/sshd_config.tmp\n\necho \"PasswordAuthentication `echo ${SSHD_PASSWORDAUTH}
      | tr ''[:upper:]'' ''[:lower:]''`\" >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(X11Forwarding
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(X11DisplayOffset
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(PrintMotd
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(PrintLastLog
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(TCPKeepAlive
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(MaxStartups
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(AcceptEnv
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(Subsystem
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(UsePAM
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\necho \"AllowGroups
      `echo ${SSHD_GROUP} | tr ''[:upper:]'' ''[:lower:]''`\" >> /etc/ssh/sshd_config.tmp\n\nchmod
      0600 /etc/ssh/sshd_config.tmp\nmv /etc/ssh/sshd_config.tmp /etc/ssh/sshd_config\ntouch
      /tmp/restart-ssh\n\n# Create Groups\ngroupadd ${SSHD_GROUP}\ngroupadd ${SUDO_USERGROUP}\n\n#
      Create User & Add SSH Key\nUSER_NAME_LOWER=`echo ${USER_NAME} | tr ''[:upper:]''
      ''[:lower:]''`\n\nuseradd -m -s /bin/bash -G ${SSHD_GROUP},${SUDO_USERGROUP}
      ${USER_NAME_LOWER}\necho \"${USER_NAME_LOWER}:${USER_PASSWORD}\" | chpasswd\n\nUSER_HOME=`sed
      -n \"s/${USER_NAME_LOWER}:x:[0-9]*:[0-9]*:[^:]*:\\(.*\\):.*/\\1/p\" < /etc/passwd`\n\nsudo
      -u ${USER_NAME_LOWER} mkdir ${USER_HOME}/.ssh\necho \"${USER_SSHKEY}\" >> $USER_HOME/.ssh/authorized_keys\nchmod
      0600 $USER_HOME/.ssh/authorized_keys\nchown ${USER_NAME_LOWER}:${USER_NAME_LOWER}
      $USER_HOME/.ssh/authorized_keys\n\n# Setup Hostname\nget_rdns_primary_ip > /etc/hostname\n/etc/init.d/hostname.sh
      start\n\n# Restart Services\nrestartServices"}, {"is_public": true, "username":
      "henszey", "id": 167, "deployments_total": 59, "user_defined_fields": [{"label":
      "MySQL root Password", "name": "db_password"}, {"example": "Drupal database
      name", "label": "Create Database", "name": "db_name", "default": "pantheon"},
      {"example": "Drupal database user", "label": "Create MySQL User", "name": "db_user"},
      {"example": "Drupal database user''s password", "label": "MySQL User''s Password",
      "name": "db_user_password"}, {"example": "Optional fully qualified hostname,
      ie www.mydomain.com - if empty, the hostname will default to the one assigned
      by Linode.", "label": "Fully Qualified Domain Name", "name": "fqdn", "default":
      ""}, {"example": "Optional username to setup with password-less sudo access.  You
      must also add the ssh public key below.  This user is added as the first step,
      so you can ssh in before the script is finished.", "label": "Administrative
      User", "name": "admin_user", "default": ""}, {"example": "Optional SSH public
      key (from ~/.ssh/id_dsa.pub) to be associated with the Administrative User above.",
      "label": "Administrative User''s SSH Public Key", "name": "admin_pubkey", "default":
      ""}, {"example": "Email address to send notification to when finished.  Build
      time is just under 15 minutes.", "label": "Send Finish Notification To", "name":
      "notify_email"}], "updated": "2011-05-09T14:09:01", "label": "Drupal for RH
      Derivatives", "created": "2010-02-24T23:02:20", "images": ["linode/centos5.632bit",
      "linode/centos5.6"], "user_gravatar_id": "ff806e033c906e67bdd779bd20eb0a01",
      "description": "", "rev_note": "Install APC by default with 128M shared mem",
      "deployments_active": 6, "script": "#!/bin/bash                                                                        \n#
      <UDF name=\"db_password\" Label=\"MySQL root Password\" />\n# <UDF name=\"db_name\"
      Label=\"Create Database\" default=\"pantheon\" example=\"Drupal database name\"
      />\n# <UDF name=\"db_user\" Label=\"Create MySQL User\" example=\"Drupal database
      user\" />\n# <UDF name=\"db_user_password\" Label=\"MySQL User''s Password\"
      example=\"Drupal database user''s password\" />\n# <UDF name=\"fqdn\" Label=\"Fully
      Qualified Domain Name\" default=\"\" example=\"Optional fully qualified hostname,
      ie www.mydomain.com - if empty, the hostname will default to the one assigned
      by Linode.\" />\n# <UDF name=\"admin_user\" Label=\"Administrative User\" default=\"\"
      example=\"Optional username to setup with password-less sudo access.  You must
      also add the ssh public key below.  This user is added as the first step, so
      you can ssh in before the script is finished.\" />\n# <UDF name=\"admin_pubkey\"
      Label=\"Administrative User''s SSH Public Key\" default=\"\" example=\"Optional
      SSH public key (from ~/.ssh/id_dsa.pub) to be associated with the Administrative
      User above.\" />\n# <UDF name=\"notify_email\" Label=\"Send Finish Notification
      To\" example=\"Email address to send notification to when finished.  Build time
      is just under 15 minutes.\" />\n\n# StackScript written by Justin Ellison <justin@techadvise.com>\n\nsource
      <ssinclude StackScriptID=\"1\">\n\nfunction logit {\n    # Simple logging function
      that prepends an easy-to-find marker ''=> '' and a timestamp to a message\n    TIMESTAMP=$(date
      -u +''%m/%d %H:%M:%S'')\n    MSG=\"=> ${TIMESTAMP} $1\"\n    echo ${MSG}\n}\n\nfunction
      drush_install {\n \n    echo\n    logit \"Installing drush\"\n    apt-get -y
      install cvs git-core unzip curl php5-cli php5-gd \n    cd /tmp && cvs -z6 -d:pserver:anonymous:anonymous@cvs.drupal.org:/cvs/drupal-contrib
      checkout -d drush contributions/modules/drush\n    if [ ! -f /tmp/drush/drush
      ]; then\n        echo \"Could not checkout drush from cvs\"\n        exit 1                            \n    fi\n
      \n    cd /usr/local && /tmp/drush/drush -y dl drush \n    # drush changed dl
      behavior of itself.  Sometimes it dl''s to cwd, other times to ~/.drush/drush\n    if
      [ -d ~/.drush/drush ]; then\n        mv ~/.drush/drush .\n    fi\n    cd bin
      && ln -s ../drush/drush drush\n    if [ ! -x /usr/local/bin/drush ]; then\n        echo
      \"Could not install drush in /usr/local/bin\"\n        exit 1                    \n    fi\n
      \n    cd && rm -rf /tmp/drush\n    logit \"Done installing drush\"\n    \n    if
      [ $(echo \"$(get_branch) >= 1.1\" | /usr/bin/bc) -eq 1 ]; then\n      echo\n      logit
      \"Installing drush_make\"\n      /usr/local/bin/drush dl drush_make\n    fi\n    \n}\n\nfunction
      get_ubuntu_version {\n    VER=$(/usr/bin/lsb_release -rs)\n    echo ${VER}\n}\n\nfunction
      get_ubuntu_version_name {\n    NAME=$(/usr/bin/lsb_release -cs)\n    echo ${NAME}\n}\n\nfunction
      update_sources {\n    echo \n    logit \"Setting up apt sources and applying
      updates\"\n    REL_NAME=$(get_ubuntu_version_name)\n    apt-get -y install bc\n    if
      [ $(echo \"$(get_branch) >= 1.1\" | /usr/bin/bc) -eq 1 ]; then\n        # Some
      of Lucid''s recommended packages are Karmic-only, and this causes BCFG2 some
      grief\n        echo -e ''APT::Install-Recommends \"0\";\\nAPT::Cache-Limit \"100000000\";''
      >> /etc/apt/apt.conf\n        # Pin php to 5.2\n        /usr/bin/wget http://pantheon-storage.chapterthree.com/mercury.list.1.1
      -O /etc/apt/sources.list.d/mercury.list\n        /usr/bin/wget http://pantheon-storage.chapterthree.com/lucid
      -O /etc/apt/preferences.d/lucid\n    else\n        #Enable universe\n        sed
      -i ''s/^#\\(.*\\) universe/\\1 universe/'' /etc/apt/sources.list\n        #Add
      bzr and bcfg2 ppa''s\n        cat <<EOD > /etc/apt/sources.list.d/bzr.list\ndeb
      http://ppa.launchpad.net/bzr/ppa/ubuntu ${REL_NAME} main\ndeb-src http://ppa.launchpad.net/bzr/ppa/ubuntu
      ${REL_NAME} main\nEOD\n        cat <<EOD > /etc/apt/sources.list.d/bcfg2.list\ndeb
      http://ppa.launchpad.net/bcfg2/ppa/ubuntu ${REL_NAME} main\ndeb-src http://ppa.launchpad.net/bcfg2/ppa/ubuntu
      ${REL_NAME} main\nEOD\n    fi\n    \n    apt-get install wget\n    /usr/bin/wget
      -O /tmp/keys.txt http://pantheon-storage.chapterthree.com/gpgkeys.txt\n    apt-key
      add /tmp/keys.txt\n    apt-get -y update\n    apt-get -y upgrade\n    apt-get
      -y dist-upgrade\n    \n    VER=$(get_ubuntu_version)\n    if [ $(echo \"${VER}
      < 10.04\" | /usr/bin/bc) -eq 1 ]; then\n        # NOTE: When bcfg2 installs
      memcached, apt starts the service using the default config - a single instance.\n        #
      After bcfg2 reconfigures memcached to use multiple instances, the original single
      instance''s pid is lost, and causes issues.\n        # We pre-install it, then
      stop it so that bcfg2 simply starts it when done configuring it\n        apt-get
      -y install memcached language-pack-en-base \n        dpkg-reconfigure locales\n        /etc/init.d/memcached
      stop\n    fi\n    logit \"Done setting up apt sources and applying updates\"\n}\n\nfunction
      setup_BCFG2 {\n    echo\n    logit \"Setting up BCFG2\"\n    apt-get -y install
      bzr bcfg2-server gamin python-gamin python-genshi\n    BCFG_FQDN=localhost\n    REL_NAME=$(get_ubuntu_version_name)\n    cat
      <<EOD > /etc/bcfg2.conf\n[server]\nrepository = /var/lib/bcfg2\nplugins = Bundler,Cfg,Metadata,Packages,Probes,Rules,TGenshi\nfilemonitor
      = gamin\n\n[statistics]\nsendmailpath = /usr/lib/sendmail\ndatabase_engine =
      sqlite3\n# ''postgresql'', ''mysql'', ''mysql_old'', ''sqlite3'' or ''ado_mssql''.\ndatabase_name
      =\n# Or path to database file if using sqlite3.\n#<repository>/etc/brpt.sqlite
      is default path if left empty\ndatabase_user =\n# Not used with sqlite3.\ndatabase_password
      =\n# Not used with sqlite3.\ndatabase_host =\n# Not used with sqlite3.\ndatabase_port
      =\n# Set to empty string for default. Not used with sqlite3.\nweb_debug = True\n\n[communication]\nprotocol
      = xmlrpc/ssl\npassword = foobat\ncertificate = /etc/bcfg2.crt\nkey = /etc/bcfg2.key\nca
      = /etc/bcfg2.crt\n\n[components]\nbcfg2 = https://${BCFG_FQDN}:6789\nEOD\n    openssl
      req -batch -x509 -nodes -subj \"/C=US/ST=Illinois/L=Argonne/CN=${BCFG_FQDN}\"
      -days 1000 -newkey rsa:2048 -keyout /etc/bcfg2.key -noout\n    openssl req -batch
      -new  -subj \"/C=US/ST=Illinois/L=Argonne/CN=${BCFG_FQDN}\" -key /etc/bcfg2.key
      | openssl x509 -req -days 1000 -signkey /etc/bcfg2.key -out /etc/bcfg2.crt\n    chmod
      0600 /etc/bcfg2.key\n    \n    rm -rf /var/lib/bcfg2/\n        \n    bzr branch
      lp:pantheon/$(get_branch) /var/lib/bcfg2\n    if [ $(echo \"$(get_branch) <
      1.1\" | /usr/bin/bc) -eq 1 ]; then\n      if [ -n \"$(grep ''ubuntu-vps'' /var/lib/bcfg2/Metadata/groups.xml)\"
      ]; then\n          PROFILE=\"mercury-ubuntu-vps\"\n      else \n          PROFILE=\"mercury-ubuntu-${REL_NAME}-32\"\n          sed
      -i \"s/jaunty/${REL_NAME}/\" /var/lib/bcfg2/Packages/config.xml\n          sed
      -i \"s/^    <Group name=''amazon-web-services''\\/>/    <Group name=''rackspace''\\/>/\"
      /var/lib/bcfg2/Metadata/groups.xml\n          sed -i \"s/^    <Group name=''ubuntu-jaunty''\\/>/    <Group
      name=''ubuntu-${REL_NAME}''\\/>/\" /var/lib/bcfg2/Metadata/groups.xml\n      fi\n      cat
      <<EOD > /var/lib/bcfg2/Metadata/clients.xml\n<Clients version=\"3.0\">\n   <Client
      profile=\"${PROFILE}\" pingable=\"Y\" pingtime=\"0\" name=\"${BCFG_FQDN}\"/>\n</Clients>
      \nEOD\n    else\n      cat <<EOD > /var/lib/bcfg2/Metadata/clients.xml\n<Clients
      version=\"3.0\">\n</Clients> \nEOD\n    fi\n    \n    logit \"Done setting up
      BCFG2\"\n}\n\nfunction start_BCFG2 {\n    echo\n    logit \"Starting BCFG2 server\"\n    rm
      -rf /var/www\n    /etc/init.d/bcfg2-server start\n    echo \"Waiting for BCFG2
      to start...\"\n    while [ -z \"$(netstat -atn | grep :6789)\" ]; do\n      sleep
      5\n    done\n    logit \"Done starting BCFG2 server\"\n    echo\n    logit \"Running
      BCFG2 client\"\n    bcfg2 -vqed\n    logit \"Done running BCFG2 client\"\n}\n    \nfunction
      install_pressflow {\n    echo\n    logit \"Installing pressflow\"\n    if [
      $(echo \"$(get_branch) < 1.1\" | /usr/bin/bc) -eq 1 ]; then\n      bzr branch
      --use-existing-dir lp:pressflow /var/www\n      mkdir /var/www/sites/all/modules\n      for
      mod in memcache-6.x-1.x-dev varnish; do\n          /usr/local/bin/drush dl --destination=/var/www/sites/all/modules
      ${mod}\n      done\n      chmod -R 775 /var/www/sites\n      chmod 755 /var/www/sites/all/modules/\n    fi\n    mkdir
      /var/www/sites/default/files  \n    cp /var/www/sites/default/default.settings.php
      /var/www/sites/default/settings.php\n    chown -R root:www-data /var/www/*\n    chown
      www-data:www-data /var/www/sites/default/settings.php\n    chmod 660 /var/www/sites/default/settings.php\n    chmod
      775 /var/www/sites/default/files    \n\t\n    # Linode''s mysql_create_database
      function doesn''t escape properly, so we use mysqladmin instead\n    /usr/bin/mysqladmin
      create -u root -p\"${DB_PASSWORD}\" \"${DB_NAME}\"\n    mysql_create_user \"$DB_PASSWORD\"
      \"$DB_USER\" \"$DB_USER_PASSWORD\"\n    mysql_grant_user \"$DB_PASSWORD\" \"$DB_USER\"
      \"$DB_NAME\"          \n    sed -i \"/^$db_url/s/mysql\\:\\/\\/username:password/mysqli\\:\\/\\/$DB_USER:$DB_USER_PASSWORD/\"
      /var/www/sites/default/settings.php                                                              \n    sed
      -i \"/^$db_url/s/databasename/$DB_NAME/\" /var/www/sites/default/settings.php               \n    logit
      \"Done installing pressflow\"\n}\n\nfunction install_mercury_profile {\n    echo\n    logit
      \"Installing Mercury Drupal Profile\"\n    if [ $(echo \"$(get_branch) >= 1.1\"
      | /usr/bin/bc) -eq 1 ]; then\n        rm -rf /var/www\n    \tdrush make --working-copy
      /etc/mercury/mercury.make /var/www/\n    else\n        bzr --use-existing-dir
      branch lp:pantheon/profiles /var/www/profiles/\n    fi\n    logit \"Done installing
      Mercury Drupal Profile\"\n}\n\nfunction install_solr {\n    logit \"Installing
      Solr\"\n    SOLR_TGZ=''http://apache.inetbridge.net/lucene/solr/1.4.0/apache-solr-1.4.0.tgz''\n    apt-get
      -y install tomcat6\n    wget \"${SOLR_TGZ}\" -O /var/tmp/solr.tgz\n    cd /var/tmp/\n    tar
      -xzf solr.tgz\n    if [ $(echo \"$(get_branch) >= 1.1\" | /usr/bin/bc) -eq 1
      ]; then\n    \tmkdir /var/solr\n        mv apache-solr-1.4.0/example/solr /var/solr/default\n    else\n        mv
      apache-solr-1.4.0/example/solr /var/\n    fi\n    mv apache-solr-1.4.0/dist/apache-solr-1.4.0.war
      /var/solr/solr.war\n    chown -R tomcat6:root /var/solr/\n    VER=$(get_ubuntu_version)\n    if
      [ $(echo \"${VER} < 10.04\" | /usr/bin/bc) -eq 1 ]; then\n        # Workaround
      for bug reported here: http://colabti.org/irclogger/irclogger_log/bcfg2?date=2010-04-01#l29\n        #
      Since bcfg2 hangs when starting jsvc, we pre-install and configure everything
      tomcat, so bcfg2 doesn''t attempt to reconfig and restart it.\n        apt-get
      -y install ca-certificates-java default-jre-headless gcj-4.3-base icedtea-6-jre-cacao
      java-common \\\n          libaccess-bridge-java libcommons-collections-java
      libcommons-dbcp-java libcommons-pool-java libcups2 \\\n          libecj-java
      libecj-java-gcj libgcj9-0 libgcj9-jar libgcj-bc libgcj-common liblcms1 libservlet2.5-java
      \\\n          rhino tomcat6 tzdata-java\n        cp /var/lib/bcfg2/Cfg/etc/default/tomcat6/tomcat6
      /etc/default/tomcat6\n        chown -R root:tomcat6 /etc/tomcat6/Catalina\n        cp
      /var/lib/bcfg2/Cfg/etc/tomcat6/Catalina/localhost/solr.xml/solr.xml /etc/tomcat6/Catalina/localhost/solr.xml\n        if
      [ -e /var/lib/bcfg2/TGenshi/etc/tomcat6/server.xml/template.newtxt ]; then\n            #
      \"New\" way of firing probes instead of running config_mem.sh\n            THREADS=$(bash
      /var/lib/bcfg2/Probes/set_tomcat_max_threads)\n            cp /var/lib/bcfg2/TGenshi/etc/tomcat6/server.xml/template.newtxt
      /etc/tomcat6/server.xml\n            sed -i \"s/\\${metadata.Probes\\[''set_tomcat_max_threads''\\]}/${THREADS}/\"
      /etc/tomcat6/server.xml\n        else\n            cp /var/lib/bcfg2/Cfg/etc/tomcat6/server.xml/server.xml
      /etc/tomcat6/server.xml\n        fi\n        /etc/init.d/tomcat6 restart\n    fi\n    logit
      \"Done installing Solr\"\n}\n\nfunction install_solr_module {\n    echo\n    logit
      \"Installing Solr Drupal module\"\n    if [ $(echo \"$(get_branch) < 1.1\" |
      /usr/bin/bc) -eq 1 ]; then\n      drush dl --destination=/var/www/sites/all/modules
      apachesolr\n      /usr/bin/wget http://solr-php-client.googlecode.com/files/SolrPhpClient.r22.2009-11-09.tgz
      -O /tmp/SolrPhpClient.tgz\n      tar -xvzf /tmp/SolrPhpClient.tgz -C /var/www/sites/all/modules/apachesolr/\n      CONFPATH=/var/solr/conf/\n    else\n      CONFPATH=/var/solr/default/conf/\n    fi\n    mv
      /var/www/sites/all/modules/apachesolr/schema.xml ${CONFPATH}\n    mv /var/www/sites/all/modules/apachesolr/solrconfig.xml
      ${CONFPATH}\n    logit \"Done installing Solr Drupal module\"\n}\n\nfunction
      init_mercury {\n    echo\n    logit \"Initializing Mercury\"\n    hostname $(get_rdns_primary_ip)
      \n    \n    if [ -n \"$(grep netstat /etc/mercury/init.sh)\" ]; then\n        #
      The changes we need to be there are present, we can just call init.sh\n        /etc/mercury/init.sh\n    elif
      [ -n \"$(grep headless /etc/mercury/init.sh)\" ]; then\n        MYSQL_ROOT_PASSWORD=\"${DB_PASSWORD}\"
      /etc/mercury/init.sh --headless\n    else\n        # We need to manually run
      some of this\n        echo `date` > /etc/mercury/incep\n        ID=`hostname
      -f | md5sum | sed ''s/[^a-zA-Z0-9]//g''`\n        /etc/mercury/config_mem.sh\n        curl
      \"http://getpantheon.com/pantheon.php?id=$ID&product=mercury\"\n    fi\n    logit
      \"Done initializing Mercury\"\n}\n\nfunction get_branch {\n\tREL_NAME=$(get_ubuntu_version_name)\n    if
      [ \"${REL_NAME}\" == \"lucid\" ]; then\n        echo \"1.1\"\n    else\n        echo
      \"1.0\"\n    fi\n}\n\nfunction prepare_hudson {\n    logit \"Configuring hudson\"\n    sed
      -i \"s/=8080/=8081/\" /etc/default/hudson\n    sed -i ''s/HUDSON_ARGS=\"\\(.*\\)\"/HUDSON_ARGS=\"\\1
      --httpListenAddress=localhost\"/'' /etc/default/hudson\n    echo \"hudson ALL
      = NOPASSWD: /usr/local/bin/drush, /etc/mercury/init.sh, /usr/bin/fab, /usr/sbin/bcfg2\"
      >> /etc/sudoers\n    usermod -a -G shadow hudson\n    logit \"Done configuring
      hudson\"\n}\n\nfunction set_fqdn {\n    logit \"Setting FQDN to $1\"\n    FQDN=$1\n    HOSTNAME=`echo
      \"${FQDN}\" | cut -d''.'' -f1`\n    DOMAINNAME=`echo \"${FQDN}\" | cut -d''.''
      -f2-`\n    logit \"Hostname is ${HOSTNAME}, domain name is ${DOMAINNAME}\"\n    echo
      \"${HOSTNAME}\" > /etc/hostname\n    sed -i \"s/domain .*/domain ${DOMAINNAME}/\"
      /etc/resolv.conf\n    sed -i \"s/search .*/search ${DOMAINNAME}/\" /etc/resolv.conf\n    hostname
      ${HOSTNAME}\n    logit \"Done setting FQDN to $1\"\n}\n\nfunction add_admin_user
      {\n    USER=$1\n    PUBKEY=$2\n    logit \"Adding admin user ''${USER}''\"\n    useradd
      -m -G sudo ${USER}\n    mkdir -p /home/${USER}/.ssh/\n    echo \"${PUBKEY}\"
      > /home/${USER}/.ssh/authorized_keys\n    chown ${USER}:${USER} /home/${USER}/.ssh/authorized_keys\n    chmod
      600 /home/${USER}/.ssh/authorized_keys\n    cat <<EOD >> /etc/sudoers\n# Added
      by Linode Mercury Stackscript\n%sudo ALL=NOPASSWD: ALL\nEOD\n    logit \"Done
      adding admin user ''${USER}''\"\n}\n\n#Log everything to a file\nexec &> /root/stackscript.log\n\nif
      [ -n \"${ADMIN_USER}\" ]; then\n    if [ -n \"${ADMIN_PUBKEY}\" ]; then\n        add_admin_user
      \"${ADMIN_USER}\" \"${ADMIN_PUBKEY}\"\n    fi\nfi\n\nif [ -n \"${FQDN}\" ];
      then\n    set_fqdn ${FQDN}\nfi\n\nlogit \"StackScript running on `get_ubuntu_version_name`
      against Mercury `get_branch`\"\nupdate_sources\nlogit \"Installing and configuring
      Postfix\"\npostfix_install_loopback_only\nlogit \"Done installing and configuring
      Postfix\"\necho \"mysql-server-5.1 mysql-server/root_password password ${DB_PASSWORD}\"
      | debconf-set-selections\necho \"mysql-server-5.1 mysql-server/root_password_again
      password ${DB_PASSWORD}\" | debconf-set-selections\nsetup_BCFG2\n#Tomcat looks
      for solr.war when starting, so we do solr before bcfg2\ninstall_solr\nstart_BCFG2\ndrush_install\nif
      [ $(echo \"$(get_branch) >= 1.1\" | /usr/bin/bc) -eq 1 ]; then\n  install_mercury_profile\nfi\ninstall_pressflow\ninstall_solr_module
      \nprepare_hudson\n\n# Do we need to pull a separate mercury profile from launchpad?\nif
      [ ! -e /var/lib/bcfg2/Cfg/var/www/profiles/mercury/mercury.profile ]; then\n  if
      [ $(echo \"$(get_branch) < 1.1\" | /usr/bin/bc) -eq 1 ]; then\n    install_mercury_profile\n  fi\nfi\n\ninit_mercury\necho\nlogit
      \"Restarting services\"\nrestartServices\nlogit \"Done restarting services\"\n\nif
      [ -n \"${NOTIFY_EMAIL}\" ]; then\n    logit \"Sending notification email to
      ${NOTIFY_EMAIL}\"\n    /usr/sbin/sendmail \"${NOTIFY_EMAIL}\" <<EOD\nTo: ${NOTIFY_EMAIL}\nSubject:
      Mercury StackScript is complete\nFrom: Mercury StackScript <no-reply@linode.com>\n\nYour
      Mercury installation is complete and now ready to be configured: http://$(system_primary_ip)/install.php  Select
      \"Mercury\" as your installation profile, and continue as you normally would.\n\nEnjoy
      the speed of Mercury!\nEOD\nfi"}, {"is_public": true, "username": "aaronlevy",
      "id": 169, "deployments_total": 150, "user_defined_fields": [{"label": "MySQL
      root Password", "name": "db_password"}, {"example": "Drupal database name",
      "label": "Create Database", "name": "db_name", "default": "drupal"}, {"example":
      "Drupal database user", "label": "Create MySQL User", "name": "db_user", "default":
      "drupal"}, {"example": "Optionally Drupal database user''s password", "label":
      "MySQL User''s Password", "name": "db_user_password", "default": ""}], "updated":
      "2010-05-11T03:59:45", "label": "Open Atrium", "created": "2010-02-25T03:05:45",
      "images": ["linode/debian5.032bit", "linode/debian5.064bit", "linode/ubuntu10.04lts32bit",
      "linode/ubuntu10.04lts", "linode/ubuntu9.1032bit", "linode/ubuntu9.1064bit",
      "linode/ubuntu8.04lts32bit", "linode/ubuntu8.04lts64bit"], "user_gravatar_id":
      "a989a24b39d55b00ede86a20f9496d45", "description": "Installs Open Atrium, an
      intranet in a box that has group spaces to allow different teams to have their
      own conversations. It comes with six features - a blog, a wiki, a calendar,
      a to do list, a shoutbox, and a dashboard to manage it all. \r\n\r\nAfter StackScript
      finishes, navigate to www.yoursite.com/install.php to complete the installation.",
      "rev_note": "Initial import", "deployments_active": 19, "script": "#!/bin/bash\n#
      <UDF name=\"db_password\" Label=\"MySQL root Password\" />\n# <UDF name=\"db_name\"
      Label=\"Create Database\" default=\"drupal\" example=\"Drupal database name\"
      />\n# <UDF name=\"db_user\" Label=\"Create MySQL User\" default=\"drupal\" example=\"Drupal
      database user\" />\n# <UDF name=\"db_user_password\" Label=\"MySQL User''s Password\"
      default=\"\" example=\"Optionally Drupal database user''s password\" />\n\n\nsource
      <ssinclude StackScriptID=\"1\">\n\n# a few more tools we need\nfunction moregoodstuff
      {\n\n    aptitude -y install php5-cli php5-gd cvs git-core unzip\n}\n\n# install
      drush and drush make\nfunction drush_install {\n  echo \"Installing drush\"\n  cd
      /tmp && cvs -z6 -d:pserver:anonymous:anonymous@cvs.drupal.org:/cvs/drupal-contrib
      checkout -d drush contributions/modules/drush\n  if [ ! -f /tmp/drush/drush
      ]; then\n    echo \"Could not checkout drush from cvs\"\n    exit 1                           \n  fi\n\n  cd
      /usr/local && /tmp/drush/drush dl drush\n  # drush changed dl behavior of itself.  Sometimes
      it dl''s to cwd, other times to ~/.drush/drush\n  if [ -d ~/.drush/drush ];
      then\n    mv ~/.drush/drush .\n  fi\n  cd bin && ln -s ../drush/drush drush\n  if
      [ ! -x /usr/local/bin/drush ]; then\n    echo \"Could not install drush in /usr/local/bin\"\n    exit
      1                   \n  fi\n  \n  echo \"Installing Drush Make\"\n  cd ~\n  drush
      dl drush_make\n\n  cd && rm -rf /tmp/drush\n  echo \"Done installing drush\"\n}\n\n#
      openatrium stub file for drush make\nfunction make_stub {\n\ncd /tmp\ncat >
      atrium_stub.make <<the_stub\ncore = \"6.x\"\nprojects[] = \"drupal\"\nprojects[openatrium][type]
      = \"profile\"\nprojects[openatrium][download][type] = \"cvs\"\nprojects[openatrium][download][module]
      = \"contributions/profiles/openatrium\"\nprojects[openatrium][download][revision]
      = \"HEAD\"\nthe_stub\n}\n\nfunction openatrium_install {\n \n    VPATH=$(apache_virtualhost_get_docroot
      $1)\n    if [ ! -n \"$VPATH\" ]; then\n        echo \"Could not determine DocumentRoot
      for $1\"\n        return 1;                                    \n    fi\n    \n    #
      remove public_html because it will be recreated during drush_make\n    cd $VPATH
      && cd .. && rm -r public_html\n    \n    # make openatrium\n    make_stub\n    if
      [ ! -f /tmp/atrium_stub.make ]; then\n        echo \"Could not create make stub\"\n        exit
      1\n    fi\n    /usr/local/bin/drush make /tmp/atrium_stub.make $VPATH\n\n    #
      database configuration\n    if [ ! -n \"$DB_USER_PASSWORD\" ]; then\n        DB_USER_PASSWORD=$(randomString
      20)\n    fi\n    mysql_create_database \"$DB_PASSWORD\" \"$DB_NAME\"\n    mysql_create_user
      \"$DB_PASSWORD\" \"$DB_USER\" \"$DB_USER_PASSWORD\"\n    mysql_grant_user \"$DB_PASSWORD\"
      \"$DB_USER\" \"$DB_NAME\"\n\n    # settings.php\n    cd $VPATH\n    cp sites/default/default.settings.php
      sites/default/settings.php\n    chown -R www-data: .\n    chmod 600 sites/default/settings.php
      \n    sed -i \"/^$db_url/s/mysql\\:\\/\\/username:password/mysql\\:\\/\\/$DB_USER:$DB_USER_PASSWORD/\"
      sites/default/settings.php\n    sed -i \"/^$db_url/s/databasename/$DB_NAME/\"
      sites/default/settings.php\n\n    # increase php memory limit to 96MB\n    sed
      -i ''s/memory_limit = .*/memory_limit = 96M/'' /etc/php5/apache2/php.ini\n\n    #
      setup crontab and clean-urls\n    echo \"0 * * * * /usr/local/bin/drush -r $VPATH
      cron >/dev/null\" | crontab - \n    a2enmod rewrite        \n    touch /tmp/restart-apache2\n
      \n}\n\n \nsystem_update\npostfix_install_loopback_only\nmysql_install \"$DB_PASSWORD\"
      && mysql_tune 40\nphp_install_with_apache && php_tune\ngoodstuff\nmoregoodstuff\ndrush_install\napache_install
      && apache_tune 40 && apache_virtualhost_from_rdns\nopenatrium_install $(get_rdns_primary_ip)\nrestartServices"},
      {"is_public": true, "username": "lillq", "id": 207, "deployments_total": 1152,
      "user_defined_fields": [{"label": "MySQL root Password", "name": "db_password"},
      {"example": "Optionally create this database", "label": "Create Database", "name":
      "db_name", "default": ""}, {"example": "Optionally create this user", "label":
      "Create MySQL User", "name": "db_user", "default": ""}, {"example": "User''s
      password", "label": "MySQL User''s Password", "name": "db_user_password", "default":
      ""}, {"oneof": "yes,no", "label": "Install PHP", "name": "php_install"}, {"example":
      "These are downloaded from ftp://ftp.ruby-lang.org", "oneof": "ruby-1.9.1-p376,ruby-1.9.0-0,ruby-1.9.0-1,ruby-1.9.0-2,ruby-1.9.0-3,ruby-1.9.0-4,ruby-1.9.0-5,ruby-1.9.1-p0,ruby-1.9.1-p129,ruby-1.9.1-p243,ruby-1.9.1-p376,ruby-1.9.1-p378,ruby-1.9.1-preview1,ruby-1.9.1-preview2,ruby-1.9.1-rc1,ruby-1.9.1-rc2,ruby-1.9.2-preview1,ruby-1.9.2-preview3,ruby-1.9.2-rc1,ruby-1.9.2-rc2,ruby-1.8.0,ruby-1.8.5-p11-repack,ruby-1.8.5-p11,ruby-1.8.5-p113,ruby-1.8.5-p114,ruby-1.8.5-p115,ruby-1.8.5-p12,ruby-1.8.5-p2,ruby-1.8.5-p231,ruby-1.8.5-p35,ruby-1.8.5-p52,ruby-1.8.5,ruby-1.8.6-p110,ruby-1.8.6-p111,ruby-1.8.6-p114,ruby-1.8.6-p230,ruby-1.8.6-p286,ruby-1.8.6-p287,ruby-1.8.6-p36,ruby-1.8.6-p368,ruby-1.8.6-p369,ruby-1.8.6-p383,ruby-1.8.6-p388,ruby-1.8.6-p398,ruby-1.8.6-p399,ruby-1.8.6,ruby-1.8.7-p160,ruby-1.8.7-p17,ruby-1.8.7-p173,ruby-1.8.7-p174,ruby-1.8.7-p22,ruby-1.8.7-p248,ruby-1.8.7-p249,ruby-1.8.7-p71,ruby-1.8.7-p72,ruby-1.8.7-preview1,ruby-1.8.7-preview2,ruby-1.8.7-preview3,ruby-1.8.7-preview4,ruby-1.8.7",
      "label": "Choose Ruby Version", "name": "ruby_version"}, {"example": "Each selected
      gem will be installed.", "manyof": "rails,mysql,passenger,sqlite3-ruby,rspec,rcov,capistrano",
      "label": "Gems to install", "name": "gems_to_install1", "default": "rails,mysql,passenger"},
      {"example": "Comma separated inputs to gem install. Example: rails,nifty-generators,formtastic,...
      Add the -v if you need a specific version.", "label": "More gems to install",
      "name": "gems_to_install2", "default": ""}], "updated": "2010-07-14T23:54:42",
      "label": "Apache, MySQL, Ruby Setup", "created": "2010-03-03T02:47:50", "images":
      ["linode/debian5.032bit", "linode/debian5.064bit", "linode/ubuntu10.04lts32bit",
      "linode/ubuntu10.04lts", "linode/ubuntu9.1032bit", "linode/ubuntu9.1064bit",
      "linode/ubuntu8.04lts32bit", "linode/ubuntu8.04lts64bit"], "user_gravatar_id":
      "0e8a60c4cc75f79bac72dd39f1ed9da3", "description": "Installs a fully functioning,
      ready to go stack that''s optimized specifically for your Linode''s resources.
      By default, it creates a VirtualHost using the reverse DNS of your Linode''s
      primary IP.\r\n\r\nThis installs a stack based on Ruby, Apache, and MySQL. This
      also gives you the options to install gems so that you can be up and running
      Ruby on Rails in no time.\r\n\r\nOptionally creates a MySQL database and user,
      and assigns that user grants to the database.\r\n\r\nYou may use this as an
      example for creating more VirtualHosts. Set up VirtualHosts, install your sites,
      point your domains to your Linode, and you''re set!\r\n\r\nThis script downloads
      and compiles the source from Ruby''s ftp. Along with Ruby, the latest version
      of ruby gems is installed and you have a choice of initial gems to install.
      Rails and passenger can be used to have a ready to go Rails server. Once this
      script has finished be sure to run ''passenger-install-apache2-module'' to complete
      the passenger install.\r\n\r\nNote that this script may take 1.5 - 2 hrs depending
      on the gems that are specified.\r\n\r\nAll details of this stack script are
      logged to /root/log.txt and the stack script is finish when the line \"StackScript
      Finished!\" is written to the log file.\r\n", "rev_note": "Production ready
      v1.0.4 - added 1.9.2 preveiwe3, rc1 and rc2", "deployments_active": 315, "script":
      "#!/bin/bash\n\nsource <ssinclude StackScriptID=\"1\">\n\n# <UDF name=\"db_password\"
      Label=\"MySQL root Password\" />\n# <UDF name=\"db_name\" Label=\"Create Database\"
      default=\"\" example=\"Optionally create this database\" />\n# <UDF name=\"db_user\"
      Label=\"Create MySQL User\" default=\"\" example=\"Optionally create this user\"
      />\n# <UDF name=\"db_user_password\" Label=\"MySQL User''s Password\" default=\"\"
      example=\"User''s password\" />\n\n# <udf name=\"php_install\" label=\"Install
      PHP\" oneOf=\"yes,no\" />\n# <udf name=\"ruby_version\" label=\"Choose Ruby
      Version\" oneOf=\"ruby-1.9.1-p376,ruby-1.9.0-0,ruby-1.9.0-1,ruby-1.9.0-2,ruby-1.9.0-3,ruby-1.9.0-4,ruby-1.9.0-5,ruby-1.9.1-p0,ruby-1.9.1-p129,ruby-1.9.1-p243,ruby-1.9.1-p376,ruby-1.9.1-p378,ruby-1.9.1-preview1,ruby-1.9.1-preview2,ruby-1.9.1-rc1,ruby-1.9.1-rc2,ruby-1.9.2-preview1,ruby-1.9.2-preview3,ruby-1.9.2-rc1,ruby-1.9.2-rc2,ruby-1.8.0,ruby-1.8.5-p11-repack,ruby-1.8.5-p11,ruby-1.8.5-p113,ruby-1.8.5-p114,ruby-1.8.5-p115,ruby-1.8.5-p12,ruby-1.8.5-p2,ruby-1.8.5-p231,ruby-1.8.5-p35,ruby-1.8.5-p52,ruby-1.8.5,ruby-1.8.6-p110,ruby-1.8.6-p111,ruby-1.8.6-p114,ruby-1.8.6-p230,ruby-1.8.6-p286,ruby-1.8.6-p287,ruby-1.8.6-p36,ruby-1.8.6-p368,ruby-1.8.6-p369,ruby-1.8.6-p383,ruby-1.8.6-p388,ruby-1.8.6-p398,ruby-1.8.6-p399,ruby-1.8.6,ruby-1.8.7-p160,ruby-1.8.7-p17,ruby-1.8.7-p173,ruby-1.8.7-p174,ruby-1.8.7-p22,ruby-1.8.7-p248,ruby-1.8.7-p249,ruby-1.8.7-p71,ruby-1.8.7-p72,ruby-1.8.7-preview1,ruby-1.8.7-preview2,ruby-1.8.7-preview3,ruby-1.8.7-preview4,ruby-1.8.7\"
      example=\"These are downloaded from ftp://ftp.ruby-lang.org\" />\n# <udf name=\"gems_to_install1\"
      label=\"Gems to install\" manyOf=\"rails,mysql,passenger,sqlite3-ruby,rspec,rcov,capistrano\"
      default=\"rails,mysql,passenger\" example=\"Each selected gem will be installed.\"
      />\n# <udf name=\"gems_to_install2\" label=\"More gems to install\" default=\"\"
      example=\"Comma separated inputs to gem install. Example: rails,nifty-generators,formtastic,...
      Add the -v if you need a specific version.\" />\n\nlogfile=\"/root/log.txt\"\nrubyscript=\"/root/ruby_script_to_run.rb\"
      \n# This script is generated and run after gem is installed to\n# install the
      list of gems given by the stack script.\"\n\nexport logfile\nexport gems_to_install1=\"$GEMS_TO_INSTALL1\"\nexport
      gems_to_install2=\"$GEMS_TO_INSTALL2\"\n# exported to be available in ruby_script_to_run.rb\n\nsystem_update\necho
      \"System Updated\" >> $logfile\npostfix_install_loopback_only\necho \"postfix_install_loopback_only\"
      >> $logfile\nmysql_install \"$DB_PASSWORD\" && mysql_tune 40\necho \"Mysql installed\"
      >> $logfile\nmysql_create_database \"$DB_PASSWORD\" \"$DB_NAME\"\nmysql_create_user
      \"$DB_PASSWORD\" \"$DB_USER\" \"$DB_USER_PASSWORD\"\nmysql_grant_user \"$DB_PASSWORD\"
      \"$DB_USER\" \"$DB_NAME\"\n\nif [[ $PHP_INSTALL == yes ]]\nthen\n  php_install_with_apache
      && php_tune\n  echo \"Php installed\" >> $logfile\nfi\n\napache_install && apache_tune
      40 && apache_virtualhost_from_rdns\necho \"apache installed\" >> $logfile\ngoodstuff\necho
      \"goodstuff installed\" >> $logfile\n\n#installing ruby\napt-get -y install
      build-essential libssl-dev libreadline5-dev zlib1g-dev\necho \"libs for ruby
      installed\" >> $logfile\necho \"$RUBY_VERSION.tar.gz\" >> $logfile\necho \"$RUBY_VERSION\"
      >> $logfile\n\necho \"\" >> $logfile\nif [[ $RUBY_VERSION == ruby\\-1\\.9* ]]\nthen\n\techo
      \"Downloadin: (from calling wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/$RUBY_VERSION.tar.gz)\"
      >> $logfile\necho \"\" >> $logfile\n\twget ftp://ftp.ruby-lang.org/pub/ruby/1.9/$RUBY_VERSION.tar.gz  >>
      $logfile\nelse\n\techo \"Downloadin: (from calling wget ftp://ftp.ruby-lang.org/pub/ruby/1.8/$RUBY_VERSION.tar.gz)\"
      >> $logfile\necho \"\" >> $logfile\n\twget ftp://ftp.ruby-lang.org/pub/ruby/1.8/$RUBY_VERSION.tar.gz  >>
      $logfile\nfi\n\necho \"\"\necho \"tar output:\"\ntar xzf $RUBY_VERSION.tar.gz
      >> $logfile\nrm $RUBY_VERSION.tar.gz\ncd $RUBY_VERSION\n\necho \"\"\necho \"current
      directory:\"\npwd >> $logfile\n\necho \"\" >> $logfile\necho \"Ruby Configuration
      output: (from calling ./configure --disable-ucontext --enable-pthread)\" >>
      $logfile\necho \"\" >> $logfile\n./configure --disable-ucontext --enable-pthread
      >> $logfile\n\necho \"\" >> $logfile\necho \"Ruby make output: (from calling
      make)\" >> $logfile\necho \"\" >> $logfile\nmake >> $logfile\n\necho \"\" >>
      $logfile\necho \"Ruby make install output: (from calling make install)\" >>
      $logfile\necho \"\" >> $logfile\nmake install >> $logfile\ncd /\nrm -rf $RUBY_VERSION\n\necho
      \"\" >> $logfile\necho \"Downloading Ruby Gems with wget http://rubyforge.org/frs/download.php/69365/rubygems-1.3.6.tgz\"
      >> $logfile\necho \"\" >> $logfile\nwget http://rubyforge.org/frs/download.php/69365/rubygems-1.3.6.tgz
      >> $logfile\n\necho \"\"\necho \"tar output:\"\ntar xzvf rubygems-1.3.6.tgz  >>
      $logfile\nrm rubygems-1.3.6.tgz\n\necho \"\"\necho \"rubygems setup:\"\ncd rubygems-1.3.6\nruby
      setup.rb >> $logfile\ncd /\nrm -rf rubygems-1.3.6\n\necho \"\"\necho \"gem update
      --system:\"\ngem update --system >> $logfile\n\n# echo the ruby code to a file
      to be run\necho \"\n    ##### Ruby Code Starts Here #####\n\n    gems_to_install1
      = ENV[''gems_to_install1'']\n    gems_to_install2 = ENV[''gems_to_install2'']\n    \n    puts
      gems_to_install1\n    puts gems_to_install2\n    \n    gems_to_install1.split('','').each
      do |gem_name|\n      \\`gem install #{gem_name} >> $logfile\\`\n    end\n    \n    gems_to_install2.split('','').each
      do |gem_name|\n      \\`gem install #{gem_name} >> $logfile\\`\n    end\n\n    #####
      Ruby Code Ends Here #####\" >> $rubyscript\n\nruby $rubyscript >> $logfile\n\nrestartServices\necho
      \"StackScript Finished!\" >> $logfile"}, {"is_public": true, "username": "jsmith",
      "id": 232, "deployments_total": 777, "user_defined_fields": [], "updated": "2011-03-25T04:22:29",
      "label": "Minecraft Multiplayer Server", "created": "2010-03-07T23:34:29", "images":
      ["linode/ubuntu10.04lts32bit", "linode/ubuntu10.1032bit"], "user_gravatar_id":
      "1fda112f431349aedce13c53b5ec0ca6", "description": "Set up a Minecraft multiplayer
      server on Ubuntu.  Automatically installs Java, creates a minecraft user, pulls
      in the latest minecraft_server.jar, and writes a script to automatically start
      the server. Read the comments in the script for more information.", "rev_note":
      "should be good to go", "deployments_active": 217, "script": "#!/bin/bash\n#\n#
      Minecraft Stackscript\n# Prepares the system, installs Java, installs Minecraft,
      and starts the server.\n# By Jed Smith <jed@jedsmith.org>\n#\n# <udf name=\"mcopname\"
      label=\"Admin Nickname\" example=\"Nickname to give initial operator status\">\n#
      <udf name=\"mclevelname\" label=\"Level Name\" default=\"world\" example=\"Name
      for the level\">\n# <udf name=\"mconline\" label=\"Online Mode\" default=\"yes\"
      oneOf=\"yes,no\" example=\"Whether the server will verify usernames with minecraft.net\">\n#
      <udf name=\"mcmonsters\" label=\"Spawn Monsters\" default=\"yes\" oneOf=\"yes,no\">\n#
      <udf name=\"mcmaxplayers\" label=\"Maximum Players\" default=\"20\">\n#\n# Once
      this script is completed, you can start the Minecraft server by typing the following:\n#\n#    #
      su - minecraft -s /opt/minecraft/run.sh\n#\n# This StackScript installs screen
      as well, so you can assign a password to the minecraft user,\n# log in as the
      minecraft user, and run minecraft in a screen (if you so desire).\n#\n# Don''t
      run minecraft as root!\n#\n\n# which distro are we on?\ndistro=`grep DISTRIB_CODENAME
      /etc/lsb-release | cut -d''='' -f 2`\n\n# add source for java\ncat >>/etc/apt/sources.list
      <<EOF\n\n# for java, added by minecraft stackscript\ndeb http://archive.canonical.com/ubuntu
      $distro partner\ndeb-src http://archive.canonical.com/ubuntu $distro partner\nEOF\n\n#
      update and install packages\napt-get -y update\napt-get -y upgrade\n\n# accept
      the sun-dlj-v1-1 license\nfor j in jdk jre; do\n\techo \"sun-java6-$j shared/accepted-sun-dlj-v1-1
      select true\" | /usr/bin/debconf-set-selections\ndone\n\n# install java\napt-get
      -y install sun-java6-jre screen\n\n# add the minecraft user\nadduser --system
      --group --disabled-login --disabled-password --home /opt/minecraft minecraft\ncd
      /opt/minecraft\n\n# find where to get minecraft (please don''t change this,
      Notch)\nversion=`wget -q -O- http://www.minecraft.net/download.jsp | grep \"download/minecraft_server.jar\"
      | cut -d''\"'' -f 2`\nwget -O minecraft_server.jar \"http://www.minecraft.net/$version\"\n\n#
      convert configuration variables\n[ \"$MCONLINE\" == \"yes\" ] && MCONLINE=true\n[
      \"$MCONLINE\" == \"true\" ] || MCONLINE=false\n[ \"$MCMONSTERS\" == \"yes\"
      ] && MCMONSTERS=true\n[ \"$MCMONSTERS\" == \"true\" ] || MCMONSTERS=false\n\n#
      write the configuration\ncat >server.properties <<EOF\n# Minecraft server properties\n#
      Created by Minecraft StackScript `date`\nonline-mode=$MCONLINE\nmonsters=$MCMONSTERS\nserver-ip=\nserver-port=25565\nmax-players=$MCMAXPLAYERS\nlevel-name=$MCLEVELNAME\nEOF\n\n#
      initial op user\necho $MCOPNAME >ops.txt\ntouch banned-players.txt\ntouch banned-ips.txt\n\n#
      write the run script\ncat >run.sh <<EOF\n#!/bin/sh\njava -Xmx1024M -Xms1024M
      -jar /opt/minecraft/minecraft_server.jar nogui\nEOF\n\n# clean up\nchown minecraft:minecraft
      *\nchmod a+x run.sh\n\n# do a motd too\ncat >/etc/motd.tail <<EOF\n\nThis server
      has been deployed from Jed Smith''s Minecraft StackScript.  To start\nMinecraft,
      run the following as root:\n\n  # su - minecraft -s /opt/minecraft/run.sh\n\nscreen
      is also installed if you prefer to run Minecraft in a screen.  It is a\nvery
      bad idea to run the Minecraft server as root; although there are no\ncurrently-known
      vulnerabilities, you''re better off insulating your server.\n\nAll files related
      to the server are in /opt/minecraft.\nEOF"}, {"is_public": true, "username":
      "eclubb", "id": 269, "deployments_total": 26, "user_defined_fields": [], "updated":
      "2010-03-14T22:43:48", "label": "REE + Nginx + Passenger Library for RH Derivatives",
      "created": "2010-03-14T22:39:16", "images": ["linode/centos5.632bit", "linode/centos5.6",
      "linode/fedora1132bit"], "user_gravatar_id": "555bdede8e4018574886c24a458f51bd",
      "description": "Installs Ruby Enterprise Edition, and Nginx with Passenger.  Optionally
      installs mysql and/or sqlite-ruby gems.  It also adds REE to the system-wide
      $PATH.  Modified port of mocra''s \"Postgres + REE + Nginx + Passenger\" to
      Centos/Fedora.\r\n", "rev_note": "Initial import", "deployments_active": 3,
      "script": "#!/bin/bash\n\n# Set up some necessary ENV variables\n# Should be
      set from UDF if run through Linode\nif [ ! -n \"$REE_VERSION\" ]; then\n  REE_VERSION=\"1.8.7-2010.01\"\nfi\nif
      [ ! -n \"$INSTALL_PREFIX\" ]; then\n  INSTALL_PREFIX=\"/opt/local\"\nfi\nif
      [ ! -n \"$RR_ENV\" ]; then\n  RR_ENV=\"production\"\nfi\nif [ ! -n \"$INSTALL_MYSQL_GEM\"
      ]; then\n  INSTALL_MYSQL_GEM=\"no\"\nfi\nif [ ! -n \"$INSTALL_SQLITE_GEM\" ];
      then\n  INSTALL_SQLITE_GEM=\"no\"\nfi\n\n#########################\n#  REE/Nginx/Passenger  #\n#########################\nfunction
      ree_nginx_passenger_install {\n  REE_NAME=\"ruby-enterprise-$REE_VERSION\"\n  REE_FILENAME=\"$REE_NAME.tar.gz\"\n  REE_DOWNLOAD=\"http://rubyforge.org/frs/download.php/68719/$REE_FILENAME\"\n  WORKING_DIR=\"/tmp/ree\"\n\n  mkdir
      -p \"$WORKING_DIR\"\n\n  # Install dependencies\n  yum -y install gcc-c++ make
      patch\n  yum -y install zlib-devel openssl-devel readline-devel\n\n  # Download\n  cd       \"$WORKING_DIR\"\n  wget     \"$REE_DOWNLOAD\"
      -O \"$REE_FILENAME\"\n  tar xzf  \"$REE_FILENAME\"\n  cd       \"$REE_NAME\"\n\n  #
      Install\n  ./installer --auto=\"$INSTALL_PREFIX/$REE_NAME\" --no-dev-docs --dont-install-useful-gems\n  ln
      -s \"$INSTALL_PREFIX/$REE_NAME\" \"$INSTALL_PREFIX/ree\"\n\n  # Add REE to the
      PATH\n  export PATH=\"$INSTALL_PREFIX/ree/bin:$PATH\"\n\n  # Install useful
      gems\n  gem install --no-ri --no-rdoc rake rack fastthread passenger\n\n  #
      Install Nginx/Passenger\n  passenger-install-nginx-module --auto --auto-download
      --prefix=\"$INSTALL_PREFIX/nginx\" --extra-configure-flags=\"--with-http_ssl_module\"\n\n  #
      Install Nginx init script\n  wget http://www.gtlib.gatech.edu/pub/fedora-epel/5/i386/nginx-0.6.39-4.el5.i386.rpm\n  rpm2cpio
      nginx-0.6.39-4.el5.i386.rpm | cpio -idm\n  cp etc/rc.d/init.d/nginx /etc/init.d/\n  chmod
      +x /etc/init.d/nginx\n\n  # Install MySQL gem, if selected\n  if [[ $INSTALL_MYSQL_GEM
      == yes ]]; then\n    yum -y install mysql-devel\n    gem install --no-ri --no-rdoc
      mysql\n  fi\n\n  # Install Sqlite3 gem, if selected\n  if [[ $INSTALL_SQLITE_GEM
      == yes ]]; then\n    yum -y install sqlite-devel\n    gem install --no-ri --no-rdoc
      sqlite3-ruby\n  fi\n\n  # Set up global environment variables\n  cat > /etc/environment
      << EOF\nPATH=\"$PATH\"\nRAILS_ENV=\"$RR_ENV\"\nRACK_ENV=\"$RR_ENV\"\nEOF\n\n  #
      Clean up\n  rm -rf \"$WORKING_DIR\"\n}"}, {"is_public": true, "username": "eclubb",
      "id": 270, "deployments_total": 32, "user_defined_fields": [], "updated": "2010-03-14T22:43:58",
      "label": "Hardened PHP-FPM Library for RH Derivatives", "created": "2010-03-14T22:40:13",
      "images": ["linode/centos5.632bit", "linode/centos5.6", "linode/fedora1132bit"],
      "user_gravatar_id": "555bdede8e4018574886c24a458f51bd", "description": "Installs
      a feature-rich PHP patched with Suhosin+extension, and PHP-FPM.  Extracted from
      rnolen''s LEMP_lib and ported to CentOS/Fedora.", "rev_note": "Initial import",
      "deployments_active": 4, "script": "#!/bin/bash\n\n#############\n#  PHP-FPM  #\n#############\n\nfunction
      php-fpm_install {\n  #check for versions of: libevent; php-fpm; php; suhosin;
      suhosin patch.\n  #the naming conventions php-fpm have changed at random in
      the past. be careful.\n  #\n  # http://monkey.org/~provos/libevent/\n  # http://launchpad.net/php-fpm/\n  #
      http://php.net/\n  # http://www.hardened-php.net/suhosin/download.html\n  #\n  #and
      alter variables as necessary\n\n  export LIBEVENT_VER=1.4.13-stable\n  export
      PHP_FPM_VER=0.6\n  export PHP_VER=5.3.2\n  export SUHOSIN_PATCH_VER=0.9.9.1\n  export
      SUHOSIN_VER=0.9.29\n  #PHP-FPM for specific PHP versions are no longer, so using
      the latest applicable which seems to work fine (read: I use it in production)\n  export
      PHP_VER_IND=5.3.1\n\n  #dependencies for all the stuff to be included with php\n  yum
      install -y libxml2-devel bzip2-devel curl-devel libjpeg-devel libpng-devel libXpm-devel
      freetype-devel t1lib-devel libmcrypt-devel libxslt-devel\n\n  #create directory
      to play in\n  mkdir /tmp/phpstuff\n  cd /tmp/phpstuff\n\n  #need stable libevent.\n  wget
      \"http://www.monkey.org/~provos/libevent-$LIBEVENT_VER.tar.gz\"\n  tar -xzvf
      \"libevent-$LIBEVENT_VER.tar.gz\"\n  cd \"libevent-$LIBEVENT_VER\"\n  ./configure\n  make\n  DESTDIR=$PWD
      make install\n  export LIBEVENT_SEARCH_PATH=\"$PWD/usr/local\"\n\n  #don''t
      want to build in libevent directory\n  cd ../\n\n  #grab php.\n  wget \"http://us.php.net/get/php-$PHP_VER.tar.bz2/from/us.php.net/mirror\"\n  tar
      -xjvf \"php-$PHP_VER.tar.bz2\"\n\n  #grab suhosin.\n  wget \"http://download.suhosin.org/suhosin-patch-$PHP_VER-$SUHOSIN_PATCH_VER.patch.gz\"\n  gunzip
      \"suhosin-patch-$PHP_VER-$SUHOSIN_PATCH_VER.patch.gz\"\n\n  #patch php with
      suhosin.\n  cd \"php-$PHP_VER\"\n  patch -p 1 -i \"../suhosin-patch-$PHP_VER-$SUHOSIN_PATCH_VER.patch\"\n\n  #build
      php\n  mkdir php-build\n  cd php-build\n  ../configure --with-config-file-path=/usr/local/lib/php
      --with-curl --enable-exif --with-gd --with-jpeg-dir --with-png-dir --with-zlib
      --with-xpm-dir --with-freetype-dir --with-t1lib --with-mcrypt --with-mhash --with-mysql=mysqlnd
      --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-openssl --enable-sysvmsg
      --enable-wddx --with-xsl --enable-zip --with-bz2 --enable-bcmath --enable-calendar
      --enable-ftp --enable-mbstring --enable-soap --enable-sockets --enable-sqlite-utf8
      --with-gettext --enable-shmop --with-xmlrpc\n  make\n\n  #grab php-fpm and build\n  wget
      \"http://launchpad.net/php-fpm/master/$PHP_FPM_VER/+download/php-fpm-$PHP_FPM_VER~$PHP_VER_IND.tar.gz\"\n  tar
      -xzvf \"php-fpm-$PHP_FPM_VER~$PHP_VER_IND.tar.gz\"\n  cd \"php-fpm-$PHP_FPM_VER-$PHP_VER_IND\"\n  mkdir
      fpm-build\n  cd fpm-build\n  ../configure --srcdir=../ --with-php-src=\"../../../\"
      --with-php-build=\"../../\" --with-libevent=\"$LIBEVENT_SEARCH_PATH\" --with-fpm-bin=/usr/local/sbin/php-fpm  --with-fpm-init=/etc/init.d/php-fpm\n  make\n\n  #install
      php\n  cd ../../\n  make install\n\n  #move php.ini to where php-fpm looks for
      it\n  cp \"/tmp/phpstuff/php-$PHP_VER/php.ini-production\" /usr/local/lib/php/php.ini\n\n  #set
      permissions\n  chmod 644 /usr/local/lib/php/php.ini\n\n  #install php-fpm\n  cd
      \"php-fpm-$PHP_FPM_VER-$PHP_VER_IND\"\n  cd fpm-build\n  make install\n\n  #grab
      and install suhosin extension.\n  cd ../../../../\n  wget \"http://download.suhosin.org/suhosin-$SUHOSIN_VER.tgz\"\n  tar
      -xzvf \"suhosin-$SUHOSIN_VER.tgz\"\n  cd \"suhosin-$SUHOSIN_VER\"\n  /usr/local/bin/phpize\n  ./configure
      --with-php-config=\"/usr/local/bin/php-config\"\n  make\n  make install\n\n  #make
      php use it.\n  echo \"extension = suhosin.so\" >> /usr/local/lib/php/php.ini\n\n  #have
      /etc/init.d/php-fpm run on boot\n  chkconfig --level 35 php-fpm on\n\n  #/etc/php-fpm.conf
      stuff\n  #\n  #sockets > ports. Using the 127.0.0.1:9000 stuff needlessly introduces
      TCP/IP overhead.\n  sed -i ''s/<value\\ name=\"listen_address\">127.0.0.1:9000<\\/value>/<value\\
      name=\"listen_address\">\\/var\\/run\\/php-fpm.sock<\\/value>/'' /etc/php-fpm.conf\n  #\n  #nice
      strict permissions\n  sed -i ''s/<value\\ name=\"mode\">0666<\\/value>/<value\\
      name=\"mode\">0600<\\/value>/'' /etc/php-fpm.conf\n  #\n  #matches available
      processors. Will not make a 360 melt.\n  sed -i ''s/<value\\ name=\"max_children\">5<\\/value>/<value\\
      name=\"max_children\">4<\\/value>/'' /etc/php-fpm.conf\n  #\n  #i like to know
      when scripts are slow.\n  sed -i ''s/<value\\ name=\"request_slowlog_timeout\">0s<\\/value>/<value
      name=\"request_slowlog_timeout\">2s<\\/value>/'' /etc/php-fpm.conf\n  #\n  #edited
      to include PHP path\n  sed -i ''s/<value\\ name=\"PATH\">\\/usr\\/local\\/bin:\\/usr\\/bin:\\/bin<\\/value>/<value\\
      name=\"PATH\">\\/usr\\/local\\/bin:\\/usr\\/bin:\\/bin:\\/usr\\/local\\/sbin<\\/value>/''
      /etc/php-fpm.conf\n\n  #Engage.\n  /etc/init.d/php-fpm start\n\n  #remove build
      crap\n  rm -rf /tmp/phpstuff\n}"}, {"is_public": true, "username": "eclubb",
      "id": 271, "deployments_total": 103, "user_defined_fields": [{"label": "MySQL
      root Password", "name": "db_password"}, {"example": "1.8.7-2010.01", "label":
      "Ruby Enterprise Edition Version", "name": "ree_version", "default": "1.8.7-2010.01"},
      {"example": "/opt/local will install REE to /opt/local/ree", "label": "Install
      Prefix for REE and Passenger", "name": "install_prefix", "default": "/opt/local"},
      {"label": "Rails/Rack environment to run", "name": "rr_env", "default": "production"},
      {"oneof": "yes,no", "label": "Install MySQL gem", "name": "install_mysql_gem"},
      {"oneof": "yes,no", "label": "Install Sqlite3 gem", "name": "install_sqlite_gem",
      "default": "no"}], "updated": "2010-03-14T22:44:05", "label": "LEMP + REE +
      Passenger", "created": "2010-03-14T22:42:52", "images": ["linode/centos5.632bit",
      "linode/centos5.6", "linode/fedora1132bit"], "user_gravatar_id": "555bdede8e4018574886c24a458f51bd",
      "description": "CentOS/Fedora, Ruby Enterprise Edition, hardened PHP, Nxginx
      (w/ Passenger, PHP-FPM), MySQL", "rev_note": "Initial import", "deployments_active":
      16, "script": "#!/bin/bash\n\n# <UDF name=\"db_password\" Label=\"MySQL root
      Password\" />\n# <UDF name=\"ree_version\" Label=\"Ruby Enterprise Edition Version\"
      default=\"1.8.7-2010.01\" example=\"1.8.7-2010.01\" />\n# <UDF name=\"install_prefix\"
      Label=\"Install Prefix for REE and Passenger\" default=\"/opt/local\" example=\"/opt/local
      will install REE to /opt/local/ree\" />\n# <UDF name=\"rr_env\" Label=\"Rails/Rack
      environment to run\" default=\"production\" />\n# <UDF name=\"install_mysql_gem\"
      label=\"Install MySQL gem\" oneOf=\"yes,no\" />\n# <UDF name=\"install_sqlite_gem\"
      label=\"Install Sqlite3 gem\" oneOf=\"yes,no\" default=\"no\" />\n\ncase \"$-\"
      in\n  *i*)\n  PATH=$(cd ${0%/*} && pwd -P)\n  source \"${PATH}/ssinclude-154\"\n  source
      \"${PATH}/ssinclude-269\"\n  source \"${PATH}/ssinclude-270\"\n  ;;\n  *)\n  source
      ''<ssinclude StackScriptID=\"154\">'' # StackScript Bash Library for RH Derivatives\n  source
      ''<ssinclude StackScriptID=\"269\">'' # REE + Nginx + Passenger Library\n  source
      ''<ssinclude StackScriptID=\"270\">'' # PHP-FPM Library\n  ;;\nesac\n\nfunction
      doit {\n  enable_epel_repo\n  system_update\n  yum install -y sudo wget htop
      bzip autoconf\n\n  mysql_install \"$DB_PASSWORD\" && mysql_tune 40\n  chkconfig
      --level 35 mysqld on\n\n  ree_nginx_passenger_install\n  chkconfig --level 35
      nginx on\n\n  php-fpm_install\n\n  cd ~\n  restartServices\n\n  #read -p \"Press
      any key to continue... \" -n1 -s\n}\n\ndoit | tee /tmp/stack_script.log"}, {"is_public":
      true, "username": "vybe", "id": 308, "deployments_total": 14, "user_defined_fields":
      [], "updated": "2010-05-06T00:20:45", "label": "Sprinkle", "created": "2010-03-21T01:04:42",
      "images": ["linode/debian5.032bit", "linode/debian5.064bit", "linode/ubuntu10.04lts32bit",
      "linode/ubuntu10.04lts", "linode/ubuntu9.1032bit", "linode/ubuntu9.1064bit",
      "linode/debian4.0", "linode/debian4.064bit", "linode/ubuntu8.04lts32bit", "linode/ubuntu8.04lts64bit",
      "linode/ubuntu8.1032bit", "linode/ubuntu8.1064bit", "linode/ubuntu9.0432bit",
      "linode/ubuntu9.0464bit"], "user_gravatar_id": "a8ba85849452492978174366a63cf6d4",
      "description": "Prepares the linode for Sprinkle. (http://github.com/benschwarz/passenger-stack)",
      "rev_note": "Initial import", "deployments_active": 2, "script": "#!/bin/bash\n\n#
      <udf name=\"admin_username\" label=\"Admin Username\" />\n# <udf name=\"admin_password\"
      label=\"Admin Password\" />\n\nsource <ssinclude StackScriptID=\"1\">\nsource
      <ssinclude StackScriptID=\"44\"> # Enabled Universe\n\n# Update the system and
      hostname\nsystem_update\nhostname `get_rdns_primary_ip`\n\n# Add wheel to /etc/sudoers\naptitude
      -y install sudo\ngroupadd wheel\ncp /etc/sudoers /etc/sudoers.tmp\nchmod 0640
      /etc/sudoers.tmp\necho \"%wheel ALL = (ALL) ALL\" >> /etc/sudoers.tmp\nchmod
      0440 /etc/sudoers.tmp\nmv /etc/sudoers.tmp /etc/sudoers\n\n# Create admin and
      add SSH key\nuseradd -m -s /bin/bash -G wheel $ADMIN_USERNAME\necho \"${ADMIN_USERNAME}:${ADMIN_PASSWORD}\"
      | chpasswd"}, {"is_public": true, "username": "jqueryin", "id": 335, "deployments_total":
      451, "user_defined_fields": [{"label": "MySQL - Root Password", "name": "db_password"},
      {"example": "Optionally create this database.", "label": "MySQL - Database Name",
      "name": "db_name", "default": ""}, {"example": "Optionally create this user.",
      "label": "MySQL - Username", "name": "db_user", "default": ""}, {"example":
      "User''s password.", "label": "MySQL - Password", "name": "db_user_password",
      "default": ""}], "updated": "2010-03-26T21:10:14", "label": "RH Basics + LAMP
      Stack", "created": "2010-03-26T21:09:31", "images": ["linode/centos5.632bit",
      "linode/centos5.6", "linode/fedora1132bit"], "user_gravatar_id": "adee906d49f35ed481cc54ed80e03ecb",
      "description": "A port of the Ubuntu LAMP Stack which will fully update the
      server as well as install wget, rsync, openssh-clients, jwhois, subversion,
      and a LAMP environment.  \r\n\r\nAllows for setting the root MySQL password
      as well as an optional user. Information regarding the LAMP configuration can
      be found at:\r\n\r\nhttp://www.linode.com/stackscripts/view/?StackScriptID=10",
      "rev_note": "Initial import.", "deployments_active": 123, "script": "#!/bin/bash\n#
      <UDF name=\"db_password\" Label=\"MySQL - Root Password\" />\n# <UDF name=\"db_name\"
      Label=\"MySQL - Database Name\" default=\"\" example=\"Optionally create this
      database.\" />\n# <UDF name=\"db_user\" Label=\"MySQL - Username\" default=\"\"
      example=\"Optionally create this user.\" />\n# <UDF name=\"db_user_password\"
      Label=\"MySQL - Password\" default=\"\" example=\"User''s password.\" />\n\nsource
      <ssinclude StackScriptID=\"20\">\nsource <ssinclude StackScriptID=\"154\">\n\n#
      optionally include any packages you want here\nfunction install_personal {\n  yum
      install -y subversion\n}\n\nsystem_update\ninstall_basics\npostfix_install_loopback_only\nmysql_install
      \"$DB_PASSWORD\" && mysql_tune 40\nmysql_create_database \"$DB_PASSWORD\" \"$DB_NAME\"\nmysql_create_user
      \"$DB_PASSWORD\" \"$DB_USER\" \"$DB_USER_PASSWORD\"\nmysql_grant_user \"$DB_PASSWORD\"
      \"$DB_USER\" \"$DB_NAME\"\nphp_install_with_apache && php_tune\napache_install
      && apache_tune 40 && apache_virtualhost_from_rdns\ninstall_personal\ngoodstuff\nrestartServices"},
      {"is_public": true, "username": "webandblog", "id": 360, "deployments_total":
      444, "user_defined_fields": [{"\t\tlabel": "MySQL root Password", "name": "DB_PASSWORD"},
      {"\t\tlabel": "nginx: log rotation frequency", "default": "monthly", "name":
      "LOGRO_FREQ"}, {"\t\tlabel": "nginx: number of log rotations to keep", "default":
      "12", "name": "LOGRO_ROTA"}, {"example": "Punch holes in the firewall for these
      services. SSH is already open (see Restrict SSH).", "manyof": "FTP Server: TCP
      21,Telnet: TCP 23,SMTP: TCP 25,DNS Server: TCP/UDP 53,Web Server: TCP 80,POP3
      Mail Service: TCP 110,NTP Service: UDP 123,IMAP Mail Service: TCP 143,SSL Web
      Server: TCP 443,Mail Submission: TCP 587,SSL IMAP Server: TCP 993,OpenVPN Server:
      UDP 1194,IRC Server: TCP 6667", "label": "Allowed services", "name": "allow",
      "default": ""}, {"example": "Extra holes in the firewall for TCP. Understands
      service names (''kerberos'') and port numbers (''31337''), separate by spaces.",
      "label": "Extra TCP holes", "name": "extraT", "default": ""}, {"example": "Extra
      holes in the firewall for UDP. Understands service names (''daytime'') and port
      numbers (''1094''), separate by spaces.", "label": "Extra UDP holes", "name":
      "extraU", "default": ""}, {"example": "Will restrict SSH access to the given
      CIDR range. Leave empty for no restrictions.", "label": "Restrict SSH", "name":
      "sshrange", "default": "0/0"}, {"example": "Rules for ICMP. You should leave
      this at the default to be a good net citizen.", "oneof": "Well-behaved,Only
      allow pings,Ignore all ICMP", "label": "ICMP paranoia level", "name": "icmplevel",
      "default": "None"}, {"example": "How much to log. This can generate a lot of
      output.", "oneof": "Nothing,Some stuff,Everything", "label": "Logging level",
      "name": "loglevel", "default": "Nothing"}, {"label": "Unprivileged User Account",
      "name": "user_name"}, {"label": "Unprivileged User Password", "name": "user_password"},
      {"label": "Public Key for User", "name": "user_sshkey", "default": ""}, {"label":
      "SSH Port", "name": "sshd_port", "default": "22"}, {"oneof": "1,2,1 and 2",
      "label": "SSH Protocol", "name": "sshd_protocol", "default": "2"}, {"oneof":
      "No,Yes", "label": "SSH Permit Root Login", "name": "sshd_permitroot", "default":
      "No"}, {"oneof": "No,Yes", "label": "SSH Password Authentication", "name": "sshd_passwordauth",
      "default": "Yes"}, {"example": "List of groups seperated by spaces", "label":
      "SSH Allowed Groups", "name": "sshd_group", "default": "sshusers"}, {"label":
      "Usergroup to use for Admin Accounts", "name": "sudo_usergroup", "default":
      "wheel"}, {"oneof": "Require Password,Do Not Require Password", "label": "Passwordless
      Sudo", "name": "sudo_passwordless", ", default": "Require Password"}], "updated":
      "2015-03-29T16:57:58", "label": "LEMP stack + basic security + user security",
      "created": "2010-04-02T16:14:53", "images": ["linode/debian6"], "user_gravatar_id":
      "630bd7fd58f4bb40e92007c722a7132b", "description": "Installs LEMP + basic security
      + user security. No root acct. Use sudo -s to get root permissions. For PHP-FPM
      setup change nginx setting to access PHP via socket not port: \r\n\r\nlocation
      ~ \\.php$ {\r\n               if (!-f $request_filename) {\r\n                        return
      404;\r\n                }\r\n            fastcgi_pass   unix:/var/run/php-fpm.sock;\r\n            fastcgi_index  index.php;\r\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\r\n            fastcgi_param
      PATH_INFO $fastcgi_path_info;\r\n            fastcgi_intercept_errors  on;\r\n            include        /etc/nginx/fastcgi_params;\r\n        }\r\n",
      "rev_note": "+ htop", "deployments_active": 84, "script": "#!/bin/bash\n#yu
      di efs\n# <UDF name=\"DB_PASSWORD\"\t\tLabel=\"MySQL root Password\" />\n# <UDF
      name=\"LOGRO_FREQ\"\t\tLabel=\"nginx: log rotation frequency\" default=\"monthly\"
      />\n# <UDF name=\"LOGRO_ROTA\"\t\tLabel=\"nginx: number of log rotations to
      keep\" default=\"12\" />\n# Basic Security StackScript\n# By Jed Smith <jed@linode.com>\n#\n#
      <UDF name=\"allow\" label=\"Allowed services\" example=\"Punch holes in the
      firewall for these services. SSH is already open (see Restrict SSH).\" default=\"\"
      manyOf=\"FTP Server: TCP 21,Telnet: TCP 23,SMTP: TCP 25,DNS Server: TCP/UDP
      53,Web Server: TCP 80,POP3 Mail Service: TCP 110,NTP Service: UDP 123,IMAP Mail
      Service: TCP 143,SSL Web Server: TCP 443,Mail Submission: TCP 587,SSL IMAP Server:
      TCP 993,OpenVPN Server: UDP 1194,IRC Server: TCP 6667\">\n# <UDF name=\"extraT\"
      label=\"Extra TCP holes\" example=\"Extra holes in the firewall for TCP. Understands
      service names (''kerberos'') and port numbers (''31337''), separate by spaces.\"
      default=\"\">\n# <UDF name=\"extraU\" label=\"Extra UDP holes\" example=\"Extra
      holes in the firewall for UDP. Understands service names (''daytime'') and port
      numbers (''1094''), separate by spaces.\" default=\"\">\n# <UDF name=\"sshrange\"
      label=\"Restrict SSH\" example=\"Will restrict SSH access to the given CIDR
      range. Leave empty for no restrictions.\" default=\"0/0\">\n# <UDF name=\"icmplevel\"
      label=\"ICMP paranoia level\" example=\"Rules for ICMP. You should leave this
      at the default to be a good net citizen.\" oneOf=\"Well-behaved,Only allow pings,Ignore
      all ICMP\" default=\"None\">\n# <UDF name=\"loglevel\" label=\"Logging level\"
      example=\"How much to log. This can generate a lot of output.\" oneOf=\"Nothing,Some
      stuff,Everything\" default=\"Nothing\">\n#\n\n# Security StackScript\n# By Donald
      von Stufft <donald.stufft@gmail.com>\n#\n# <udf name=\"user_name\" label=\"Unprivileged
      User Account\" />\n# <udf name=\"user_password\" label=\"Unprivileged User Password\"
      />\n# <udf name=\"user_sshkey\" label=\"Public Key for User\" default=\"\" />\n#\n#
      <udf name=\"sshd_port\" label=\"SSH Port\" default=\"22\" />\n# <udf name=\"sshd_protocol\"
      label=\"SSH Protocol\" oneOf=\"1,2,1 and 2\" default=\"2\" />\n# <udf name=\"sshd_permitroot\"
      label=\"SSH Permit Root Login\" oneof=\"No,Yes\" default=\"No\" />\n# <udf name=\"sshd_passwordauth\"
      label=\"SSH Password Authentication\" oneOf=\"No,Yes\" default=\"Yes\" />\n#
      <udf name=\"sshd_group\" label=\"SSH Allowed Groups\" default=\"sshusers\" example=\"List
      of groups seperated by spaces\" />\n#\n# <udf name=\"sudo_usergroup\" label=\"Usergroup
      to use for Admin Accounts\" default=\"wheel\" />\n# <udf name=\"sudo_passwordless\"
      label=\"Passwordless Sudo\" oneof=\"Require Password,Do Not Require Password\",
      default=\"Require Password\" />\n\n#using postfix and restartServices stuff
      from Linode''s StackScript Bash Library\n\n#scripts used\nsource <ssinclude
      StackScriptID=\"1\">\t\t#StackScript Bash Library\nsource <ssinclude StackScriptID=\"41\">\t\t#LEMP_lib\nlemp_system_update_aptitude\t\t\t#StackScriptID=\"41\"\nlemp_mysql_install\t\t
      \t\t#StackScriptID=\"41\"\npostfix_install_loopback_only\t\t\t#StackScriptID=\"1\"\nlemp_php-fpm\t\t\t\t\t#StackScriptID=\"41\"\nlemp_nginx\t\t\t\t\t#StackScriptID=\"41\"\nrestartServices\t\t\t\t\t#StackScriptID=\"1\"\n\nIFUP=/etc/network/if-up.d/iptables.sh\nIFDOWN=/etc/network/if-down.d/iptables.sh\nIPTABLES()
      {\n    echo iptables $@ >&1 2>&1\n    iptables $@\n}\n\n# Make sure we have
      iptables, and do this business while we''re at it\necho Updating system and
      installing iptables.\naptitude -y install iptables\n\necho\necho ===========================================================================\necho
      Configuring iptables firewall.\n\n# Set up scripts to load/unload the rules
      at ifup/ifdown\necho Generating store/restore scripts.\nfor i in $IFUP $IFDOWN;
      do\n    echo $i\n    touch $i && chmod 744 $i\n    echo >$i \"#!/bin/bash\"\n    echo
      >>$i \"# Generated by iptables StackScript\"\n    echo >>$i\ndone\necho >>$IFUP
      \"iptables-restore < /etc/firewall.conf\"\necho >>$IFDOWN \"iptables-save >
      /etc/firewall.conf\"\n\n# Fix sysctl so this will not log to console\n# The
      distro-default kernel printk is commented out, so we cheat and add\necho Changing
      kernel.printk in the kernel.\necho \"3 1 1 1\" > /proc/sys/kernel/printk\necho
      Modifying /etc/sysctl.conf.\necho >>/etc/sysctl.conf\necho \"# Added by iptables
      StackScript, to not log iptables information to console\" >>/etc/sysctl.conf\necho
      ''kernel.printk = \"3 1 1 1\"'' >>/etc/sysctl.conf\n\n# Build iptables\necho
      Building iptables rules.\nfor i in INPUT OUTPUT; do IPTABLES -P $i ACCEPT &&
      IPTABLES -F $i; done\nIPTABLES -P FORWARD DROP && IPTABLES -F FORWARD\nfor i
      in DROP1 DROP2 TCP UDP; do\n    IPTABLES -F $i >/dev/null 2>/dev/null\n    IPTABLES
      -X $i >/dev/null 2>/dev/null\n    IPTABLES -N $i\ndone\n\n# Dropper rules based
      on selected loglevel\n# Drop1 is logged if loglevel >= Some Stuff, Drop2 if
      loglevel = Everything\ntest \"${LOGLEVEL}\" == \"Everything\" && (for i in DROP1
      DROP2; do IPTABLES -A $i -j LOG --log-level notice --log-prefix \"iptables:
      \"; done)\ntest \"${LOGLEVEL}\" == \"Some stuff\" && (IPTABLES -A DROP1 -j LOG
      --log-level notice --log-prefix \"iptables: \")\nfor i in DROP1 DROP2; do IPTABLES
      -A $i -j DROP; done\n\n# Preamble\nIPTABLES -A INPUT -m state --state RELATED,ESTABLISHED
      -j ACCEPT\nIPTABLES -A INPUT -m state --state INVALID -j DROP1\nIPTABLES -A
      INPUT -i lo -j ACCEPT\nIPTABLES -A INPUT -p tcp -j TCP\nIPTABLES -A INPUT -p
      udp -j UDP\n\n# ICMP\necho Configuring ICMP behavior.\ntest \"${ICMPLEVEL}\"
      == \"Well-behaved\" && (IPTABLES -A INPUT -p icmp -j ACCEPT)\ntest \"${ICMPLEVEL}\"
      == \"Only allow pings\" && (IPTABLES -A INPUT -p icmp --icmp-type echo-request
      -j ACCEPT)\n\n# Bottom of the input chain -- log?\ntest \"${LOGLEVEL}\" == \"Everything\"
      && (IPTABLES -A INPUT -j LOG --log-level notice --log-prefix \"iptables: \")\n\n#
      SSH is open by default\nif [ -z \"$SSHRANGE\" ]; then SSHRANGE=\"0/0\"; fi\necho
      Allowing: SSH from $SSHRANGE\nIPTABLES -A TCP -p tcp --dport ssh -s $SSHRANGE
      -j ACCEPT\n\n# Allowed services\nIFS=$'',''\nfor service in $ALLOW; do\n    echo
      Allowing: $service\n    interested=${service#*: }\n    IFS=$'' ''\n    set --
      $interested\n    for i in TCP UDP; do\n        if [[ \"$1\" == *$i* ]]; then
      IPTABLES -A $i -p $i --dport $2 -j ACCEPT; fi\n    done\ndone\nunset IFS\n\n#
      Extras\nfor i in $EXTRAU; do\n    echo Allowing: UDP $i\n    IPTABLES -A UDP
      -p UDP --dport $i -j ACCEPT\ndone\nfor i in $EXTRAT; do\n    echo Allowing:
      TCP $i\n    IPTABLES -A TCP -p TCP --dport $i -j ACCEPT\ndone\n\n# Lock ''n
      save\necho Completing.\nIPTABLES -P INPUT DROP\niptables-save > /etc/firewall.conf\n\necho
      Done.\nsource <ssinclude StackScriptID=\"1\">\n\n# Update the System\nsystem_update\n\n#
      Install and Configure Sudo\naptitude -y install sudo\n\ncp /etc/sudoers /etc/sudoers.tmp\nchmod
      0640 /etc/sudoers.tmp\ntest \"${SUDO_PASSWORDLESS}\" == \"Do Not Require Password\"
      && (echo \"%`echo ${SUDO_USERGROUP} | tr ''[:upper:]'' ''[:lower:]''` ALL =
      NOPASSWD: ALL\" >> /etc/sudoers.tmp)\ntest \"${SUDO_PASSWORDLESS}\" == \"Require
      Password\" && (echo \"%`echo ${SUDO_USERGROUP} | tr ''[:upper:]'' ''[:lower:]''`
      ALL = (ALL) ALL\" >> /etc/sudoers.tmp)\nchmod 0440 /etc/sudoers.tmp\nmv /etc/sudoers.tmp
      /etc/sudoers\n\n# Configure SSHD\necho \"Port ${SSHD_PORT}\" > /etc/ssh/sshd_config.tmp\necho
      \"Protocol ${SSHD_PROTOCOL}\" >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(HostKey
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(UsePrivilegeSeparation
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(KeyRegenerationInterval
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(ServerKeyBits
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(SyslogFacility
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(LogLevel
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(LoginGraceTime
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\necho \"PermitRootLogin
      `echo ${SSHD_PERMITROOT} | tr ''[:upper:]'' ''[:lower:]''`\" >> /etc/ssh/sshd_config.tmp\nsed
      -n ''s/\\(StrictModes .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed
      -n ''s/\\(RSAAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed
      -n ''s/\\(PubkeyAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed
      -n ''s/\\(IgnoreRhosts .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed
      -n ''s/\\(RhostsRSAAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed
      -n ''s/\\(HostbasedAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed
      -n ''s/\\(PermitEmptyPasswords .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed
      -n ''s/\\(ChallengeResponseAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config
      >> /etc/ssh/sshd_config.tmp\n\necho \"PasswordAuthentication `echo ${SSHD_PASSWORDAUTH}
      | tr ''[:upper:]'' ''[:lower:]''`\" >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(X11Forwarding
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(X11DisplayOffset
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(PrintMotd
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(PrintLastLog
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(TCPKeepAlive
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(MaxStartups
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(AcceptEnv
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(Subsystem
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(UsePAM
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\necho \"AllowGroups
      `echo ${SSHD_GROUP} | tr ''[:upper:]'' ''[:lower:]''`\" >> /etc/ssh/sshd_config.tmp\n\nchmod
      0600 /etc/ssh/sshd_config.tmp\nmv /etc/ssh/sshd_config.tmp /etc/ssh/sshd_config\ntouch
      /tmp/restart-ssh\n\n# Create Groups\ngroupadd ${SSHD_GROUP}\ngroupadd ${SUDO_USERGROUP}\n\n#
      Create User & Add SSH Key\nUSER_NAME_LOWER=`echo ${USER_NAME} | tr ''[:upper:]''
      ''[:lower:]''`\n\nuseradd -m -s /bin/bash -G ${SSHD_GROUP},${SUDO_USERGROUP}
      ${USER_NAME_LOWER}\necho \"${USER_NAME_LOWER}:${USER_PASSWORD}\" | chpasswd\n\nUSER_HOME=`sed
      -n \"s/${USER_NAME_LOWER}:x:[0-9]*:[0-9]*:[^:]*:\\(.*\\):.*/\\1/p\" < /etc/passwd`\n\nsudo
      -u ${USER_NAME_LOWER} mkdir ${USER_HOME}/.ssh\necho \"${USER_SSHKEY}\" >> $USER_HOME/.ssh/authorized_keys\nchmod
      0600 $USER_HOME/.ssh/authorized_keys\nchown ${USER_NAME_LOWER}:${USER_NAME_LOWER}
      $USER_HOME/.ssh/authorized_keys\n\n# Setup Hostname\nget_rdns_primary_ip > /etc/hostname\n/etc/init.d/hostname.sh
      start\n\necho y|apt-get install fail2ban\necho y|apt-get install php5-gd\necho
      y|apt-get install htop\necho y|apt-get install zip\t\n# add eAccelerator to
      make php fly \necho y| apt-get install php5-dev\naptitude -y install build-essential\ncd
      /usr/src\nwget http://downloads.sourceforge.net/project/eaccelerator/eaccelerator/eAccelerator%200.9.6.1/eaccelerator-0.9.6.1.zip\nunzip
      eaccelerator-0.9.6.1.zip\ncd eaccelerator-0.9.6.1\nphpize\n./configure\nmake\nmake
      install\nmkdir /tmp/eaccelerator\nchown -R ${USER_NAME_LOWER}:${USER_NAME_LOWER}
      /tmp/eaccelerator/\necho ''extension=\"eaccelerator.so\"'' >> /etc/php5/fpm/php.ini\necho
      ''eaccelerator.shm_size=\"16\"'' >> /etc/php5/fpm/php.ini\necho ''eaccelerator.cache_dir=\"/tmp/eaccelerator\"''
      >> /etc/php5/fpm/php.ini\necho ''eaccelerator.enable=\"1\"'' >> /etc/php5/fpm/php.ini\necho
      ''eaccelerator.optimizer=\"1\"'' >> /etc/php5/fpm/php.ini\necho ''eaccelerator.check_mtime=\"1\"''
      >> /etc/php5/fpm/php.ini\necho ''eaccelerator.debug=\"0\"'' >> /etc/php5/fpm/php.ini\necho
      ''eaccelerator.filter=\"\"'' >> /etc/php5/fpm/php.ini\necho ''eaccelerator.shm_max=\"0\"''
      >> /etc/php5/fpm/php.ini\necho ''eaccelerator.shm_ttl=\"0\"'' >> /etc/php5/fpm/php.ini\necho
      ''eaccelerator.shm_prune_period=\"0\"'' >> /etc/php5/fpm/php.ini\necho ''eaccelerator.shm_only=\"0\"''
      >> /etc/php5/fpm/php.ini\necho ''eaccelerator.compress=\"1\"'' >> /etc/php5/fpm/php.ini\necho
      ''eaccelerator.compress_level=\"9\"'' >> /etc/php5/fpm/php.ini\n\n# Restart
      Services\nrestartServices"}, {"is_public": true, "username": "embreau", "id":
      370, "deployments_total": 23, "user_defined_fields": [], "updated": "2010-04-06T07:28:35",
      "label": "lib-cherokee", "created": "2010-04-06T07:08:48", "images": ["linode/ubuntu8.04lts32bit",
      "linode/ubuntu8.04lts64bit", "linode/ubuntu9.1032bit", "linode/ubuntu9.1064bit",
      "linode/ubuntu8.1032bit", "linode/ubuntu8.1064bit", "linode/ubuntu9.0432bit",
      "linode/ubuntu9.0464bit"], "user_gravatar_id": "8713190b0a5e25e40f742e36a0c49e40",
      "description": "Install latest version of Cherokee Web Server - Currently only
      working on Ubuntu.\r\n", "rev_note": "2010-04-06", "deployments_active": 0,
      "script": "#!/bin/bash\n# Install Cherokee Web Server from LaunchPad repository
      @ https://launchpad.net/~cherokee-webserver/+archive\n# Currently only working
      on Ubuntu, RH comming soon.\n# By Martin Brochu - embreau@gmail.com\n# Version
      : 2010-04-06\n#\n# StackScriptID=\"370\"\n\n\nfunction install_cherokee_ubuntu
      {\n\tapt-key adv --keyserver keyserver.ubuntu.com --recv-keys EBA7BD49\n\techo
      \"deb http://ppa.launchpad.net/cherokee-webserver/ppa/ubuntu `lsb_release -c|awk
      {''print $2''}` main\" >> /etc/apt/sources.list.d/cherokee.list\n\techo \"deb-src
      http://ppa.launchpad.net/cherokee-webserver/ppa/ubuntu `lsb_release -c|awk {''print
      $2''}` main\" >> /etc/apt/sources.list.d/cherokee.list\n\tapt-get update\n\taptitude
      -y install cherokee libcherokee-mod-admin\n}"}, {"is_public": true, "username":
      "ratnikov", "id": 436, "deployments_total": 10, "user_defined_fields": [], "updated":
      "2010-10-07T02:11:48", "label": "Ruby Install", "created": "2010-04-21T21:57:51",
      "images": ["linode/debian5.032bit", "linode/ubuntu10.04lts32bit", "linode/ubuntu9.1032bit"],
      "user_gravatar_id": "a211797acb8ea1910014a4144176453a", "description": "", "rev_note":
      "Made sure that bundler version is not specified if $BUNDLER_VERSION is blank",
      "deployments_active": 1, "script": "#!/bin/bash\n\n# <udf name=\"ruby_version\"
      label=\"Choose Ruby Version\" default=\"ruby-1.9.2-p0\" oneOf=\"ruby-1.9.2-p0,ruby-1.9.1-p376\"
      example=\"These are downloaded from ftp://ftp.ruby-lang.org\" />\n# <udf name=\"bundler_version\"
      label=\"Choose Bundler version\" oneOf=\"0.9.24,NONE\" />\n\nif [ ! -n \"$TMPDIR\"
      ]; then\n  TMPDIR=/var/tmp\nfi\n\nWORKING_DIR=\"$TMPDIR/ruby\"\nRUBY_FILENAME=\"$RUBY_VERSION.tar.gz\"\n\nmkdir
      -p \"$WORKING_DIR\"\n\napt-get update\n\napt-get install -y build-essential
      zlib1g-dev libssl-dev libreadline5-dev\n\necho \"Installing ruby $RUBY_VERSION...\"\n\ncd
      $WORKING_DIR\n\nwget ftp://ftp.ruby-lang.org/pub/ruby/1.9/$RUBY_VERSION.tar.gz
      -O \"$RUBY_FILENAME\"\n\ntar xzf \"$RUBY_FILENAME\"\ncd \"$RUBY_VERSION\"\n\n./configure
      --enable-shared --enable-pthread\nmake\nmake install\n\necho \"Updating rubygems...\"\n\n./ruby
      bin/gem update --system\n\necho \"Done installing ruby!\"\n\necho \"Installing
      rvm...\"\n./ruby bin/gem install rvm\necho \"RVM installed!\"\n\nif [ \"$BUNDLER_VERSION\"
      == \"NONE\" ]; then\n  echo \"Skipping bundler installation\"\nelse\n  echo
      \"Installing bundler $BUNDLER_VERSION...\"\n  if [ ! -n $BUNDLER_VERSION]; then\n    ./ruby
      bin/gem install bundler --version $BUNDLER_VERSION\n  else\n    ./ruby bin/gem
      install bundler\n  fi\n\n  echo \"Bundler $BUNDLER_VERSION installed.\"\nfi"},
      {"is_public": true, "username": "nesrait", "id": 446, "deployments_total": 58,
      "user_defined_fields": [{"example": "1.8.7-2010.01", "label": "Ruby Enterprise
      Edition Version", "name": "ree_version", "default": "1.8.7-2010.01"}, {"example":
      "/opt/local will install REE to /opt/local/ree", "label": "Install Prefix for
      REE and Passenger", "name": "install_prefix", "default": "/opt/local"}, {"label":
      "Rails/Rack environment to run", "name": "rr_env", "default": "production"}],
      "updated": "2010-04-23T20:02:44", "label": "REE + Nginx + Passenger + MongoDB
      + rails3", "created": "2010-04-23T01:01:21", "images": ["linode/ubuntu9.1032bit"],
      "user_gravatar_id": "e9bee76f673fe0daa80985ab16c54879", "description": "- Ruby
      Enterprise edition;\r\n- Nginx with Passenger;\r\n- MongoDB;\r\n- git;\r\n-
      REE added to the system-wide $PATH;\r\n- Setup rails 3:\r\n  - Updates rubygems;\r\n  -
      Install pre-requirements;\r\n  - Drop rails 2.3.5;\r\n  - Install rails 3 gem;\r\n-
      Add deploy user.", "rev_note": "Install rails 3", "deployments_active": 11,
      "script": "#!/bin/bash\n# \n# Installs Ruby Enterprise edition, and Nginx with
      Passenger. \n# It also adds REE to the system-wide $PATH\n#\n# <UDF name=\"ree_version\"
      Label=\"Ruby Enterprise Edition Version\" default=\"1.8.7-2010.01\" example=\"1.8.7-2010.01\"
      />\n# <UDF name=\"install_prefix\" Label=\"Install Prefix for REE and Passenger\"
      default=\"/opt/local\" example=\"/opt/local will install REE to /opt/local/ree\"
      />\n# <UDF name=\"rr_env\" Label=\"Rails/Rack environment to run\" default=\"production\"
      />\n\nsource <ssinclude StackScriptID=44> # Enable Universe\n\n# Set up some
      necessary ENV variables\n  # Should be set from UDF if run through Linode\n  if
      [ ! -n \"$REE_VERSION\" ]; then\n    REE_VERSION=\"1.8.7-2010.01\"\n  fi\n  if
      [ ! -n \"$INSTALL_PREFIX\" ]; then\n    INSTALL_PREFIX=\"/usr/local\"\n  fi\n  if
      [ ! -n \"$RR_ENV\" ]; then\n    RR_ENV=\"production\"\n  fi\n  if [ ! -n \"$TMPDIR\"
      ]; then\n    TMPDIR=\"/var/tmp\"\n  fi\n\n  REE_NAME=\"ruby-enterprise-$REE_VERSION\"\n  REE_FILENAME=\"$REE_NAME.tar.gz\"\n  REE_DOWNLOAD=\"http://rubyforge.org/frs/download.php/68719/$REE_FILENAME\"\n  WORKING_DIR=\"$TMPDIR/flux-setup\"\n\n  mkdir
      -p \"$WORKING_DIR\"\n\n# Set up Ruby Enterprise Edition\n  # Dependencies\n  apt-get
      -y install build-essential zlib1g-dev libssl-dev libreadline5-dev\n\n  echo
      \"REE_FILENAME = $REE_FILENAME\"\n  echo \"REE_DOWNLOAD = $REE_DOWNLOAD\"\n  echo
      \"Sleeping for 10\" && sleep 10\n\n  # Download\n  cd       \"$WORKING_DIR\"\n  wget     \"$REE_DOWNLOAD\"
      -O \"$REE_FILENAME\"\n  tar xzf  \"$REE_FILENAME\"\n  cd       \"$REE_NAME\"\n\n  #
      Install\n  ./installer --auto=\"$INSTALL_PREFIX/$REE_NAME\"\n  ln -s \"$INSTALL_PREFIX/$REE_NAME\"
      \"$INSTALL_PREFIX/ree\"\n\n  # Add REE to the PATH\n  PATH=\"$INSTALL_PREFIX/ree/bin:$PATH\"\n\n#
      Set up Nginx and Passenger\n  passenger-install-nginx-module --auto --auto-download
      --prefix=\"$INSTALL_PREFIX/nginx\"\n\n# Configure nginx to start automatically\n  ln
      -s \"$INSTALL_PREFIX/nginx\" \"/opt/nginx\"\n  wget http://library.linode.com/web-servers/nginx/installation/reference/init-deb.sh\n  mv
      init-deb.sh /etc/init.d/nginx\n  chmod +x /etc/init.d/nginx\n  /usr/sbin/update-rc.d
      -f nginx defaults\n\n# Install mongodb-stable\n  echo \"deb http://downloads.mongodb.org/distros/ubuntu
      9.10 10gen\" >> /etc/apt/sources.list\n  apt-get update\n  # Secure but failing:\n  #   echo
      \"MONGO_DB_PUB_KEY\" | apt-key add -\n  #   apt-get -y install mongodb-stable\n  #
      Insecure but working:\n  apt-get -y --force-yes install mongodb-stable\n  /etc/init.d/nginx
      start\n\n# Install git\n  apt-get -y install git-core\n\n# Set up environment\n  #
      Global environment variables\n  cat > /etc/environment << EOF\nPATH=\"$PATH\"\nRAILS_ENV=\"$RR_ENV\"\nRACK_ENV=\"$RR_ENV\"\nEOF\n\n#
      Install Rails 3\n  # Update rubygems to (=> 1.3.6 as required by rails3)\n  gem
      update --system\n  # Install pre-requirements\n  gem install tzinfo builder
      memcache-client rack rack-test rack-mount erubis mail text-format thor bundler
      i18n\n  gem uninstall rails\n  gem install rails --pre\n\n# Add deploy user\n  echo
      \"deploy:deploy:1000:1000::/home/deploy:/bin/bash\" | newusers\n  cp -a /etc/skel/.[a-z]*
      /home/deploy/\n  chown -R deploy /home/deploy\n  # Add to sudoers(?)\n  echo
      \"deploy    ALL=(ALL) ALL\" >> /etc/sudoers\n\n# Clean up\n  rm -rf \"$WORKING_DIR\""},
      {"is_public": true, "username": "ratnikov", "id": 468, "deployments_total":
      2, "user_defined_fields": [], "updated": "2010-10-16T00:49:35", "label": "Install
      GIT", "created": "2010-04-29T20:44:38", "images": ["linode/debian5.032bit",
      "linode/ubuntu10.04lts32bit", "linode/ubuntu9.1032bit"], "user_gravatar_id":
      "a211797acb8ea1910014a4144176453a", "description": "Installs git using aptitude",
      "rev_note": "Initial import", "deployments_active": 1, "script": "#!/bin/sh\n\napt-get
      install -y git-core"}, {"is_public": true, "username": "benmanns", "id": 470,
      "deployments_total": 1, "user_defined_fields": [], "updated": "2010-04-29T21:40:15",
      "label": "Upgrade Universe", "created": "2010-04-29T21:40:04", "images": ["linode/ubuntu9.1032bit"],
      "user_gravatar_id": "92fe0217757590fcb9600a253cb76277", "description": "Enable
      the universe and restricted repos in Ubuntu 9.10 (Karmic). The script performs
      an apt-get update and then updgrades with an apt-get upgrade.", "rev_note":
      "Initial import", "deployments_active": 0, "script": "#!/bin/bash\n\nsource
      <ssinclude StackScriptID=44> # Enable Universe\n\napt-get upgrade"}, {"is_public":
      true, "username": "yann", "id": 476, "deployments_total": 25, "user_defined_fields":
      [], "updated": "2010-05-17T03:55:18", "label": "setup basic networking", "created":
      "2010-04-30T01:35:33", "images": ["linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts",
      "linode/ubuntu9.1032bit", "linode/ubuntu9.1064bit"], "user_gravatar_id": "e744128f9d1195bba5b781ee560e282f",
      "description": "- sets the hostname of the machine\r\n- sets its private ip
      (assumes netmask is always 255.255.128.0)", "rev_note": "auto eth0:0", "deployments_active":
      12, "script": "#!/bin/bash\n# <udf name=\"privip\" label=\"private ip to install
      to eth0:0\">\n# <udf name=\"hostname\" label=\"hostname\">\n\nlogfile=/root/stackscript.log\necho
      \"Setting Hostname to ${HOSTNAME}\" >> $logfile\necho ${HOSTNAME} > /etc/hostname\nhostname
      -F /etc/hostname\n\nshort=`echo ${HOSTNAME} | cut -d. -f1`\nip=`ip addr show
      label eth0 | grep ''inet '' | cut -d/ -f1 | awk ''{print $2}''`\necho \"Setting
      ip to $ip for $short\" >> $logfile\necho -e \"\\n# our own entry\\n${ip} ${HOSTNAME}
      ${short}\" >> /etc/hosts\n\necho \"Setting private interface address to ${PRIVIP}\"
      >> $logfile\ncat >>/etc/network/interfaces <<EOF\n\nauto eth0:0\niface eth0:0
      inet static\n address $PRIVIP\n netmask 255.255.128.0\nEOF\n\n/etc/init.d/networking
      restart"}, {"is_public": true, "username": "ratnikov", "id": 477, "deployments_total":
      4, "user_defined_fields": [], "updated": "2010-04-30T03:34:52", "label": "Apache
      + Passenger", "created": "2010-04-30T02:00:53", "images": ["linode/debian5.032bit",
      "linode/ubuntu10.04lts32bit"], "user_gravatar_id": "a211797acb8ea1910014a4144176453a",
      "description": "Installs Apache and Passenger module", "rev_note": "Removed
      rdoc and ri installation", "deployments_active": 1, "script": "#!/bin/bash\n\nif
      [ ! -n \"$INSTALL_PREFIX\" ]; then\n  INSTALL_PREFIX=/opt\nfi\n\nif [ ! -n \"$TMPDIR\"
      ]; then\n  TMPDIR=/var/tmp\nfi\n\nif [ ! -n \"`gem search passenger | awk ''{
      print $1 }''`\" ]; then\n  echo \"Installing passenger gem\"\n  gem install
      passenger --no-ri --no-rdoc\n  echo \"Done!\"\nfi\n\nPASSENGER_ROOT=`passenger-config
      --root`\n\n# install required apache packages\napt-get install -y apache2 apache2-mpm-prefork
      apache2-prefork-dev\n\necho \"Building apache2 passenger module...\"\nif [ -n
      \"`passenger-install-apache2-module --auto | grep ''Some required software not
      installed''`\" ]; then\n  echo \"Failed to install passenger. Skipping the rest...
      :(\"\n  exit 1\nfi\n\necho \"Enabling passenger module...\"\n\necho -e \"# Automatically
      generated configuration for passenger module\\n\\n\\\nLoadModule passenger_module
      $PASSENGER_ROOT/ext/apache2/mod_passenger.so\\n\\\nPassengerRoot $PASSENGER_ROOT\"
      > /etc/apache2/mods-available/passenger.load\n\na2enmod passenger\n\napache2ctl
      restart\n\necho \"All done!\""}, {"is_public": true, "username": "yann", "id":
      480, "deployments_total": 58, "user_defined_fields": [], "updated": "2010-08-21T23:02:21",
      "label": "chef client installation", "created": "2010-04-30T03:52:02", "images":
      ["linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts"], "user_gravatar_id":
      "e744128f9d1195bba5b781ee560e282f", "description": "Let the pros handle this
      server setup.\r\n\r\nThis setup a chef-client ready to talk to your chef-server.\r\n\r\nAfter
      booting your client you''ll need to copy your server''s /etc/chef/validation.pem
      at the same location in your client, and then re-run chef-client", "rev_note":
      "Removes workaround for a bug apparently in 0.9.8", "deployments_active": 16,
      "script": "#!/bin/bash\n\n# <udf name=\"privip\" label=\"private ip to install
      to eth0:0\">\n# <udf name=\"hostname\" label=\"hostname\">\n# <udf name=\"chef_server\"
      label=\"chef server ip address\">\n# <udf name=\"ubuntu_mirror\" label=\"ubuntu
      mirror url\" default=\"http://us.archive.ubuntu.com/ubuntu\">\nsource <ssinclude
      StackScriptID=\"476\">\n\nlogfile=/root/stackscript.log\necho \"Setting up host
      with chef\" >> $logfile\n\necho \"Adjusting sources.list (destructively)\" >>
      $logfile\n\ncat >/etc/apt/sources.list <<EOF\ndeb $UBUNTU_MIRROR lucid main
      restricted universe multiverse\ndeb-src $UBUNTU_MIRROR lucid main restricted
      universe multiverse\n\ndeb $UBUNTU_MIRROR lucid-updates main restricted universe
      multiverse\ndeb-src $UBUNTU_MIRROR lucid-updates main restricted universe multiverse\n\n#
      \n# Security updates \n#\ndeb http://security.ubuntu.com/ubuntu lucid-security
      main restricted universe multiverse \ndeb-src http://security.ubuntu.com/ubuntu
      lucid-security main restricted universe multiverse \nEOF\n\napt-get update\n\n##
      Adjusted from opscode wiki\necho \"installing chef via ruby gems\" >> $logfile\napt-get
      -y install ruby ruby1.8-dev libopenssl-ruby1.8 rdoc ri irb build-essential wget
      ssl-cert\ncd /tmp\nwget http://rubyforge.org/frs/download.php/69365/rubygems-1.3.6.tgz\ntar
      zxf rubygems-1.3.6.tgz\ncd rubygems-1.3.6\nruby setup.rb\nln -sfv /usr/bin/gem1.8
      /usr/bin/gem\ngem sources -r http://gems.rubyforge.org/\ngem sources -a http://rubygems.org/\ngem
      install chef\n\necho \"creating solo.rb\" >> $logfile\n\ncat > /root/solo.rb
      <<EOF\nfile_cache_path \"/tmp/chef-solo\"\ncookbook_path \"/tmp/chef-solo/cookbooks\"\nrecipe_url
      \"http://s3.amazonaws.com/chef-solo/bootstrap-latest.tar.gz\"\nEOF\n\necho \"Creating
      chef.json\" >> $logfile\n\ncat > /root/chef.json <<EOF\n{\n  \"bootstrap\":
      {\n    \"chef\": {\n      \"url_type\": \"http\",\n      \"init_style\": \"runit\",\n      \"path\":
      \"/srv/chef\",\n      \"serve_path\": \"/srv/chef\",\n      \"server_fqdn\":
      \"${CHEF_SERVER}\"\n    }\n  },\n  \"run_list\": [ \"recipe[bootstrap::client]\"
      ]\n}\nEOF\n\necho \"Running chef-solo\" >> $logfile\n\n# broken see the issue:
      http://github.com/opscode/cookbooks/issues#issue/7\n# seems to be fixed now\nchef-solo
      -c /root/solo.rb -j /root/chef.json >> $logfile 2>&1\n#chef-solo -c /root/solo.rb
      -j /root/chef.json >> $logfile 2>&1\n#chef-solo -c /root/solo.rb -j /root/chef.json
      >> $logfile 2>&1\n\necho \"Done\" >> $logfile"}, {"is_public": true, "username":
      "quinnebert", "id": 514, "deployments_total": 241, "user_defined_fields": [{"label":
      "MySQL root Password", "name": "db_password"}], "updated": "2011-10-31T12:36:13",
      "label": "FreeSwitch and FreePBX-v3", "created": "2010-05-09T13:40:29", "images":
      ["linode/debian632bit"], "user_gravatar_id": "b11cc75de945fce1b597cb23e0c27dc7",
      "description": "\"The quickest way to roll out FreeSwitch and FreePBX-V3 on
      a Linode!\"\r\n--Me, in an interview with myself  ;-)\r\n\r\nTO ANSWER THE BLUE.BOX
      QUESTION: I *am* looking into making a version of this StackScript that uses
      Blue.Box.  I have heard mixed reviews of it from folks I respect, but if you
      let me know you want it (see the IRC info a bit further down this description),
      it will increase my willingness to do this.\r\n\r\nUpdate: October 31, 2011:\r\nFixed
      issues that have cropped up over time.  Debian 6 x86_32 is now the ONLY supported
      distribution for sake of ease of maintenance.\r\n\r\nUpdate: May 17, 2010:\r\nI
      welcome you to join me on IRC.TBRN.NET (port 6667, if you''re picky) if you
      wish to speak with me, or a fair-sized group of my co-workers and friends.  :)\r\n\r\nUpdate:
      May 12, 2010:\r\nThanks to FreeSwitch.org for the 8-day-early birthday present
      of covering my script on their home page!  If you''re coming here from their
      review, and want to give me a birthday gift, might I simply ask you make me
      happy and visit my web site?\r\nhttp://www.QuinnEbert.net/\r\n\r\nThis i386-Debian-6
      StackScript installs FreeSwitch PBX Software, standard-definition sound and
      MoH packs, and FreePBX V3.\r\n\r\nThe steps of rolling out this stack go as-follows:\r\n1.  Deploy
      a Linode.with this StackScript.\r\n2.  Go to the web server (standard HTTP port
      - 80) on the node''s default IP address.\r\n3.  Simply run through the FreePBX
      Setup Wizard that appears in the web browser.  Use the \"root\" MySQL user (with
      the password you''ll give at deploy-time) in the wizard, and it will create
      the MySQL database for you.\r\n\r\nI *am* available to customize PBX system
      configurations, including custom deployment solutions for Linode (and possibly
      others, including Amazon EC2), contact me on the IRC channel listed below for
      further information...\r\n\r\nQuestions, Comments, Bug Reports, or Feedback?\r\nVisit
      #TheLobby on IRC.TBRN.NET\r\n\r\nThis stack script (minus the included portions
      from Linode''s StackScript Library) is provided under a CreativeCommons.org
      Attribution-Noncommercial-Share Alike 3.0 United States License\r\nDetails at:
      http://creativecommons.org/licenses/by-nc-sa/3.0/us/", "rev_note": "Updated
      to remove my e-mail address (let me know if you want to donate money)!  :-D",
      "deployments_active": 35, "script": "#!/bin/bash\n# <UDF name=\"db_password\"
      Label=\"MySQL root Password\" />\n\n# Import the Linode standard StackScript
      Library\nsource <ssinclude StackScriptID=\"1\">\n\n# Bring The System Up-to-date\nsystem_update\n\n#
      Ensure APT package list is up-to-date \napt-get -y update\n\n# Ensure OpenSSH
      Service is installed...\napt-get -y install openssh-server\n\n# MySQL Install
      and Configure first DB\nmysql_install \"$DB_PASSWORD\" && mysql_tune 40\n\n#
      Install bulk of packages we need...\napt-get -y install php5 php5-xcache php5-xmlrpc
      php5-mysql php5-gd php5-cli build-essential git git-core autoconf libgdbm-dev
      libdb-dev subversion php5-curl automake libtool libncurses5 libncurses5-dev
      php-db\n\n# less pager, wget, and vim editor\ngoodstuff\n\n# Install new packages
      needed by FS as of our Q4-2011 checkup...\napt-get -y install pkg-config automake
      autoconf libsigc++-2.0-dev libssl-dev libjpeg-dev\n\n# CD into the sourcecode
      directory...\ncd /usr/local/src\n\n# Use GIT to grab freeswitch...\ngit clone
      git://git.freeswitch.org/freeswitch.git\n\n# CD into the freeswitch code directory...\ncd
      /usr/local/src/freeswitch\n\n##\n## FREESWITCH INSTALLATION\n##\n#\n# All of
      this is done in one line, to allow fallthrough on-failure...\n#\n# Bootstrap
      for the freeswitch configuration...\n./bootstrap.sh\n# Configure the freeswitch
      code for compilation...\n./configure\n# BUILD FREESWITCH -- 5 parallel jobs
      (Linodes have 4 cores)...\nmake -j5\n# INSTALL FREESWITCH\nmake install\n# INSTALL
      FREESWITCH SOUNDS -AND- MOH\nmake all cd-sounds-install cd-moh-install\n# BRING
      UP FREESWITCH IN DAEMON MODE\ncd /usr/local/freeswitch/bin\n./freeswitch -ncwait\n\n#
      Install PHP with Apache, and tune PHP\nphp_install_with_apache && php_tune\n#
      Post-Setup and Tune Apache\napache_install && apache_tune 40\n\n##\n## FREEPBX
      INSTALLATION\n##\n# \n# Put ourselves in the proper directory...\n# \ncd /var/www\n#
      \n# Grab the FreePBX codebase...\n# \nsvn co http://www.freepbx.org/v3/svn/trunk/
      freepbx-v3/\n# \n# Set up filesystem permissions proper...\n# \nchgrp -R www-data
      /usr/local/freeswitch/conf/*\nchmod -R g+w /usr/local/freeswitch/conf/*\nchmod
      777 freepbx-v3/freepbx/logs/\nchmod 777 freepbx-v3/freepbx/cache/\nchgrp -R
      www-data freepbx-v3/freepbx/config/*\nchmod -R g+w freepbx-v3/freepbx/config/*\nmkdir
      freepbx-v3/upload\nchgrp -R www-data freepbx-v3/upload\nchmod -R g+w freepbx-v3/upload\n\n#
      Redirect direct HTTP request to FreePBX3 Interface...\necho ''<?php header(\"Location:
      /freepbx-v3/\");'' > /var/www/index.php\n\n# cleanup after stackscripts\nrestartServices\n\n#
      enable \"default\" apache \"site\"\na2ensite default\n# restart apache for good
      measure\n/etc/init.d/apache2 stop\necho -n ''Sleeping 5 seconds for sanity...''
      && sleep 5 && echo ''Moving on...''\n/etc/init.d/apache2 start\n# enable mod_rewrite
      on apache\na2enmod rewrite\n# restart apache (again) for good measure\n/etc/init.d/apache2
      stop\necho -n ''Sleeping 5 seconds for sanity...'' && sleep 5 && echo ''Moving
      on...''\n/etc/init.d/apache2 start\n\n# OK, make fixups for FreePBX''s PHP warnings:\necho
      ''post_max_size = 10M'' >> ''/etc/php5/apache2/conf.d/freepbx3.ini''\necho ''upload_max_filesize
      = 10M'' >> ''/etc/php5/apache2/conf.d/freepbx3.ini''\necho ''max_execution_time
      = 120'' >> ''/etc/php5/apache2/conf.d/freepbx3.ini''\necho ''max_input_time
      = 240'' >> ''/etc/php5/apache2/conf.d/freepbx3.ini''\n# And, one FINAL Apache
      restart (to apply those settings)\n/etc/init.d/apache2 stop\necho -n ''Sleeping
      5 seconds for sanity...'' && sleep 5 && echo ''Moving on...''\n/etc/init.d/apache2
      start\n\n# Finally, let''s remove that stupid \"It Works!\" page, allowing the
      PHP redirect\n# to be used...\nrm -f /var/www/index.htm /var/www/index.html\n\n#
      Finished...Let them know...\necho ''All done!  If you REALLY want to use Lish
      for administration, you can''\necho ''press CTRL+C to do so immediately, or
      pause 5 minutes for this script''\necho ''to exit on its own.  NOTE: exiting
      this script MAY clear the console!''\n\n# Wait for five minutes...\nsleep 300\n\n#
      Clean up the view...\nclear\n\n#               #\n# ALL DONE HERE #\n#               #"},
      {"is_public": true, "username": "cicloid", "id": 629, "deployments_total": 3,
      "user_defined_fields": [], "updated": "2011-03-03T15:30:50", "label": "LEMPy_lib",
      "created": "2010-06-04T06:48:39", "images": ["linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts",
      "linode/ubuntu10.1032bit", "linode/ubuntu10.10", "linode/ubuntu9.1032bit", "linode/ubuntu9.1064bit"],
      "user_gravatar_id": "7429aeaae3b048d1913ee94796257f9a", "description": "Based
      on Rnolen work", "rev_note": "PHP fpm in Maverick!", "deployments_active": 0,
      "script": "#!/bin/bash\n\nfunction groundwork {\n  lempy_system_update_aptitude                            \n  hostname
      `get_rdns_primary_ip`\n  verygoodstuff                                           \n  postfix_install_loopback_only\n}\n\n#################################\n#
      system update   #\n#################################\n\nfunction lempy_system_update_aptitude
      {\n\n#set console encoding so user isn''t prompted. this was needed for the
      8.04 SS and I won''t remove it since it doesn''t hurt anything.\n  echo \"console-setup
      console-setup/charmap select UTF-8\" | debconf-set-selections\n\n#i prefer aptitude.
      you may not.\n  aptitude update\n  aptitude -y full-upgrade #only sissies use
      safe-upgrade. ARE YOU A SISSY?\n\n#need wget.\n  aptitude install -y wget\n  aptitude
      install -y sudo\n  system_update\n}\n\nfunction lempy_rvm {\n  groupadd wheel\n  cp
      /etc/sudoers /etc/sudoers.tmp\n  chmod 0640 /etc/sudoers.tmp\n  echo \"%wheel
      ALL = (ALL) ALL\" >> /etc/sudoers.tmp\n  chmod 0440 /etc/sudoers.tmp\n  mv /etc/sudoers.tmp
      /etc/sudoers\n\n  useradd -m -s /bin/bash -G wheel \"$ADMIN_LOGIN\"\n  echo
      \"${ADMIN_LOGIN}:${ADMIN_PASSWORD}\" | chpasswd\n\n  export rvm_group_name=\"$GROUP_NAME\"\n  aptitude
      -y install curl bison build-essential zlib1g-dev libssl-dev libreadline5-dev
      libxml2-dev git-core\n  bash < <( curl -L http://bit.ly/rvm-install-system-wide
      )\n\n  usermod -a -G \"$GROUP_NAME\" \"$ADMIN_LOGIN\"\n}\n\n#################################\n#
      mysql install   #\n#################################\n\nfunction lempy_mysql_install
      {\n  echo \"mysql-server-5.1 mysql-server/root_password password $DB_PASSWORD\"
      | debconf-set-selections\n  echo \"mysql-server-5.1 mysql-server/root_password_again
      password $DB_PASSWORD\" | debconf-set-selections\n  aptitude -y install mysql-server\n\n}\n\n#################################\n#
      PHP-FPM     #\n#################################\n\nfunction lempy_phpfpm {\n\n  aptitude
      -y install python-software-properties php5-fpm php-apc php5-cgi php5-cli php5-mysql
      php5-common php-pear php5-curl php5-suhosin php5-gd php5-imagick imagemagick\n\n  echo
      \"apc.shm_size = 64\" >> /etc/php5/conf.d/apc.ini\n  echo \"apc.rfc1867 = on\"
      >> /etc/php5/conf.d/apc.ini\n  sed -i''.original'' ''s/^# configuration for
      php imagick module/; configuration for php imagick module/'' /etc/php5/conf.d/imagick.ini\n\n#have
      /etc/init.d/php-fpm run on boot\n  update-rc.d php5-fpm defaults\n\n#php5-fpm
      conf\n\n#sockets > ports. Using the 127.0.0.1:9000 stuff needlessly introduces
      TCP/IP overhead.\n  sed -i ''s/listen = 127.0.0.1:9000/listen = \\/var\\/run\\/php5-fpm.sock/''
      /etc/php5/fpm/pool.d/www.conf\n#\n#nice strict permissions\n  sed -i ''s/;listen.owner
      = www-data/listen.owner = www-data/'' /etc/php5/fpm/pool.d/www.conf\n  sed -i
      ''s/;listen.group = www-data/listen.group = www-data/'' /etc/php5/fpm/pool.d/www.conf\n  sed
      -i ''s/;listen.mode = 0666/listen.mode = 0600/'' /etc/php5/fpm/pool.d/www.conf\n#\n#these
      settings are fairly conservative and can probably be increased without things
      melting\n  sed -i ''s/pm.max_children = 50/pm.max_children = 12/'' /etc/php5/fpm/pool.d/www.conf\n  sed
      -i ''s/pm.start_servers = 20/pm.start_servers = 4/'' /etc/php5/fpm/pool.d/www.conf\n  sed
      -i ''s/pm.min_spare_servers = 5/pm.min_spare_servers = 2/'' /etc/php5/fpm/pool.d/www.conf\n  sed
      -i ''s/pm.max_spare_servers = 35/pm.max_spare_servers = 4/'' /etc/php5/fpm/pool.d/www.conf\n  sed
      -i ''s/pm.max_requests = 0/pm.max_requests = 500/'' /etc/php5/fpm/pool.d/www.conf\n#\n\n\n#Engage.\n  /etc/init.d/php5-fpm
      start\n\n}\n\n\n#################################\n# nginx     #\n#################################\n\nfunction
      lempy_nginx {\n  #install it.\n  aptitude install nginx\n  # consensus of nginx
      mailing list seems to be children should be a multiple of available processors.
      considering nginx''s asynchronous nature, 4 is plenty.\n  sed -i ''s/worker_processes\\
      \\ 1/worker_processes\\ 4/'' /etc/nginx/nginx.conf\n  #Make it so.\n  /etc/init.d/nginx
      start\n}\n\n#################################\n# very good stuff     #\n#################################\n\n\nfunction
      verygoodstuff {\n  # Installs the REAL vim, wget, less, and enables color root
      prompt and the \"ll\" list long alias\n\n  apt-get -y install wget vim less
      git-core git-svn subversion zsh wget build-essential autoconf2.13 python-software-properties\n  wget
      http://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - |
      sh\n  sed -i ''s/robbyrussell/xiong-chiamiov/'' /root/.zshrc\n  \n  cat > /root/.oh-my-zsh/custom/fix-delete.zsh
      << EOF\n\n# Ignore commands from history that are preceeded by a whitespace\nsetopt
      hist_ignore_space\nbindkey    \"^[[3~\"          delete-char\nbindkey    \"^[3;5~\"         delete-char\nEOF\n\n}"},
      {"is_public": true, "username": "cicloid", "id": 630, "deployments_total": 31,
      "user_defined_fields": [{"  label": "MySQL root Password", "name": "DB_PASSWORD"},
      {"label": "Admin Login", "name": "admin_login"}, {"label": "Admin Password",
      "name": "admin_password"}, {"label": "RVM Group name", "name": "group_name",
      "default": "rvm"}], "updated": "2011-03-03T15:31:14", "label": "LEMPy", "created":
      "2010-06-04T06:49:28", "images": ["linode/ubuntu10.1032bit", "linode/ubuntu10.10"],
      "user_gravatar_id": "7429aeaae3b048d1913ee94796257f9a", "description": "Based
      on rnolen work\r\n\r\n- RVM\r\n- ZShell\r\n- PHP-FPM\r\n- MySQL", "rev_note":
      "Initial import", "deployments_active": 4, "script": "#!/bin/bash\n\n# scripts
      used\nsource <ssinclude StackScriptID=\"1\">    # StackScript Lib by Linode\nsource
      <ssinclude StackScriptID=\"629\">    # LEMPy_lib\n\n# functions to use from
      sourced scripts\ngroundwork\nmysql_install \"$DB_PASSWORD\" && mysql_tune 40           #
      StackScriptID=\"1\"\nlempy_nginx                                             #
      StackScriptID=\"629\"\nlempy_rvm  \nlempy_phpfpm\n\n\n#yu di efs\n# <UDF name=\"DB_PASSWORD\"   Label=\"MySQL
      root Password\" />\n# <udf name=\"admin_login\" label=\"Admin Login\" />\n#
      <udf name=\"admin_password\" label=\"Admin Password\" />\n# <udf name=\"group_name\"
      label=\"RVM Group name\" default=\"rvm\" />"}, {"is_public": true, "username":
      "cicloid", "id": 631, "deployments_total": 10, "user_defined_fields": [{"\t\tlabel":
      "MySQL root Password", "name": "DB_PASSWORD"}], "updated": "2010-09-12T16:01:18",
      "label": "MYSQLy", "created": "2010-06-04T09:35:23", "images": ["linode/ubuntu10.04lts32bit",
      "linode/ubuntu10.04lts"], "user_gravatar_id": "7429aeaae3b048d1913ee94796257f9a",
      "description": "MySQL only install", "rev_note": "Reimport from LEMPy", "deployments_active":
      5, "script": "#!/bin/bash\n\n# scripts used\n  source <ssinclude StackScriptID=\"1\">\t\t#
      StackScript Lib by Linode\n  source <ssinclude StackScriptID=\"629\">\t\t# LEMPy_lib\n\n#
      functions to use from sourced scripts\n  lempy_system_update_aptitude\t\t\t\t\t\t\t              #
      StackScriptID=\"629\"\n  verygoodstuff                                           #
      StackScriptID=\"629\" // Just the good stuff\n  postfix_install_loopback_only                           #
      StackScriptID=\"1\"\n  mysql_install \"$DB_PASSWORD\" && mysql_tune 40           #
      StackScriptID=\"1\"\n  lempy_ree  \n\n\n#yu di efs\n# <UDF name=\"DB_PASSWORD\"\t\tLabel=\"MySQL
      root Password\" />"}, {"is_public": true, "username": "sutto", "id": 678, "deployments_total":
      42, "user_defined_fields": [], "updated": "2010-07-16T13:18:16", "label": "RVM
      System Wide Install", "created": "2010-06-18T15:21:17", "images": ["linode/ubuntu10.04lts32bit",
      "linode/ubuntu10.04lts", "linode/ubuntu9.1032bit", "linode/ubuntu9.1064bit"],
      "user_gravatar_id": "72d5f419e4a520ff4fe452400eac83d4", "description": "Installs
      RVM on a system-wide basis and sets up a single administrator account (including
      sudo access).\r\n\r\nPlease allow a few minutes post-first-boot for it to set
      itself up.\r\n\r\nAdmin code is based off of https://www.linode.com/stackscripts/view/?StackScriptID=308",
      "rev_note": "Use new url", "deployments_active": 8, "script": "#!/bin/bash\n#
      <udf name=\"admin_login\" label=\"Admin Login\" />\n# <udf name=\"admin_password\"
      label=\"Admin Password\" />\n# <udf name=\"group_name\" label=\"RVM Group name\"
      default=\"rvm\" />\nsource <ssinclude StackScriptID=\"1\">\n\nsystem_update\nhostname
      `get_rdns_primary_ip`\n\naptitude -y install sudo\ngroupadd wheel\ncp /etc/sudoers
      /etc/sudoers.tmp\nchmod 0640 /etc/sudoers.tmp\necho \"%wheel ALL = (ALL) ALL\"
      >> /etc/sudoers.tmp\nchmod 0440 /etc/sudoers.tmp\nmv /etc/sudoers.tmp /etc/sudoers\n\nuseradd
      -m -s /bin/bash -G wheel \"$ADMIN_LOGIN\"\necho \"${ADMIN_LOGIN}:${ADMIN_PASSWORD}\"
      | chpasswd\n\nexport rvm_group_name=\"$GROUP_NAME\"\naptitude -y install curl
      bison build-essential zlib1g-dev libssl-dev libreadline5-dev libxml2-dev git-core\nbash
      < <( curl -L http://bit.ly/rvm-install-system-wide )\n\nusermod -a -G \"$GROUP_NAME\"
      \"$ADMIN_LOGIN\""}, {"is_public": true, "username": "lazaros", "id": 701, "deployments_total":
      90, "user_defined_fields": [{"label": "MySQL root Password", "name": "db_password"},
      {"example": "Drupal database name", "label": "Create Database", "name": "db_name"},
      {"example": "Drupal database user", "label": "Create MySQL User", "name": "db_user"},
      {"example": "Drupal database user''s password", "label": "MySQL User''s Password",
      "name": "db_user_password"}, {"example": "Optional fully qualified hostname,
      ie www.mydomain.com - if empty, the hostname will default to the one assigned
      by Linode.", "label": "Fully Qualified Domain Name", "name": "fqdn", "default":
      ""}, {"example": "Optional username to setup with password-less sudo access.  You
      must also add the ssh public key below.  This user is added as the first step,
      so you can ssh in before the script is finished.", "label": "Administrative
      User", "name": "admin_user", "default": ""}, {"example": "Optional SSH public
      key (from ~/.ssh/id_dsa.pub) to be associated with the Administrative User above.",
      "label": "Administrative User''s SSH Public Key", "name": "admin_pubkey", "default":
      ""}, {"example": "Optional email address to send notification to when finished.",
      "label": "Send Finish Notification To", "name": "notify_email", "default": ""},
      {"example": "URL of Apache Solr build to use.  See http://hudson.zones.apache.org/hudson/job/Solr-trunk/lastSuccessfulBuild/artifact/trunk/solr/dist/*.tgz
      for a list, or use the default.", "label": "URL for Solr Build", "name": "solr_tgz",
      "default": "http://mirror.atlanticmetro.net/apache/lucene/solr/1.4.0/apache-solr-1.4.0.tgz"},
      {"example": "Currently 1.0 is the only supported release.", "oneof": "1.0",
      "label": "Which release of Mercury?", "name": "pantheon_branch", "default":
      "1.0"}], "updated": "2010-06-23T14:26:06", "label": "Mercury", "created": "2010-06-23T14:25:48",
      "images": ["linode/ubuntu10.04lts"], "user_gravatar_id": "e2582f45df8b1328161df7ed671c7c22",
      "description": "Mercury", "rev_note": "Initial import", "deployments_active":
      11, "script": "#!/bin/bash                                                                        \n#
      <UDF name=\"db_password\" Label=\"MySQL root Password\" />\n# <UDF name=\"db_name\"
      Label=\"Create Database\" example=\"Drupal database name\" />\n# <UDF name=\"db_user\"
      Label=\"Create MySQL User\" example=\"Drupal database user\" />\n# <UDF name=\"db_user_password\"
      Label=\"MySQL User''s Password\" example=\"Drupal database user''s password\"
      />\n# <UDF name=\"fqdn\" Label=\"Fully Qualified Domain Name\" default=\"\"
      example=\"Optional fully qualified hostname, ie www.mydomain.com - if empty,
      the hostname will default to the one assigned by Linode.\" />\n# <UDF name=\"admin_user\"
      Label=\"Administrative User\" default=\"\" example=\"Optional username to setup
      with password-less sudo access.  You must also add the ssh public key below.  This
      user is added as the first step, so you can ssh in before the script is finished.\"
      />\n# <UDF name=\"admin_pubkey\" Label=\"Administrative User''s SSH Public Key\"
      default=\"\" example=\"Optional SSH public key (from ~/.ssh/id_dsa.pub) to be
      associated with the Administrative User above.\" />\n# <UDF name=\"notify_email\"
      Label=\"Send Finish Notification To\" default=\"\" example=\"Optional email
      address to send notification to when finished.\" />\n# <UDF name=\"solr_tgz\"
      Label=\"URL for Solr Build\" default=\"http://mirror.atlanticmetro.net/apache/lucene/solr/1.4.0/apache-solr-1.4.0.tgz\"
      example=\"URL of Apache Solr build to use.  See http://hudson.zones.apache.org/hudson/job/Solr-trunk/lastSuccessfulBuild/artifact/trunk/solr/dist/*.tgz
      for a list, or use the default.\" />\n# <UDF name=\"pantheon_branch\" Label=\"Which
      release of Mercury?\" default=\"1.0\" oneOf=\"1.0\" example=\"Currently 1.0
      is the only supported release.\">\n\n# StackScript written by Justin Ellison
      <justin@techadvise.com>\n\nsource <ssinclude StackScriptID=\"1\">\n\nfunction
      logit {\n\t# Simple logging function that prepends an easy-to-find marker ''=>
      '' and a timestamp to a message\n\tTIMESTAMP=$(date -u +''%m/%d %H:%M:%S'')\n    MSG=\"=>
      ${TIMESTAMP} $1\"\n    echo ${MSG}\n}\n\nfunction drush_install {\n \n    echo\n    logit
      \"Installing drush\"\n    apt-get -y install php5-cli php5-gd cvs git-core unzip
      curl\n    cd /tmp && cvs -z6 -d:pserver:anonymous:anonymous@cvs.drupal.org:/cvs/drupal-contrib
      checkout -d drush contributions/modules/drush\n    if [ ! -f /tmp/drush/drush
      ]; then\n        echo \"Could not checkout drush from cvs\"\n        exit 1                            \n    fi\n
      \n    cd /usr/local && /tmp/drush/drush dl drush \n    # drush changed dl behavior
      of itself.  Sometimes it dl''s to cwd, other times to ~/.drush/drush\n    if
      [ -d ~/.drush/drush ]; then\n        mv ~/.drush/drush .\n    fi\n    cd bin
      && ln -s ../drush/drush drush\n    if [ ! -x /usr/local/bin/drush ]; then\n        echo
      \"Could not install drush in /usr/local/bin\"\n        exit 1                    \n    fi\n
      \n    cd && rm -rf /tmp/drush\n    logit \"Done installing drush\"\n}\n\nfunction
      get_ubuntu_version {\n    VER=$(grep DISTRIB_RELEASE /etc/lsb-release | cut
      -d''='' -f2)\n    echo ${VER}\n}\n\nfunction get_ubuntu_version_name {\n    NAME=$(grep
      DISTRIB_CODENAME /etc/lsb-release | cut -d''='' -f2)\n    echo ${NAME}\n}\n\nfunction
      update_sources {\n\techo \n    logit \"Setting up apt sources and applying updates\"\n    REL_NAME=$(get_ubuntu_version_name)\n    #Enable
      universe\n    sed -i ''s/^#\\(.*\\) universe/\\1 universe/'' /etc/apt/sources.list\n    \n    #Add
      bzr and bcfg2 ppa''s\n    cat <<EOD > /etc/apt/sources.list.d/bzr.list\ndeb
      http://ppa.launchpad.net/bzr/ppa/ubuntu ${REL_NAME} main\ndeb-src http://ppa.launchpad.net/bzr/ppa/ubuntu
      ${REL_NAME} main\nEOD\n    cat <<EOD > /etc/apt/sources.list.d/bcfg2.list\ndeb
      http://ppa.launchpad.net/bcfg2/ppa/ubuntu ${REL_NAME} main\ndeb-src http://ppa.launchpad.net/bcfg2/ppa/ubuntu
      ${REL_NAME} main\nEOD\n\n    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys
      8C6C1EFD\n    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 98932BEC\n    apt-get
      -y update\n    apt-get -y install language-pack-en-base\n    dpkg-reconfigure
      locales\n    apt-get -y upgrade\n    apt-get -y dist-upgrade\n    \n    # NOTE:
      When bcfg2 installs memcached, apt starts the service using the default config
      - a single instance.\n    # After bcfg2 reconfigures memcached to use multiple
      instances, the original single instance''s pid is lost, and causes issues.\n    #
      We pre-install it, then stop it so that bcfg2 simply starts it when done configuring
      it\n    apt-get -y install memcached\n    /etc/init.d/memcached stop\n    logit
      \"Done setting up apt sources and applying updates\"\n}\n\nfunction setup_BCFG2
      {\n\techo\n    logit \"Setting up BCFG2\"\n    apt-get -y install bzr bcfg2-server
      gamin python-gamin python-genshi\n    BCFG_FQDN=localhost\n    REL_NAME=$(get_ubuntu_version_name)\n    cat
      <<EOD > /etc/bcfg2.conf\n[server]\nrepository = /var/lib/bcfg2\nplugins = Base,Bundler,Cfg,Metadata,Packages,Probes,Rules,SSHbase,TGenshi\nfilemonitor
      = gamin\n\n[statistics]\nsendmailpath = /usr/lib/sendmail\ndatabase_engine =
      sqlite3\n# ''postgresql'', ''mysql'', ''mysql_old'', ''sqlite3'' or ''ado_mssql''.\ndatabase_name
      =\n# Or path to database file if using sqlite3.\n#<repository>/etc/brpt.sqlite
      is default path if left empty\ndatabase_user =\n# Not used with sqlite3.\ndatabase_password
      =\n# Not used with sqlite3.\ndatabase_host =\n# Not used with sqlite3.\ndatabase_port
      =\n# Set to empty string for default. Not used with sqlite3.\nweb_debug = True\n\n[communication]\nprotocol
      = xmlrpc/ssl\npassword = foobat\ncertificate = /etc/bcfg2.crt\nkey = /etc/bcfg2.key\nca
      = /etc/bcfg2.crt\n\n[components]\nbcfg2 = https://${BCFG_FQDN}:6789\nEOD\n    openssl
      req -batch -x509 -nodes -subj \"/C=US/ST=Illinois/L=Argonne/CN=${BCFG_FQDN}\"
      -days 1000 -newkey rsa:2048 -keyout /etc/bcfg2.key -noout\n    openssl req -batch
      -new  -subj \"/C=US/ST=Illinois/L=Argonne/CN=${BCFG_FQDN}\" -key /etc/bcfg2.key
      | openssl x509 -req -days 1000 -signkey /etc/bcfg2.key -out /etc/bcfg2.crt\n    chmod
      0600 /etc/bcfg2.key\n    \n    rm -rf /var/lib/bcfg2/\n        \n    bzr branch
      lp:pantheon/$(get_branch) /var/lib/bcfg2\n    if [ -n \"$(grep ''-vps-'' /var/lib/bcfg2/Metadata/groups.xml)\"
      ]; then\n        PROFILE=\"mercury-ubuntu-vps\"\n    else \n        PROFILE=\"mercury-ubuntu-${REL_NAME}-32\"\n        sed
      -i \"s/jaunty/${REL_NAME}/\" /var/lib/bcfg2/Packages/config.xml\n        sed
      -i \"s/^    <Group name=''amazon-web-services''\\/>/    <Group name=''rackspace''\\/>/\"
      /var/lib/bcfg2/Metadata/groups.xml\n        sed -i \"s/^    <Group name=''ubuntu-jaunty''\\/>/    <Group
      name=''ubuntu-${REL_NAME}''\\/>/\" /var/lib/bcfg2/Metadata/groups.xml\n    fi\n    \n    cat
      <<EOD > /var/lib/bcfg2/Metadata/clients.xml\n\n<Clients version=\"3.0\">\n   <Client
      profile=\"${PROFILE}\" pingable=\"Y\" pingtime=\"0\" name=\"${BCFG_FQDN}\"/>\n</Clients>
      \nEOD\n    logit \"Done setting up BCFG2\"\n}\n\nfunction start_BCFG2 {\n\techo\n    logit
      \"Starting BCFG2 server\"\n    rm -rf /var/www\n    /etc/init.d/bcfg2-server
      start\n    echo \"Waiting for BCFG2 to start...\"\n    while [ -z \"$(netstat
      -atn | grep :6789)\" ]; do\n      sleep 5\n    done\n    logit \"Done starting
      BCFG2 server\"\n\techo\n    logit \"Running BCFG2 client\"\n    bcfg2 -vqed\n    logit
      \"Done running BCFG2 client\"\n}\n    \nfunction install_pressflow {\n\techo\n    logit
      \"Installing pressflow\"\n    bzr branch --use-existing-dir lp:pressflow /var/www\n    mkdir
      /var/www/sites/default/files  \n    mkdir /var/www/sites/all/modules\n    for
      mod in memcache-6.x-1.x-dev varnish; do\n        /usr/local/bin/drush dl --destination=/var/www/sites/all/modules
      ${mod}\n    done\n    cp /var/www/sites/default/default.settings.php /var/www/sites/default/settings.php\n    chown
      -R root:www-data /var/www/*\n    chmod -R 775 /var/www/sites\n    chmod 755
      /var/www/sites/all/modules/\n    # Linode''s mysql_create_database function
      doesn''t escape properly, so we use mysqladmin instead\n    /usr/bin/mysqladmin
      create -u root -p\"${DB_PASSWORD}\" \"${DB_NAME}\"\n    mysql_create_user \"$DB_PASSWORD\"
      \"$DB_USER\" \"$DB_USER_PASSWORD\"\n    mysql_grant_user \"$DB_PASSWORD\" \"$DB_USER\"
      \"$DB_NAME\"          \n    sed -i \"/^$db_url/s/mysql\\:\\/\\/username:password/mysqli\\:\\/\\/$DB_USER:$DB_USER_PASSWORD/\"
      /var/www/sites/default/settings.php                                                              \n    sed
      -i \"/^$db_url/s/databasename/$DB_NAME/\" /var/www/sites/default/settings.php               \n    logit
      \"Done installing pressflow\"\n}\n\nfunction install_mercury_profile {\n\techo\n    logit
      \"Installing Mercury Drupal Profile\"\n    bzr --use-existing-dir branch lp:pantheon/profiles
      /var/www/profiles/\n    logit \"Done installing Mercury Drupal Profile\"\n}\n\nfunction
      install_solr {\n\techo\n    logit \"Installing Solr\"\n    DATE=$(date +%Y-%m-%d)\n    apt-get
      -y install wget tomcat6\n    wget \"${SOLR_TGZ}\" -O /var/tmp/solr.tgz\n    cd
      /var/tmp/\n    tar -xzf solr.tgz\n    mv apache-solr-1.4.0/example/solr /var/\n    mv
      apache-solr-1.4.0/dist/apache-solr-1.4.0.war /var/solr/solr.war\n    # Workaround
      for bug reported here: http://colabti.org/irclogger/irclogger_log/bcfg2?date=2010-04-01#l29\n    #
      Since bcfg2 hangs when starting jsvc, we pre-install and configure everything
      tomcat, so bcfg2 doesn''t attempt to reconfig and restart it.\n    apt-get -y
      install ca-certificates-java default-jre-headless gcj-4.3-base icedtea-6-jre-cacao
      java-common \\\n      libaccess-bridge-java libcommons-collections-java libcommons-dbcp-java
      libcommons-pool-java libcups2 \\\n      libecj-java libecj-java-gcj libgcj9-0
      libgcj9-jar libgcj-bc libgcj-common liblcms1 libservlet2.5-java \\\n      rhino
      tomcat6 tzdata-java\n    chown -R tomcat6:root /var/solr/\n    cp /var/lib/bcfg2/Cfg/etc/default/tomcat6/tomcat6
      /etc/default/tomcat6\n    chown -R root:tomcat6 /etc/tomcat6/Catalina\n    cp
      /var/lib/bcfg2/Cfg/etc/tomcat6/Catalina/localhost/solr.xml/solr.xml /etc/tomcat6/Catalina/localhost/solr.xml\n    if
      [ -e /var/lib/bcfg2/TGenshi/etc/tomcat6/server.xml/template.newtxt ]; then\n        #
      \"New\" way of firing probes instead of running config_mem.sh\n        THREADS=$(bash
      /var/lib/bcfg2/Probes/set_tomcat_max_threads)\n        cp /var/lib/bcfg2/TGenshi/etc/tomcat6/server.xml/template.newtxt
      /etc/tomcat6/server.xml\n        sed -i \"s/\\${metadata.Probes\\[''set_tomcat_max_threads''\\]}/${THREADS}/\"
      /etc/tomcat6/server.xml\n    else\n        cp /var/lib/bcfg2/Cfg/etc/tomcat6/server.xml/server.xml
      /etc/tomcat6/server.xml\n    fi\n    /etc/init.d/tomcat6 restart\n    logit
      \"Done installing Solr\"\n}\n\nfunction install_solr_module {\n\techo\n    logit
      \"Installing Solr Drupal module\"\n    drush dl --destination=/var/www/sites/all/modules
      apachesolr\n    svn checkout -r22 http://solr-php-client.googlecode.com/svn/trunk/
      /var/www/sites/all/modules/apachesolr/SolrPhpClient\n    mv /var/www/sites/all/modules/apachesolr/schema.xml
      /var/solr/conf/\n    mv /var/www/sites/all/modules/apachesolr/solrconfig.xml
      /var/solr/conf/ \n    logit \"Done installing Solr Drupal module\"\n}\n\nfunction
      init_mercury {\n\techo\n    logit \"Initializing Mercury\"\n    hostname $(get_rdns_primary_ip)
      \n    \n    if [ -n \"$(grep netstat /etc/mercury/init.sh)\" ]; then\n        #
      The changes we need to be there are present, we can just call init.sh\n        /etc/mercury/init.sh\n    else\n        #
      We need to manually run some of this\n        echo `date` > /etc/mercury/incep\n        ID=`hostname
      -f | md5sum | sed ''s/[^a-zA-Z0-9]//g''`\n        /etc/mercury/config_mem.sh\n        curl
      \"http://getpantheon.com/pantheon.php?id=$ID&product=mercury\"\n    fi\n    logit
      \"Done initializing Mercury\"\n}\n\nfunction get_branch {\n\tif [ \"${PANTHEON_BRA***REMOVED***H}\"
      == \"1\" ]; then\n\t\techo \"1.0\"\n\telse\n      echo ${PANTHEON_BRA***REMOVED***H}\n    fi\n}\n\nfunction
      set_fqdn {\n\tlogit \"Setting FQDN to $1\"\n\tFQDN=$1\n\tHOSTNAME=`echo \"${FQDN}\"
      | cut -d''.'' -f1`\n\tDOMAINNAME=`echo \"${FQDN}\" | cut -d''.'' -f2-`\n\tlogit
      \"Hostname is ${HOSTNAME}, domain name is ${DOMAINNAME}\"\n\techo \"${HOSTNAME}\"
      > /etc/hostname\n    sed -i \"s/domain .*/domain ${DOMAINNAME}/\" /etc/resolv.conf\n    sed
      -i \"s/search .*/search ${DOMAINNAME}/\" /etc/resolv.conf\n    hostname ${HOSTNAME}\n\tlogit
      \"Done setting FQDN to $1\"\n}\n\nfunction add_admin_user {\n    USER=$1\n    PUBKEY=$2\n\tlogit
      \"Adding admin user ''${USER}''\"\n    useradd -m -G sudo ${USER}\n    mkdir
      -p /home/${USER}/.ssh/\n    echo \"${PUBKEY}\" > /home/${USER}/.ssh/authorized_keys\n    chown
      ${USER}:${USER} /home/${USER}/.ssh/authorized_keys\n    chmod 600 /home/${USER}/.ssh/authorized_keys\n    sed
      -i ''s/^# %sudo/%sudo /'' /etc/sudoers\n\tlogit \"Done adding admin user ''${USER}''\"\n}\n\n#Log
      everything to a file\nexec &> /root/stackscript.log\n\nif [ -n \"${ADMIN_USER}\"
      ]; then\n    if [ -n \"${ADMIN_PUBKEY}\" ]; then\n        add_admin_user \"${ADMIN_USER}\"
      \"${ADMIN_PUBKEY}\"\n    fi\nfi\n\nif [ -n \"${FQDN}\" ]; then\n\tset_fqdn ${FQDN}\nfi\n\nupdate_sources\necho\nlogit
      \"Installing and configuring Postfix\"\npostfix_install_loopback_only\nlogit
      \"Done installing and configuring Postfix\"\n\necho \"mysql-server-5.1 mysql-server/root_password
      password ${DB_PASSWORD}\" | debconf-set-selections\necho \"mysql-server-5.1
      mysql-server/root_password_again password ${DB_PASSWORD}\" | debconf-set-selections\nsetup_BCFG2\n#Tomcat
      looks for solr.war when starting, so we do solr before bcfg2\ninstall_solr\nstart_BCFG2\ndrush_install\ninstall_pressflow\ninstall_solr_module
      \n\n# Do we need to pull a separate mercury profile from launchpad?\nif [ !
      -e /var/lib/bcfg2/Cfg/var/www/profiles/mercury/mercury.profile ]; then\n  install_mercury_profile\nfi\n\ninit_mercury\necho\nlogit
      \"Restarting services\"\nrestartServices\nlogit \"Done restarting services\"\n\nif
      [ -n \"${NOTIFY_EMAIL}\" ]; then\n    logit \"Sending notification email to
      ${NOTIFY_EMAIL}\"\n    /usr/sbin/sendmail \"${NOTIFY_EMAIL}\" <<EOD\nTo: ${NOTIFY_EMAIL}\nSubject:
      Mercury StackScript is complete\nFrom: Mercury StackScript <no-reply@linode.com>\n\nYour
      Mercury installation is complete and now ready to be configured: http://$(system_primary_ip)/install.php  Select
      \"Mercury\" as your installation profile, and continue as you normally would.\n\nEnjoy
      the speed of Mercury!\nEOD\nfi"}, {"is_public": true, "username": "angelbob",
      "id": 708, "deployments_total": 1, "user_defined_fields": [], "updated": "2011-01-17T18:39:11",
      "label": "Enable universe for any Ubuntu", "created": "2010-06-24T07:05:33",
      "images": ["linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts", "linode/ubuntu9.1032bit",
      "linode/ubuntu9.1064bit"], "user_gravatar_id": "5e8107f48d4471a40de325151d589b6d",
      "description": "", "rev_note": "Initial import - copy of ", "deployments_active":
      1, "script": "#!/bin/bash\n\nexport CODENAME=`lsb_release -sc`\n\n# New sources.list\ncat
      > /etc/apt/sources.list << EOF\n## main & restricted repositories\n\ndeb http://us.archive.ubuntu.com/ubuntu/
      $CODENAME main restricted\ndeb-src http://us.archive.ubuntu.com/ubuntu/ $CODENAME
      main restricted\n\ndeb http://security.ubuntu.com/ubuntu $CODENAME-security
      main restricted\ndeb-src http://security.ubuntu.com/ubuntu $CODENAME-security
      main restricted\n\n## universe repositories\ndeb http://us.archive.ubuntu.com/ubuntu/
      $CODENAME universe\ndeb-src http://us.archive.ubuntu.com/ubuntu/ $CODENAME universe\ndeb
      http://us.archive.ubuntu.com/ubuntu/ $CODENAME-updates universe\ndeb-src http://us.archive.ubuntu.com/ubuntu/
      $CODENAME-updates universe\n\ndeb http://security.ubuntu.com/ubuntu $CODENAME-security
      universe\ndeb-src http://security.ubuntu.com/ubuntu $CODENAME-security universe\nEOF\napt-get
      -y update"}, {"is_public": true, "username": "angelbob", "id": 721, "deployments_total":
      9, "user_defined_fields": [{"example": "1.8.7-2010.01", "label": "Ruby Enterprise
      Edition Version", "name": "ree_version", "default": "1.8.7-2010.01"}, {"example":
      "/opt/local will install REE to /opt/local/ree", "label": "Install Prefix for
      REE and Passenger", "name": "install_prefix", "default": "/opt/local"}, {"label":
      "Rails/Rack environment to run", "name": "rr_env", "default": "production"}],
      "updated": "2011-01-17T18:38:28", "label": "RubyEE, NGinX and Passenger", "created":
      "2010-06-25T19:53:13", "images": ["linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts",
      "linode/ubuntu9.1032bit", "linode/ubuntu9.1064bit"], "user_gravatar_id": "5e8107f48d4471a40de325151d589b6d",
      "description": "Based on similar script with Postgres by mocra", "rev_note":
      "Initial import", "deployments_active": 0, "script": "#!/bin/bash\n#\n# Installs
      Postgres, Ruby Enterprise edition, and Nginx with Passenger.\n# It also adds
      REE to the system-wide $PATH\n#\n# <UDF name=\"ree_version\" Label=\"Ruby Enterprise
      Edition Version\" default=\"1.8.7-2010.01\" example=\"1.8.7-2010.01\" />\n#
      <UDF name=\"install_prefix\" Label=\"Install Prefix for REE and Passenger\"
      default=\"/opt/local\" example=\"/opt/local will install REE to /opt/local/ree\"
      />\n# <UDF name=\"rr_env\" Label=\"Rails/Rack environment to run\" default=\"production\"
      />\n\nsource <ssinclude StackScriptID=708> # Enable Universe\n\n# Set up some
      necessary ENV variables\n  # Should be set from UDF if run through Linode\n  if
      [ ! -n \"$REE_VERSION\" ]; then\n    REE_VERSION=\"1.8.7-2010.01\"\n  fi\n  if
      [ ! -n \"$INSTALL_PREFIX\" ]; then\n    INSTALL_PREFIX=\"/usr/local\"\n  fi\n  if
      [ ! -n \"$RR_ENV\" ]; then\n    RR_ENV=\"production\"\n  fi\n  if [ ! -n \"$TMPDIR\"
      ]; then\n    TMPDIR=\"/var/tmp\"\n  fi\n\n  REE_NAME=\"ruby-enterprise-$REE_VERSION\"\n  REE_FILENAME=\"$REE_NAME.tar.gz\"\n  REE_DOWNLOAD=\"http://rubyforge.org/frs/download.php/68719/$REE_FILENAME\"\n  WORKING_DIR=\"$TMPDIR/flux-setup\"\n\n  mkdir
      -p \"$WORKING_DIR\"\n\n# Set up Ruby Enterprise Edition\n  # Dependencies\n  apt-get
      -y install build-essential zlib1g-dev libssl-dev libreadline5-dev\n\n  # Download\n  cd       \"$WORKING_DIR\"\n  wget     \"$REE_DOWNLOAD\"
      -O \"$REE_FILENAME\"\n  tar xzf  \"$REE_FILENAME\"\n  cd       \"$REE_NAME\"\n\n  #
      Install\n  ./installer --auto=\"$INSTALL_PREFIX/$REE_NAME\"\n  ln -s \"$INSTALL_PREFIX/$REE_NAME\"
      \"$INSTALL_PREFIX/ree\"\n\n  # Add REE to the PATH\n  PATH=\"$INSTALL_PREFIX/ree/bin:$PATH\"\n\n#
      Set up Nginx and Passenger\n  passenger-install-nginx-module --auto --auto-download
      --prefix=\"$INSTALL_PREFIX/nginx\"\n\n# Set up environment\n  # Global environment
      variables\n  cat > /etc/environment << EOF\nPATH=\"$PATH\"\nRAILS_ENV=\"$RR_ENV\"\nRACK_ENV=\"$RR_ENV\"\nEOF\n\n#
      Clean up\n  rm -rf \"$WORKING_DIR\""}, {"is_public": true, "username": "topia",
      "id": 811, "deployments_total": 11, "user_defined_fields": [], "updated": "2011-02-11T06:23:25",
      "label": "Topia Ubuntu development and production base", "created": "2010-07-14T20:25:28",
      "images": ["linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts", "linode/ubuntu10.1032bit",
      "linode/ubuntu10.10"], "user_gravatar_id": "b818b1018ab5d9a46f72af5a596f738d",
      "description": "", "rev_note": "updated webmin, allowed weird URLS", "deployments_active":
      0, "script": "#!/bin/bash\n\n# Russ Ferriday\n# russf@topia.com\n\n# Assumes
      a system update has been completed\n\necho getting git\napt-get -y -q install
      git-core\n\necho ''install basics for compile and build, gcc, etc.''\napt-get
      -y -q install build-essential python-dev\n\necho ''install dependencies for
      webmin''\nsudo aptitude -y -q install perl libnet-ssleay-perl \\\n   openssl
      libauthen-pam-perl libpam-runtime \\\n   libio-pty-perl libmd5-perl apt-show-versions
      libapt-pkg-perl\necho \"quietly getting libmd5\"\nwget -nv http://ftp.debian.org/pool/main/libm/libmd5-perl/libmd5-perl_2.03-1_all.deb\nsudo
      dpkg -i libmd5-perl_2.03-1_all.deb\n\n# install webmin\necho \"quietly getting
      webmin\"\nwget -nv -O webmin_installer ''http://downloads.sourceforge.net/project/webadmin/webmin/1.530/webmin_1.530_all.deb?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fwebadmin%2Ffiles%2Fwebmin%2F1.530%2Fwebmin_1.530_all.deb%2Fdownload&ts=1297404688&use_mirror=cdnetworks-us-2''\necho
      \"installing webmin\"\nsudo dpkg -i webmin_installer\n\necho \"Ubuntu Base Script
      Complete\""}, {"is_public": true, "username": "drm", "id": 904, "deployments_total":
      6, "user_defined_fields": [], "updated": "2010-08-02T05:47:07", "label": "Enable
      Universe - Ubuntu 10.04 Lucid", "created": "2010-08-01T23:43:13", "images":
      ["linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts"], "user_gravatar_id":
      "b2dcf4822bc03dc59e5b44d125a30715", "description": "Enable the universe and
      restricted repositories in Ubuntu 10.04 (Lucid). The script performs an apt-get
      update but does NOT perform any upgrades", "rev_note": "Initial import", "deployments_active":
      1, "script": "#!/bin/bash\n\n# New sources.list\ncat > /etc/apt/sources.list
      << EOF\n## main & restricted repositories\ndeb http://us.archive.ubuntu.com/ubuntu/
      lucid main restricted\ndeb-src http://us.archive.ubuntu.com/ubuntu/ lucid main
      restricted\n\ndeb http://security.ubuntu.com/ubuntu lucid-security main restricted\ndeb-src
      http://security.ubuntu.com/ubuntu lucid-security main restricted\n\n## universe
      repositories\ndeb http://us.archive.ubuntu.com/ubuntu/ lucid universe\ndeb-src
      http://us.archive.ubuntu.com/ubuntu/ lucid universe\ndeb http://us.archive.ubuntu.com/ubuntu/
      lucid-updates universe\ndeb-src http://us.archive.ubuntu.com/ubuntu/ lucid-updates
      universe\n\ndeb http://security.ubuntu.com/ubuntu lucid-security universe\ndeb-src
      http://security.ubuntu.com/ubuntu lucid-security universe\nEOF\n\n# Update\napt-get
      -y update"}, {"is_public": true, "username": "topia", "id": 964, "deployments_total":
      28, "user_defined_fields": [], "updated": "2011-02-12T00:50:27", "label": "Plone
      4.0.3 Universal Installer", "created": "2010-08-13T23:42:26", "images": ["linode/ubuntu10.04lts32bit",
      "linode/ubuntu10.1032bit"], "user_gravatar_id": "b818b1018ab5d9a46f72af5a596f738d",
      "description": "Prepares the environment for a Universal-Installer-based zeocluster
      install of Plone 4.0.3, running as user plone, under /home/plone. \r\n\r\nMay
      be used for development, and or prototype/production. Adds Facebook integration,
      varnish, and nginx, including basic config. \r\n\r\nTODO: Create a /home/plone/www/maintenance/500.html
      file for outages. Start the instance with bin/startcluster.sh. Enjoy! \r\n\r\nQuestions:
      russf@topia.com", "rev_note": "prevent apt waiting for confirmation", "deployments_active":
      4, "script": "#!/bin/bash\n\n# Copyright 2010 Russ Ferriday, Topia Systems Ltd\n#
      russf@topia.com\n\n#This script puts its output in the LOGFILE below, and makes
      a temp fifo.\nPIPEFILE=/tmp/teepipe.fifo\nLOGFILE=/root/StackScript.log\n\nmkfifo
      $PIPEFILE\n\n# Start tee writing to a logfile, but pulling its input from our
      named pipe.\ntee $LOGFILE < $PIPEFILE &\n\n# capture tee''s process ID for the
      wait command.\nTEEPID=$!\n\n# henceforth, redirect the rest of the stderr and
      stdout to our named pipe.\nexec > $PIPEFILE 2>&1\n\n#DO THE WORK -----------------------------\n\necho
      Doing the Prep work before Plone setup...\n\n# use Linode provided primitive
      script\n# to update to latest public ubuntu version\n# Must get aptitude, since
      used by this script, and missing in 10.10\napt-get -y install aptitude\nsource
      <ssinclude StackScriptID=\"1\">\nsystem_update\npostfix_install_loopback_only\n\n#Then
      invoke our Ubuntu Base Install, now that we are up to date.\nsource <ssinclude
      StackScriptID=\"811\">\n\napt-get -y install subversion\n\n#dependencies for
      building varnish as part of buildout\napt-get -y install pkg-config libpcre3
      libpcre3-dev\n\n#dependency for building Universal Installer Plone with ssl
      support\napt-get -y install libssl-dev\n\n#get root oriented setup files \ncd
      /root\ngit clone git://github.com/topiaruss/Plone4StackScript.git\n\n#specify
      the firewall\niptables-restore <  Plone4StackScript/protoiptables.rules\n#copy
      the rules into the webmin save file, and init on boot\niptables-save > /etc/iptables.up.rules
      \necho ''    post-up iptables-restore < /etc/iptables.up.rules'' >> /etc/network/interfaces
      \n\n#use system NGINX due to library hassles when compiling from buildout\necho
      ''nginx setup''\napt-get -y install nginx\n#Get the hostname interactively\n#<udf
      name=\"host_dn_or_ip\" label=\"Fully Qualified Domain Name or IP address of
      the server\" example=\"www.example.com\"/>\nif [ ! -n \"$HOST_DN_OR_IP\" ];
      then\n  HOST_DN_OR_IP=$(get_rdns_primary_ip)\nfi\n\nsed -e \"s/_FQDN_/${HOST_DN_OR_IP}/g\"
      /root/Plone4StackScript/nginx.conf.in > /root/Plone4StackScript/nginx.conf\ncp  /root/Plone4StackScript/nginx.conf
      /etc/nginx/nginx.conf\nmkdir -p /usr/local/nginx/logs\n\n#First create the plone
      user, and init ssh for him\nadduser --gecos '''' --disabled-password  plone\nsu
      -c ''ssh-keygen -q -t rsa -N \"\" -f /home/plone/.ssh/id_rsa '' plone\n\necho
      ''going over to home directory of \"plone\" user''\ncd /home/plone\n\n#get the
      more volatile parts of the install\ngit clone git://github.com/topiaruss/robust-linode-plone.git\n\nchown
      -R plone:plone .\n\ncd robust-linode-plone\n\necho ''run the install script
      as plone user''\nsu -c ''./doUI.sh'' plone\n\necho ''add the custom layers''\nsu
      -c ''./addCustomBuildoutLayers.sh'' plone\n\necho ''ensure everything runs after
      restart - as root''\n./installRunlevelCommands.sh\n\n#WORK IS COMPLETE ---------------------------\n\n#Teardown
      logging pipe, etc.\n\n# close the stderr and stdout file descriptors.\nexec
      1>&- 2>&-\n\n# Wait for tee to finish since now the other end of the pipe has
      closed.\nwait $TEEPID"}, {"is_public": true, "username": "mclendening", "id":
      1027, "deployments_total": 248, "user_defined_fields": [{"example": "Ex: server01",
      "label": "Enter a hostname for platform server", "name": "aegir_hostname"},
      {"example": "Ex: server01.example.com", "label": "Enter domain host name", "name":
      "aegir_domain"}, {"example": "Ex: Password for the user: myAwes0Passw@rd!",
      "label": "Enter password for platform user aegir", "name": "aegir_password",
      "default": ""}, {"label": "MySQL root Password", "name": "db_password"}, {"example":
      "Ex: you@example.com", "label": "Enter your email to recieve a 1 time login
      link to Aegir", "name": "user_email"}, {"oneof": "Yes,No", "label": "Add a shell
      for the aegir user", "name": "aegir_shell", "default": "No"}, {"oneof": "Yes,No",
      "label": "Setup ACL for Aegir directory", "name": "setup_acl", "default": "No"}],
      "updated": "2010-10-28T06:07:55", "label": "Drupal Aegir on Ubuntu 10.04", "created":
      "2010-08-26T08:45:55", "images": ["linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts"],
      "user_gravatar_id": "3fe4157580305a9199b82efe6ae015b8", "description": "Linode
      StackScript - Drupal Aegir version 04-alpha14 (HEAD)\r\n\r\n*** It is very important
      that DNS is configured for the hostname before setup***\r\n\r\nAdapted from
      StackScriptID=203\r\nAdded the option to set password for user aegir\r\nNormalized
      for Ubuntu 10.04 LTS\r\nIncluded the automate_install script from StackScriptID=203\r\nAdded
      fix for Drupal admin menu issue\r\nAdded command line safe characters \";\"
      and \":\"\r\n\r\nBuilds an Aegir install according to the instructions here:
      http://git.aegirproject.org/?p=provision.git;a=blob_plain;f=docs/INSTALL.txt;hb=provision-0.4-alpha14\r\n\r\nAlso
      used mig5''s video as a reference here: http://www.mig5.net/content/video-installing-aegir-04-alpha5\r\n",
      "rev_note": "Final", "deployments_active": 8, "script": "#!/bin/bash\n# <UDF
      name=\"aegir_hostname\" label=\"Enter a hostname for platform server\" example=\"Ex:
      server01\" />\n# <UDF name=\"aegir_domain\" label=\"Enter domain host name\"
      example=\"Ex: server01.example.com\" />\n# <UDF name=\"aegir_password\" label=\"Enter
      password for platform user aegir\" default=\"\" example=\"Ex: Password for the
      user: myAwes0Passw@rd!\" />\n# <UDF name=\"db_password\" Label=\"MySQL root
      Password\" />\n# <UDF name=\"user_email\" label=\"Enter your email to recieve
      a 1 time login link to Aegir\" example=\"Ex: you@example.com\" />\n# <UDF name=\"aegir_shell\"
      label=\"Add a shell for the aegir user\" oneOf=\"Yes,No\" default=\"No\" />\n#
      <UDF name=\"setup_acl\" label=\"Setup ACL for Aegir directory\" oneOf=\"Yes,No\"
      default=\"No\" />\n\nsource <ssinclude StackScriptID=\"1\">\n\n# Logs the entire
      Stackscript operation\nexec &> /root/stackscript.log\n\nfunction aegir_install
      {\n\t# install required packages\n\tapt-get -y install apache2 php5 php5-cli
      php5-mysql php5-gd mysql-server postfix sudo git-core unzip patch curl expect\n\t\n\t#
      Get IP\n\tipAddress=$(ifconfig | grep -m 1 ''inet addr:'' | cut -d: -f2 | awk
      ''{ print $1}'');\n\t# Insert IP and hostname and domain into /etc/hosts file\n\tsed
      -i ''\n/127.0.0.1 localhost/ a\\\n''\"$ipAddress\"'' ''\"$AEGIR_HOSTNAME\"''
      ''\"$AEGIR_DOMAIN\"''\n'' /etc/hosts\n\n\n  # Unbind mysql to localhost\n  sed
      -i ''\n/bind-address/ c\\\n#bind-address = 127.0.0.1\n'' /etc/mysql/my.cnf\n\n  #
      Restart mysql to clear cache\n  /etc/init.d/mysql restart\n\n\n  # create aegir
      user\n\tif [ ! -n \"AEGIR_PASSWORD\" ]; then\n\t  AEGIR_PASSWORD=$(randomString
      20)\n\tfi\n        if [ \"$AEGIR_SHELL\" = \"No\" ]\n\tthen \n\t  adduser --system
      --group --home /var/aegir aegir\n        else\n          adduser --system --shell
      /bin/bash --group --home /var/aegir aegir\n        fi\n\n  # make aegir a user
      of group www-data\n\tadduser aegir www-data\n\n  # Protect us from special characters
      when setting aegir user password\n\taegir_password_safe=$(replace_special_shell_characters
      $AEGIR_PASSWORD)\n\n  # Set aegir user password\n\techo \"aegir:$aegir_password_safe\"
      | chpasswd\n\n  # link aegir apache.conf into apache2/conf.d directory\n\tln
      -s /var/aegir/config/apache.conf /etc/apache2/conf.d/aegir.conf\n\n  # add aegir
      user to the sudoers file\n\tsed -i ''$a\\\\naegir ALL=NOPASSWD: /usr/sbin/apache2ctl''
      /etc/sudoers\n\n  # Get the aegir setup script and store it in /tmp\n\tcd /tmp\n\tcurl
      -L -o ''install.sh.txt'' ''http://git.aegirproject.org/?p=provision.git;a=blob_plain;f=install.sh.txt;hb=HEAD''
      \n  \n  # Create the automate install script that calls the aegir script and
      store it in /tmp\n\ttouch automate_install.expect\necho ''set timeout 20'' >>  automate_install.expect\necho
      ''set script [lindex $argv 0]'' >>  automate_install.expect\necho ''set aegir_hostname
      [lindex $argv 1]'' >>  automate_install.expect\necho ''set email [lindex $argv
      2]'' >>  automate_install.expect\necho ''set password [lindex $argv 3]'' >>  automate_install.expect\necho
      ''spawn sh $script $aegir_hostname --client_email=$email'' >>  automate_install.expect\necho
      ''expect \"Do you want to proceed with the install?\"'' >>  automate_install.expect\necho
      ''send \"Y\\n\"'' >>  automate_install.expect\necho ''expect \"Enter password:\"''
      >>  automate_install.expect\necho ''send \"$password\\n\"'' >>  automate_install.expect\necho
      ''interact'' >>  automate_install.expect\necho \"\"\n\n\n  # enable apache mode
      rewrite\n\ta2enmod rewrite\n  # mark apache to restart\n  \ttouch /tmp/restart-apache2\n\n  #
      Protect us from special characters when setting db user password\n  aegir_safedbpassword=$(replace_special_shell_characters
      $DB_PASSWORD)\n   \n  # Run aegir automate install script under user aegir credentials\n\tsu
      -s /bin/sh aegir -c \"expect automate_install.expect /tmp/install.sh.txt $AEGIR_DOMAIN
      $USER_EMAIL $aegir_safedbpassword\"\n\n\t# enable cron tab for hosting service
      \n\t# Can this script be run before Drupal setup?\n\t# su -s /bin/sh aegir\n\t#
      php /var/aegir/drush/drush.php --uri=http://aegir.$AEGIR_HOSTNAME.com hosting_setup\n\n\tif
      [ \"$SETUP_ACL\" = \"Yes\" ]\n\tthen\n\t\t# Using ACL setup guide here: http://www.debianhelp.co.uk/acl.htm\n\t\tapt-get
      install acl\n\t\tmount -o remount,acl /dev/xvda\n\t\tsed -i''-orig'' ''s/noatime,errors=remount-ro/acl,noatime,errors=remount-ro/''
      /etc/fstab\n\n\t\t# add Aegir group ACL permissions\n\t\tsetfacl -R -m g:aegir:rwx
      /var/aegir\n\t\tsetfacl -R -m d:g:aegir:rwx /var/aegir\n\telse \n\t\techo \"Skipping
      ACL setup because of user preference.\"\n\t\techo \"setup_acl : $SETUP_ACL\"\n\tfi\n}\n\nfunction
      drupal_admin_menu_fix () {\n  # Fixes error in Drupal admin menu -- see: http://groups.drupal.org/node/85919
      \n\tcd /var/aegir/hostmaster-0.4-alpha12/profiles/hostmaster/modules/admin_menu\n\n\twget
      -O - http://drupal.org/files/issues/615058-adminmenu-php53-D6-1.patch | patch
      -p0\n}\n\nfunction replace_special_shell_characters () {\n  # Replace ! $ \\
      : ; characters with command line safe equivalent\n  new_string=$1\n  new_string=${new_string//!/\\!}\n  new_string=${new_string//$/\\$}\n  new_string=${new_string//\\/\\\\}\n  new_string=${new_string//:/\\:}\n  new_string=${new_string//;/\\;}\n  \n  echo
      $new_string\n}\n\nfunction tune_php_to_aegir () {\n  sudo sed -i ''s/memory_limit
      = 32M/memory_limit = 128M/'' /etc/php5/apache2/php.ini\n\n}\n\nfunction tune_set_hostname
      () {\n  # Set hostname (required for Aegir platform to function properly)\n  echo
      \"$AEGIR_HOSTNAME\" > /etc/hostname\n  hostname -F /etc/hostname\n}\n\n\nsystem_update\npostfix_install_loopback_only\ntune_set_hostname\nmysql_install
      \"$DB_PASSWORD\" && mysql_tune 40\nphp_install_with_apache && php_tune\ntune_php_to_aegir\ngoodstuff\naegir_install\n#
      drupal_admin_menu_fix\nrestartServices"}, {"is_public": true, "username": "bweinraub",
      "id": 1033, "deployments_total": 2, "user_defined_fields": [], "updated": "2010-11-18T16:35:12",
      "label": "Aura Software (www.aura-software.com) 64 Bit Ubuntu", "created": "2010-08-27T16:05:23",
      "images": ["linode/ubuntu10.04lts", "linode/ubuntu10.1032bit"], "user_gravatar_id":
      "58730837924de4d1e5adf93896aae181", "description": "A Rails/Postgres environment
      as used by www.aura-software.com.\r\n\r\nIncludes support for m80 (www.sourceforge.net/projects/m80).",
      "rev_note": "add in sqlite3", "deployments_active": 1, "script": "#!/bin/bash                                                                                                                                                                \n\napt-get
      install --yes emacs vim xauth\n\napt-get install --yes apache2 postgresql rake
      ruby rubygems subversion m4 texinfo build-essential expat libexpat-dev telnet
      git-core\napt-get install --yes postgresql-client libpq-dev irb \napt-get install
      --yes sqlite3 libsqlite3-dev\n\napt-get install --yes ruby1.8-dev libopenssl-ruby\ngem
      install --version 1.0.1 rack --no-ri --no-rdoc\n # at least for brookings                                                                                                                                                  \ngem
      install mongrel pg ruby-debug --no-ri --no-rdoc\ngem install warden cancan hobofields
      hobosupport fastercsv --no-ri --no-rdoc\ngem install sqlite3-ruby --no-ri --no-rdoc\n\n\n\nyes
      | perl -MCPAN -e ''install XML::XPath''\n\ncp /etc/postgresql/8.4/main/pg_hba.conf
      /etc/postgresql/8.4/main/pg_hba.conf.bak\n\ncat > /etc/postgresql/8.4/main/pg_hba.conf
      <<EOF                                                                                                                           \n#
      PostgreSQL Client Authentication Configuration File                                                                                                                      \n#
      ===================================================                                                                                                                      \n#                                                                                                                                                                          \n#
      Refer to the \"Client Authentication\" section in the                                                                                                                      \n#
      PostgreSQL documentation for a complete description                                                                                                                      \n#
      of this file.  A short synopsis follows.                                                                                                                                 \n#                                                                                                                                                                          \n#
      This file controls: which hosts are allowed to connect, how clients                                                                                                      \n#
      are authenticated, which PostgreSQL user names they can use, which                                                                                                       \n#
      databases they can access.  Records take one of these forms:                                                                                                             \n#                                                                                                                                                                          \n#
      local      DATABASE  USER  METHOD  [OPTIONS]                                                                                                                             \n#
      host       DATABASE  USER  CIDR-ADDRESS  METHOD  [OPTIONS]          \n# host       DATABASE  USER  CIDR-ADDRESS  METHOD  [OPTIONS]                                                                                                               \n#
      hostssl    DATABASE  USER  CIDR-ADDRESS  METHOD  [OPTIONS]                                                                                                               \n#
      hostnossl  DATABASE  USER  CIDR-ADDRESS  METHOD  [OPTIONS]                                                                                                               \n#                                                                                                                                                                          \n#
      (The uppercase items must be replaced by actual values.)                                                                                                                 \n#                                                                                                                                                                          \n#
      The first field is the connection type: \"local\" is a Unix-domain socket,                                                                                                 \n#
      \"host\" is either a plain or SSL-encrypted TCP/IP socket, \"hostssl\" is an                                                                                                 \n#
      SSL-encrypted TCP/IP socket, and \"hostnossl\" is a plain TCP/IP socket.                                                                                                   \n#                                                                                                                                                                          \n#
      DATABASE can be \"all\", \"sameuser\", \"samerole\", a database name, or                                                                                                       \n#
      a comma-separated list thereof.                                                                                                                                          \n#                                                                                                                                                                          \n#
      USER can be \"all\", a user name, a group name prefixed with \"+\", or                                                                                                       \n#
      a comma-separated list thereof.  In both the DATABASE and USER fields                                                                                                    \n#
      you can also write a file name prefixed with \"@\" to include names from                                                                                                   \n#
      a separate file.                                                                                                                                                         \n#                                                                                                                                                                          \n#
      CIDR-ADDRESS specifies the set of hosts the record matches.                                                                                                              \n#
      It is made up of an IP address and a CIDR mask that is an integer                                                                                                        \n#
      (between 0 and 32 (IPv4) or 128 (IPv6) inclusive) that specifies                                                                                                         \n#
      the number of significant bits in the mask.  Alternatively, you can write                                                                                                \n#
      an IP address and netmask in separate columns to specify the set of hosts.                                                                                               \n#                                                                                                                                                                          \n#
      METHOD can be \"trust\", \"reject\", \"md5\", \"password\", \"gss\", \"sspi\",
      \"krb5\",                                                                                               \n#
      \"ident\", \"pam\", \"ldap\" or \"cert\".  Note that \"password\" sends passwords                                                                                                  \n#
      in clear text; \"md5\" is preferred since it sends encrypted passwords.                                                                                                    \n#                                                                                                                                                                          \n#
      OPTIONS are a set of options for the authentication in the format                                                                                                        \n#
      NAME=VALUE. The available options depend on the different authentication                                                                                                 \n#
      methods - refer to the \"Client Authentication\" section in the documentation                                                                                              \n#
      for a list of which options are available for which authentication methods.                                                                                              \n#                                                                                                                                                                          \n#
      Database and user names containing spaces, commas, quotes and other special                                                                                              \n#
      characters must be quoted. Quoting one of the keywords \"all\", \"sameuser\"
      or                                                                                              \n#
      \"samerole\" makes the name lose its special character, and just match a                                                                                                   \n#
      database or username with that name.                                                                                                                                     \n#                                                                                                                                                                          \n#
      This file is read on server startup and when the postmaster receives                                                                                                     \n#
      a SIGHUP signal.  If you edit the file on a running system, you have                                                                                                     \n#
      to SIGHUP the postmaster for the changes to take effect.  You can use                                                                                                    \n#
      \"pg_ctl reload\" to do that.                                                                                                                                              \n                                                                                                                                                                           \n#
      Put your actual configuration here                                                                                                                                       \n#
      ----------------------------------                                                                                                                                       \n#                                                                                                                                                                          \n#
      If you want to allow non-local connections, you need to add more                                                                                                         \n#
      \"host\" records. In that case you will also need to make PostgreSQL listen                                                                                                \n#
      on a non-local interface via the listen_addresses configuration parameter,                                                                                               \n#
      or via the -i or -h command line switches.                                                                                                                               \n#                                                                                                                                                                          \n                                                                                                                                                                           \n                                                                                                                                                                           \n                                                                                                                                                                           \n                                                                                                                                                                           \n#
      DO NOT DISABLE!                                                                                                                                                          \n#
      If you change this first entry you will need to make sure that the                                                                                                       \n#
      database                                                                                                                                                                 \n#
      super user can access the database using some other method.                                                                                                              \n#
      Noninteractive                                                                                                                                                           \n#
      access to all databases is required during automatic maintenance                                                                                                         \n#
      (custom daily cronjobs, replication, and similar tasks).                                                                                                                 \n#                                                                                                                                                                          \n#
      Database administrative login by UNIX sockets                                                                                                                            \nlocal   all         all                          trust                                                                                                                     \n                                                                                                                                                                           \n#
      TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD                           \n\n                                                                                                                                                                           \n#
      TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD                                                                                                               \n                                                                                                                                                                           \n#
      \"local\" is for Unix domain socket connections only                                                                                                                       \nlocal   all         all                               ident                                                                                                                \n#
      IPv4 local connections:                                                                                                                                                  \nhost    all         all         127.0.0.1/32          md5                                                                                                                  \n#
      IPv6 local connections:                                                                                                                                                  \nhost    all         all         ::1/128               md5                                                                                                                  \nEOF                                                                                                                                                                        \n\n/etc/init.d/postgresql-8.4
      stop\n/etc/init.d/postgresql-8.4 start"}, {"is_public": true, "username": "atomicunit",
      "id": 1036, "deployments_total": 52, "user_defined_fields": [{"example": "http://rubyforge.org/frs/download.php/71096/ruby-enterprise-1.8.7-2010.02.tar.gz",
      "label": "Ruby Enterprise Edition File", "name": "ree_file", "default": "http://rubyforge.org/frs/download.php/71096/ruby-enterprise-1.8.7-2010.02.tar.gz"},
      {"example": "1.8.7-2010.02", "label": "Ruby Enterprise Edition Version", "name":
      "ree_version", "default": "1.8.7-2010.02"}, {"example": "/opt/local will install
      REE to /opt/local/ree", "label": "Install Prefix for REE and Passenger", "name":
      "install_prefix", "default": "/opt/local"}, {"label": "Rails/Rack environment
      to run", "name": "rr_env", "default": "production"}, {"label": "ubuntu mirror
      url", "name": "ubuntu_mirror", "default": "http://us.archive.ubuntu.com/ubuntu"},
      {"label": "tmp dir (to download & compile)", "name": "tmpdir", "default": "/var/tmp"}],
      "updated": "2010-08-30T20:23:18", "label": "rails 3 + nginx + mongodb + deploy
      user", "created": "2010-08-27T23:41:50", "images": ["linode/ubuntu10.04lts32bit"],
      "user_gravatar_id": "4fa232bc111f9bbeac207c1970c89a71", "description": "Installs
      rails 3 (pre), nginx, mongodb, git, and adds the deploy user -- tail /root/stackscript.log
      to watch it run.", "rev_note": "Log cleanup", "deployments_active": 10, "script":
      "#!/bin/bash\n# \n# Installs Ruby Enterprise edition, and Nginx with Passenger.
      \n# It also adds REE to the system-wide $PATH\n#\n# <UDF name=\"ree_file\" Label=\"Ruby
      Enterprise Edition File\" default=\"http://rubyforge.org/frs/download.php/71096/ruby-enterprise-1.8.7-2010.02.tar.gz\"
      example=\"http://rubyforge.org/frs/download.php/71096/ruby-enterprise-1.8.7-2010.02.tar.gz\"
      />\n# <UDF name=\"ree_version\" Label=\"Ruby Enterprise Edition Version\" default=\"1.8.7-2010.02\"
      example=\"1.8.7-2010.02\" />\n# <UDF name=\"install_prefix\" Label=\"Install
      Prefix for REE and Passenger\" default=\"/opt/local\" example=\"/opt/local will
      install REE to /opt/local/ree\" />\n# <UDF name=\"rr_env\" Label=\"Rails/Rack
      environment to run\" default=\"production\" />\n# <udf name=\"ubuntu_mirror\"
      label=\"ubuntu mirror url\" default=\"http://us.archive.ubuntu.com/ubuntu\">\n#
      <udf name=\"tmpdir\" label=\"tmp dir (to download & compile)\" default=\"/var/tmp\">\n\nexec
      &> /root/stackscript.log\n\nsource <ssinclude StackScriptID=1>\nsource <ssinclude
      StackScriptID=904>\n\n  REE_NAME=\"ruby-enterprise-$REE_VERSION\"\n  REE_FILENAME=\"$REE_NAME.tar.gz\"\n\n  #
      Set up Ruby Enterprise Edition\n  # Dependencies\n  apt-get -y install build-essential
      zlib1g-dev libssl-dev libreadline5-dev\n\n  echo \"REE_FILENAME = $REE_FILENAME\"\n  echo
      \"REE_DOWNLOAD = $REE_FILE\"\n  echo \"Sleeping for 10\" && sleep 10\n\n  #
      Download\n  cd       \"$TMPDIR\"\n  wget     \"$REE_FILE\" -O \"$REE_FILENAME\"\n  tar
      xzf  \"$REE_FILENAME\"\n  cd       \"$REE_NAME\"\n\n  # Install\n  ./installer
      --auto=\"$INSTALL_PREFIX/$REE_NAME\"\n  ln -s \"$INSTALL_PREFIX/$REE_NAME\"
      \"$INSTALL_PREFIX/ree\"\n\n  # Add REE to the PATH\n  PATH=\"$INSTALL_PREFIX/ree/bin:$PATH\"\n\n#
      Set up Nginx and Passenger\n  passenger-install-nginx-module --auto --auto-download
      --prefix=\"$INSTALL_PREFIX/nginx\"\n\n# Configure nginx to start automatically\n  ln
      -s \"$INSTALL_PREFIX/nginx\" \"/opt/nginx\"\n  wget http://library.linode.com/web-servers/nginx/installation/reference/init-deb.sh\n  mv
      init-deb.sh /etc/init.d/nginx\n  chmod +x /etc/init.d/nginx\n  /usr/sbin/update-rc.d
      -f nginx defaults\n\n# Install mongodb-stable\n  echo \"deb http://downloads.mongodb.org/distros/ubuntu
      9.10 10gen\" >> /etc/apt/sources.list\n  apt-get update\n  # Secure but failing:\n  #   echo
      \"MONGO_DB_PUB_KEY\" | apt-key add -\n  #   apt-get -y install mongodb-stable\n  #
      Insecure but working:\n  apt-get -y --force-yes install mongodb-stable\n  /etc/init.d/nginx
      start\n\n# Install git\n  apt-get -y install git-core\n\n# Set up environment\n  #
      Global environment variables\n  cat > /etc/environment << EOF\nPATH=\"$PATH\"\nRAILS_ENV=\"$RR_ENV\"\nRACK_ENV=\"$RR_ENV\"\nEOF\n\n#
      Install Rails 3\n  # Update rubygems to (=> 1.3.6 as required by rails3)\n  gem
      update --system\n  # Install pre-requirements\n  gem install tzinfo builder
      memcache-client rack rack-test rack-mount erubis mail text-format thor bundler
      i18n --no-ri --no-rdoc\n  gem uninstall -x rails\n  gem install rails --pre
      --no-ri --no-rdoc\n\n# Add deploy user\n  echo \"deploy:deploy:1000:1000::/home/deploy:/bin/bash\"
      | newusers\n  cp -a /etc/skel/.[a-z]* /home/deploy/\n  chown -R deploy /home/deploy\n  #
      Add to sudoers(?)\n  echo \"deploy    ALL=(ALL) ALL\" >> /etc/sudoers\n\n# Clean
      up\n  rm -rf \"$TMPDIR/*\"\n\n\n  echo \"StackScript Done!\""}, {"is_public":
      true, "username": "cicloid", "id": 1116, "deployments_total": 5, "user_defined_fields":
      [], "updated": "2010-09-12T20:42:36", "label": "Chepina", "created": "2010-09-12T19:01:56",
      "images": ["linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts"], "user_gravatar_id":
      "7429aeaae3b048d1913ee94796257f9a", "description": "Ready to Chef bootstrap!\r\nZSH\r\nOh
      My ZSH\r\nPostfix Loopback", "rev_note": "Initial import", "deployments_active":
      4, "script": "#!/bin/bash\n\n# <udf name=\"privip\" label=\"private ip to install
      to eth0:0\">\n# <udf name=\"hostname\" label=\"hostname\">\n# <udf name=\"ubuntu_mirror\"
      label=\"ubuntu mirror url\" default=\"http://us.archive.ubuntu.com/ubuntu\">\nsource
      <ssinclude StackScriptID=\"476\">\n\n\n# scripts used\nsource <ssinclude StackScriptID=\"1\">\t\t#
      StackScript Lib by Linode\nsource <ssinclude StackScriptID=\"629\">\t\t# LEMPy_lib\n\n#
      functions to use from sourced scripts\nlogfile=/root/stackscript.log\n\nlempy_system_update_aptitude\t\t\t\t\t\t\t              #
      StackScriptID=\"629\"\nverygoodstuff                                           #
      StackScriptID=\"629\" // Just the good stuff\npostfix_install_loopback_only                           #
      StackScriptID=\"1\"\necho \"Setting up host with chef\" >> $logfile\necho \"Adjusting
      sources.list (destructively)\" >> $logfile\ncat >/etc/apt/sources.list <<EOF\ndeb
      $UBUNTU_MIRROR lucid main restricted universe multiverse\ndeb-src $UBUNTU_MIRROR
      lucid main restricted universe multiverse\n\ndeb $UBUNTU_MIRROR lucid-updates
      main restricted universe multiverse\ndeb-src $UBUNTU_MIRROR lucid-updates main
      restricted universe multiverse\n\n# \n# Security updates \n#\ndeb http://security.ubuntu.com/ubuntu
      lucid-security main restricted universe multiverse \ndeb-src http://security.ubuntu.com/ubuntu
      lucid-security main restricted universe multiverse \nEOF\n\napt-get -y update\nlempy_ree"},
      {"is_public": true, "username": "skystackops", "id": 1206, "deployments_total":
      101, "user_defined_fields": [{"label": "SERVANA SERVER ID", "name": "SERVER_ID"},
      {"label": "META DATA", "name": "METADATA"}, {"label": "SERVANA STACK ID", "name":
      "STACK_ID"}, {"label": "SERVANA ACCOUNT ALIAS", "name": "ALIAS"}, {"label":
      "SERVANA HOSTNAME", "name": "HOST"}, {"label": "SERVANA ACCOUNT USERNAME", "name":
      "API_USER"}, {"label": "SERVANA API TOKEN", "name": "API_TOKEN"}, {"label":
      "SERVANA API PASSWORD", "name": "API_PASS"}, {"label": "SERVANA SERVER", "name":
      "BASE", "default": "my.servana.io"}, {"label": "SERVANA SERVER ROLE", "name":
      "ROLE"}, {"label": "SERVANA SERVER ENVIRONMENT", "name": "ENVIRONMENT"}, {"label":
      "SERVANA SERVER JURISDICTION", "name": "JURISDICTION"}, {"label": "CLOUD PROVIDER",
      "name": "CLOUD", "default": "linode"}], "updated": "2015-06-23T11:44:17", "label":
      "Servana InitScript", "created": "2010-09-29T22:42:05", "images": ["linode/centos7",
      "linode/ubuntu14.04lts", "linode/centos6.8", "linode/ubuntu12.04lts", "linode/ubuntu14.10"],
      "user_gravatar_id": "60bebf1bc420bce1934a26179ea014aa", "description": "Automate
      your Linodes with Servana. Servana provides you with your very own operations
      hub in the cloud. A place to command and conquer. ", "rev_note": "changed url
      to use the Servana management platform for source", "deployments_active": 90,
      "script": "#!/bin/bash\n# Automate your Linodes with Servana. Servana provides
      you with your very own operations hub in the cloud. A place to command and conquer.
      \n# Copyright 2012, Goldspring Ventures, Ltd.\n# http://Servana.io or email
      us on team [ at ] Servana.io\n# \n# Licensed under the Apache License, Version
      2.0 (the \"License\");\n# you may not use this file except in compliance with
      the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#
      Unless required by applicable law or agreed to in writing, software\n# distributed
      under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES
      OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for
      the specific language governing permissions and\n# limitations under the License.\n\n#
      <UDF name=\"SERVER_ID\" Label=\"SERVANA SERVER ID\"/>\n# <UDF name=\"METADATA\"
      Label=\"META DATA\"/>\n# <UDF name=\"STACK_ID\" Label=\"SERVANA STACK ID\"/>\n#
      <UDF name=\"ALIAS\" Label=\"SERVANA ACCOUNT ALIAS\"/>\n# <UDF name=\"HOST\"
      Label=\"SERVANA HOSTNAME\"/>\n# <UDF name=\"API_USER\" Label=\"SERVANA ACCOUNT
      USERNAME\"/>\n# <UDF name=\"API_TOKEN\" Label=\"SERVANA API TOKEN\"/>\n# <UDF
      name=\"API_PASS\" Label=\"SERVANA API PASSWORD\"/>\n# <UDF name=\"BASE\" Label=\"SERVANA
      SERVER\" default=\"my.servana.io\"/>\n# <UDF name=\"ROLE\" Label=\"SERVANA SERVER
      ROLE\"/>\n# <UDF name=\"ENVIRONMENT\" Label=\"SERVANA SERVER ENVIRONMENT\"/>\n#
      <UDF name=\"JURISDICTION\" Label=\"SERVANA SERVER JURISDICTION\"/>\n# <UDF name=\"CLOUD\"
      Label=\"CLOUD PROVIDER\" default=\"linode\"/>\n\nLOCAL_PATH=/opt/servana\n\nmkdir
      -p \"$LOCAL_PATH/downloads\" \"$LOCAL_PATH/src\" \"$LOCAL_PATH/init\" \"$LOCAL_PATH/etc\"
      \"$LOCAL_PATH/backups\" \"$LOCAL_PATH/bin\" \"$LOCAL_PATH/sbin\" \"$LOCAL_PATH/logs\"
      \"/opt/servana/local\"\n\nuserdata=$LOCAL_PATH/etc/userdata.conf\ncat > $userdata
      <<EOF\nSERVER_ID=$SERVER_ID\nMETADATA=$METADATA\nSTACK_ID=$STACK_ID\nALIAS=$ALIAS\nHOST=$HOST\nAPI_USER=$API_USER\nAPI_TOKEN=$API_TOKEN\nAPI_PASS=$API_PASS\nBASE=$BASE\nROLE=$ROLE\nENVIRONMENT=$ENVIRONMENT\nJURISDICTION=$JURISDICTION\nCLOUD=$SS_CLOUD\nEOF\n\nif
      [ ! -e \"/opt/servana/firstboot\" ]; then\n\napt-get install -y curl unzip\n\ncurl
      -s -L -o $LOCAL_PATH/bin/servana \"https://my.servana.io/boot\"\nchmod +x $LOCAL_PATH/bin/servana\n\nbash
      $LOCAL_PATH/bin/servana build-server >> /opt/servana/logs/install 2>&1\n\ntouch
      /opt/servana/firstboot\n\nfi\n\nexit 0"}, {"is_public": true, "username": "ratnikov",
      "id": 1251, "deployments_total": 5, "user_defined_fields": [], "updated": "2010-10-07T02:58:31",
      "label": "Rails3 + MySQL setup", "created": "2010-10-07T00:40:25", "images":
      ["linode/ubuntu10.04lts"], "user_gravatar_id": "a211797acb8ea1910014a4144176453a",
      "description": "Sets up everything for a rails3 project", "rev_note": "Initial
      import", "deployments_active": 2, "script": "#!/bin/bash\n#\n# Security StackScript\n#
      By Donald von Stufft <donald.stufft@gmail.com>\n#\n# <udf name=\"user_name\"
      label=\"Unprivileged User Account\" />\n# <udf name=\"user_password\" label=\"Unprivileged
      User Password\" />\n# <udf name=\"user_sshkey\" label=\"Public Key for User\"
      default=\"\" />\n#\n# <udf name=\"sshd_port\" label=\"SSH Port\" default=\"22\"
      />\n# <udf name=\"sshd_protocol\" label=\"SSH Protocol\" oneOf=\"1,2,1 and 2\"
      default=\"2\" />\n# <udf name=\"sshd_permitroot\" label=\"SSH Permit Root Login\"
      oneof=\"No,Yes\" default=\"No\" />\n# <udf name=\"sshd_passwordauth\" label=\"SSH
      Password Authentication\" oneOf=\"No,Yes\" default=\"No\" />\n# <udf name=\"sshd_group\"
      label=\"SSH Allowed Groups\" default=\"sshusers\" example=\"List of groups seperated
      by spaces\" />\n#\n# <udf name=\"db_password\" label=\"Opendata DB user password\"
      /> \n#\n# <udf name=\"sudo_usergroup\" label=\"Usergroup to use for Admin Accounts\"
      default=\"admin\" />\n# <udf name=\"sudo_passwordless\" label=\"Passwordless
      Sudo\" oneof=\"Require Password,Do Not Require Password\", default=\"Require
      Password\" />\n#\n# <udf name=\"deploy_dir\" label=\"Deployment directory\"
      default=\"/var/deploy\" />\n# <udf name=\"deploy_user\" label=\"Capistrano deploy
      user name\" default=\"deploy\" />\n# <udf name=\"deploy_password\" label=\"Capistrano
      deploy user password\" />\n\n# General helpers\nsource <ssinclude StackScriptID=1>\n\nsystem_update\n\n#
      MySQL install\nmysql_install \"$DB_PASSWORD\" && mysql_tune 90\n\n# Install
      ruby 1.9\nsource <ssinclude StackScriptID=436>\n\n# install Git\nsource <ssinclude
      StackScriptID=468>\n\n# Apache + Passenger\nsource <ssinclude StackScriptId=477>\n\n#
      Install and Configure Sudo\naptitude -y install sudo\n\ncp /etc/sudoers /etc/sudoers.tmp\nchmod
      0640 /etc/sudoers.tmp\ntest \"${SUDO_PASSWORDLESS}\" == \"Do Not Require Password\"
      && (echo \"%`echo ${SUDO_USERGROUP} | tr ''[:upper:]'' ''[:lower:]''` ALL =
      NOPASSWD: ALL\" >> /etc/sudoers.tmp)\ntest \"${SUDO_PASSWORDLESS}\" == \"Require
      Password\" && (echo \"%`echo ${SUDO_USERGROUP} | tr ''[:upper:]'' ''[:lower:]''`
      ALL = (ALL) ALL\" >> /etc/sudoers.tmp)\nchmod 0440 /etc/sudoers.tmp\nmv /etc/sudoers.tmp
      /etc/sudoers\n\n# Configure SSHD\necho \"Port ${SSHD_PORT}\" > /etc/ssh/sshd_config.tmp\necho
      \"Protocol ${SSHD_PROTOCOL}\" >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(HostKey
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(UsePrivilegeSeparation
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(KeyRegenerationInterval
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(ServerKeyBits
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(SyslogFacility
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(LogLevel
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(LoginGraceTime
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\necho \"PermitRootLogin
      `echo ${SSHD_PERMITROOT} | tr ''[:upper:]'' ''[:lower:]''`\" >> /etc/ssh/sshd_config.tmp\nsed
      -n ''s/\\(StrictModes .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed
      -n ''s/\\(RSAAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed
      -n ''s/\\(PubkeyAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed
      -n ''s/\\(IgnoreRhosts .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed
      -n ''s/\\(RhostsRSAAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed
      -n ''s/\\(HostbasedAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed
      -n ''s/\\(PermitEmptyPasswords .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed
      -n ''s/\\(ChallengeResponseAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config
      >> /etc/ssh/sshd_config.tmp\n\necho \"PasswordAuthentication `echo ${SSHD_PASSWORDAUTH}
      | tr ''[:upper:]'' ''[:lower:]''`\" >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(X11Forwarding
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(X11DisplayOffset
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(PrintMotd
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(PrintLastLog
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(TCPKeepAlive
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(MaxStartups
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(AcceptEnv
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(Subsystem
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(UsePAM
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\necho \"AllowGroups
      `echo ${SSHD_GROUP} | tr ''[:upper:]'' ''[:lower:]''`\" >> /etc/ssh/sshd_config.tmp\n\nchmod
      0600 /etc/ssh/sshd_config.tmp\nmv /etc/ssh/sshd_config.tmp /etc/ssh/sshd_config\ntouch
      /tmp/restart-ssh\n\n# Create Groups\ngroupadd ${SSHD_GROUP}\ngroupadd ${SUDO_USERGROUP}\n\n#
      Create User & Add SSH Key\nUSER_NAME_LOWER=`echo ${USER_NAME} | tr ''[:upper:]''
      ''[:lower:]''`\n\nuseradd -m -s /bin/bash -G ${SSHD_GROUP},${SUDO_USERGROUP}
      ${USER_NAME_LOWER}\necho \"${USER_NAME_LOWER}:${USER_PASSWORD}\" | chpasswd\n\nUSER_HOME=`sed
      -n \"s/${USER_NAME_LOWER}:x:[0-9]*:[0-9]*:[^:]*:\\(.*\\):.*/\\1/p\" < /etc/passwd`\n\nsudo
      -u ${USER_NAME_LOWER} mkdir ${USER_HOME}/.ssh\necho \"${USER_SSHKEY}\" >> $USER_HOME/.ssh/authorized_keys\nchmod
      0600 $USER_HOME/.ssh/authorized_keys\nchown ${USER_NAME_LOWER}:${USER_NAME_LOWER}
      $USER_HOME/.ssh/authorized_keys\n\n# Setup Hostname\nget_rdns_primary_ip > /etc/hostname\n\n#
      setup deployment user\nmkdir -p /var/deploy\n\n/usr/sbin/adduser --system ${DEPLOY_USER}
      --home ${DEPLOY_DIR}\necho \"${DEPLOY_USER}:${DEPLOY_PASSWORD}\" | chpasswd\nchown
      -R ${DEPLOY_USER} ${DEPLOY_DIR}\n\n# Restart Services\nrestartServices"}, {"is_public":
      true, "username": "crnixon", "id": 1280, "deployments_total": 216, "user_defined_fields":
      [{"label": "MySQL root Password", "name": "db_password"}, {"label": "Rails/Rack
      environment to run", "name": "rr_env", "default": "production"}], "updated":
      "2010-10-10T12:10:49", "label": "Rails 3 & Ruby 1.9.2 stack", "created": "2010-10-10T00:44:13",
      "images": ["linode/debian5.032bit", "linode/debian5.064bit", "linode/ubuntu10.04lts32bit",
      "linode/ubuntu10.04lts", "linode/ubuntu9.1032bit", "linode/ubuntu9.1064bit",
      "linode/ubuntu8.04lts32bit", "linode/ubuntu8.04lts64bit", "linode/ubuntu8.1032bit",
      "linode/ubuntu8.1064bit", "linode/ubuntu9.0432bit", "linode/ubuntu9.0464bit"],
      "user_gravatar_id": "ca58c93600b38beb7b5a6a5deb27f1e8", "description": "Sets
      up Ruby 1.9.2, MySQL, Passenger and nginx, and Rails 3.", "rev_note": "Initial
      import", "deployments_active": 42, "script": "#!/bin/bash\n# \n# Installs Ruby
      1.9, and Nginx with Passenger. \n#\n# <UDF name=\"db_password\" Label=\"MySQL
      root Password\" />\n# <UDF name=\"rr_env\" Label=\"Rails/Rack environment to
      run\" default=\"production\" />\n\nsource <ssinclude StackScriptID=1>  # Common
      bash functions\n\nfunction log {\n  echo \"$1 `date ''+%D %T''`\" >> /root/log.txt\n}\n\n#
      Update packages and install essentials\n  cd /tmp\n  system_update\n  log \"System
      updated\"\n  aptitude -y install build-essential zlib1g-dev libssl-dev libreadline5-dev
      openssh-server libyaml-dev\n  log \"Essentials installed\"\n\n# Set up MySQL\n  mysql_install
      \"$DB_PASSWORD\" && mysql_tune 40\n  log \"MySQL installed\"\n\n# Set up Postfix\n  postfix_install_loopback_only\n\n#
      Installing Ruby\n  export RUBY_VERSION=\"ruby-1.9.2-p0\"\n  log \"Installing
      Ruby $RUBY_VERSION\"\n\n  log \"Downloading: (from calling wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/$RUBY_VERSION.tar.gz)\"
      \n  log `wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/$RUBY_VERSION.tar.gz`\n\n  log
      \"tar output:\"\n  log `tar xzf $RUBY_VERSION.tar.gz`\n  rm \"$RUBY_VERSION.tar.gz\"\n  cd
      $RUBY_VERSION\n\n  log \"current directory: `pwd`\"\n  log \"\"\n  log \"Ruby
      Configuration output: (from calling ./configure)\" \n  log `./configure` \n\n  log
      \"\"\n  log \"Ruby make output: (from calling make)\"\n  log `make`\n\n  log
      \"\"\n  log \"Ruby make install output: (from calling make install)\"\n  log
      `make install` \n  cd ..\n  rm -rf $RUBY_VERSION\n  log \"Ruby installed!\"\n\n#
      Set up Nginx and Passenger\n  log \"Installing Nginx and Passenger\"\n  gem
      install passenger\n  passenger-install-nginx-module --auto --auto-download --prefix=\"/usr/local/nginx\"\n  log
      \"Passenger and Nginx installed\"\n\n# Configure nginx to start automatically\n  wget
      http://library.linode.com/web-servers/nginx/installation/reference/init-deb.sh\n  cat
      init-deb.sh | sed ''s:/opt/:/usr/local/:'' > /etc/init.d/nginx\n  chmod +x /etc/init.d/nginx\n  /usr/sbin/update-rc.d
      -f nginx defaults\n  log \"Nginx configured to start automatically\"\n\n# Install
      git\n  apt-get -y install git-core\n\n# Set up environment\n  # Global environment
      variables\n  if [ ! -n \"$RR_ENV\" ]; then\n    RR_ENV=\"production\"\n  fi\n  cat
      >> /etc/environment << EOF\nRAILS_ENV=\"$RR_ENV\"\nRACK_ENV=\"$RR_ENV\"\nEOF\n\n#
      Install Rails 3\n  # Install pre-requirements\n  gem install rails -v ''~> 3.0.0''\n\n#
      Add rails user\n  echo \"rails:rails:1000:1000::/home/deploy:/bin/bash\" | newusers\n  cp
      -a /etc/skel/.[a-z]* /home/rails/\n  chown -R rails /home/rails\n  # Add to
      sudoers(?)\n  echo \"rails    ALL=NOPASSWD: ALL\" >> /etc/sudoers\n\n# Spit
      & polish\n  goodstuff\n  restartServices\n  log \"StackScript Finished!\""},
      {"is_public": true, "username": "recrea", "id": 1291, "deployments_total": 985,
      "user_defined_fields": [{"label": "MySQL root Password", "name": "db_password"},
      {"label": "Rails/Rack environment to run", "name": "rr_env", "default": "production"}],
      "updated": "2010-11-24T19:43:57", "label": "Rails 3 & Ruby 1.9.2", "created":
      "2010-10-12T20:30:55", "images": ["linode/ubuntu10.04lts32bit"], "user_gravatar_id":
      "b7853e5fedd9cf9d883cab0de20467a9", "description": "- Rails 3\r\n- Ruby 1.9.2\r\n-
      Nginx with Passenger\r\n- MySQL\r\n- git\r\n- Updates rubygems\r\n- Install
      rails 3\r\n- Install mysql gem\r\n- Add deploy user\r\n\r\nTail /root/log.txt
      to watch it run.", "rev_note": "Installing sqlite3", "deployments_active": 219,
      "script": "#!/bin/bash\n# \n# Installs Ruby 1.9, and Nginx with Passenger. \n#\n#
      <UDF name=\"db_password\" Label=\"MySQL root Password\" />\n# <UDF name=\"rr_env\"
      Label=\"Rails/Rack environment to run\" default=\"production\" />\n\nsource
      <ssinclude StackScriptID=1>  # Common bash functions\n\nfunction log {\n  echo
      \"$1 `date ''+%D %T''`\" >> /root/log.txt\n}\n\n# Update packages and install
      essentials\n  cd /tmp\n  system_update\n  log \"System updated\"\n  apt-get
      -y install build-essential zlib1g-dev libssl-dev libreadline5-dev openssh-server
      libyaml-dev libcurl4-openssl-dev libxslt-dev libxml2-dev\n  goodstuff\n  log
      \"Essentials installed\"\n\n# Set up MySQL\n  mysql_install \"$DB_PASSWORD\"
      && mysql_tune 40\n  log \"MySQL installed\"\n\n# Set up Postfix\n  postfix_install_loopback_only\n\n#
      Installing Ruby\n  export RUBY_VERSION=\"ruby-1.9.2-p0\"\n  log \"Installing
      Ruby $RUBY_VERSION\"\n\n  log \"Downloading: (from calling wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/$RUBY_VERSION.tar.gz)\"
      \n  log `wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/$RUBY_VERSION.tar.gz`\n\n  log
      \"tar output:\"\n  log `tar xzf $RUBY_VERSION.tar.gz`\n  rm \"$RUBY_VERSION.tar.gz\"\n  cd
      $RUBY_VERSION\n\n  log \"current directory: `pwd`\"\n  log \"\"\n  log \"Ruby
      Configuration output: (from calling ./configure)\" \n  log `./configure` \n\n  log
      \"\"\n  log \"Ruby make output: (from calling make)\"\n  log `make`\n\n  log
      \"\"\n  log \"Ruby make install output: (from calling make install)\"\n  log
      `make install` \n  cd ..\n  rm -rf $RUBY_VERSION\n  log \"Ruby installed!\"\n\n#
      Set up Nginx and Passenger\n  log \"Installing Nginx and Passenger\" \n  gem
      install passenger\n  passenger-install-nginx-module --auto --auto-download --prefix=\"/usr/local/nginx\"\n  log
      \"Passenger and Nginx installed\"\n\n# Configure nginx to start automatically\n  wget
      http://library.linode.com/web-servers/nginx/installation/reference/init-deb.sh\n  cat
      init-deb.sh | sed ''s:/opt/:/usr/local/:'' > /etc/init.d/nginx\n  chmod +x /etc/init.d/nginx\n  /usr/sbin/update-rc.d
      -f nginx defaults\n  log \"Nginx configured to start automatically\"\n\n# Install
      git\n  apt-get -y install git-core\n\n# Set up environment\n  # Global environment
      variables\n  if [ ! -n \"$RR_ENV\" ]; then\n    RR_ENV=\"production\"\n  fi\n  cat
      >> /etc/environment << EOF\nRAILS_ENV=\"$RR_ENV\"\nRACK_ENV=\"$RR_ENV\"\nEOF\n\n#
      Install Rails 3\n  # Update rubygems to (=> 1.3.6 as required by rails3)\n  gem
      update --system\n\n  # Install rails\n  gem install rails --no-ri --no-rdoc\n\n  #
      Install sqlite gem\n  apt-get -y install sqlite3 libsqlite3-dev\n  gem install
      sqlite3-ruby --no-ri --no-rdoc\n\n  # Install mysql gem\n  apt-get -y install
      libmysql-ruby libmysqlclient-dev\n  gem install mysql2 --no-ri --no-rdoc\n\n#
      Add deploy user\necho \"deploy:deploy:1000:1000::/home/deploy:/bin/bash\" |
      newusers\ncp -a /etc/skel/.[a-z]* /home/deploy/\nchown -R deploy /home/deploy\n#
      Add to sudoers(?)\necho \"deploy    ALL=(ALL) ALL\" >> /etc/sudoers\n\n# Spit
      & polish\n  restartServices\n  log \"StackScript Finished!\""}, {"is_public":
      true, "username": "viking", "id": 1362, "deployments_total": 25, "user_defined_fields":
      [{"label": "MySQL root Password", "name": "db_password"}, {"example": "Optionally
      create this database", "label": "Create Database", "name": "db_name", "default":
      ""}, {"example": "Optionally create this user", "label": "Create MySQL User",
      "name": "db_user", "default": ""}, {"example": "User''s password", "label":
      "MySQL User''s Password", "name": "db_user_password", "default": ""}, {"example":
      "These are downloaded from ftp://ftp.ruby-lang.org", "oneof": "ruby-1.9.2-p0",
      "label": "Choose Ruby Version", "name": "ruby_version"}, {"example": "Each selected
      gem will be installed.", "manyof": "rails,mysql2,passenger", "label": "Gems
      to install", "name": "gems_to_install1", "default": "rails,mysql2,passenger"},
      {"example": "Comma separated inputs to gem install. Example: rails,nifty-generators,formtastic,...
      Add the -v if you need a specific version.", "label": "More gems to install",
      "name": "gems_to_install2", "default": ""}], "updated": "2010-10-18T06:26:04",
      "label": "Ruby 1.9.2, MySQL, Apache", "created": "2010-10-18T04:12:36", "images":
      ["linode/ubuntu10.04lts32bit"], "user_gravatar_id": "841d37a76aee30f61e07f6b3b89214f9",
      "description": "", "rev_note": "Add subversion (added git last time)", "deployments_active":
      4, "script": "#!/bin/bash\n\nsource <ssinclude StackScriptID=\"1\">\n\n# <UDF
      name=\"db_password\" Label=\"MySQL root Password\" />\n# <UDF name=\"db_name\"
      Label=\"Create Database\" default=\"\" example=\"Optionally create this database\"
      />\n# <UDF name=\"db_user\" Label=\"Create MySQL User\" default=\"\" example=\"Optionally
      create this user\" />\n# <UDF name=\"db_user_password\" Label=\"MySQL User''s
      Password\" default=\"\" example=\"User''s password\" />\n\n# <udf name=\"ruby_version\"
      label=\"Choose Ruby Version\" oneOf=\"ruby-1.9.2-p0\" example=\"These are downloaded
      from ftp://ftp.ruby-lang.org\" />\n# <udf name=\"gems_to_install1\" label=\"Gems
      to install\" manyOf=\"rails,mysql2,passenger\" default=\"rails,mysql2,passenger\"
      example=\"Each selected gem will be installed.\" />\n# <udf name=\"gems_to_install2\"
      label=\"More gems to install\" default=\"\" example=\"Comma separated inputs
      to gem install. Example: rails,nifty-generators,formtastic,... Add the -v if
      you need a specific version.\" />\n\nlogfile=\"/root/log.txt\"\nrubyscript=\"/root/ruby_script_to_run.rb\"
      \n# This script is generated and run after gem is installed to\n# install the
      list of gems given by the stack script.\"\n\nexport logfile\nexport gems_to_install1=\"$GEMS_TO_INSTALL1\"\nexport
      gems_to_install2=\"$GEMS_TO_INSTALL2\"\n# exported to be available in ruby_script_to_run.rb\n\nsystem_update\necho
      \"System Updated\" >> $logfile\npostfix_install_loopback_only\necho \"postfix_install_loopback_only\"
      >> $logfile\nmysql_install \"$DB_PASSWORD\" && mysql_tune 40\necho \"Mysql installed\"
      >> $logfile\nmysql_create_database \"$DB_PASSWORD\" \"$DB_NAME\"\nmysql_create_user
      \"$DB_PASSWORD\" \"$DB_USER\" \"$DB_USER_PASSWORD\"\nmysql_grant_user \"$DB_PASSWORD\"
      \"$DB_USER\" \"$DB_NAME\"\n\napache_install && apache_tune 40 && apache_virtualhost_from_rdns\necho
      \"apache installed\" >> $logfile\ngoodstuff\necho \"goodstuff installed\" >>
      $logfile\n\n#installing ruby\napt-get -y install build-essential libssl-dev
      libreadline5-dev zlib1g-dev libxml2 libxml2-dev libxslt1-dev libmysqlclient-dev
      apache2-prefork-dev libapr1-dev libaprutil1-dev git-core subversion\n\necho
      \"libs for ruby installed\" >> $logfile\necho \"$RUBY_VERSION.tar.gz\" >> $logfile\necho
      \"$RUBY_VERSION\" >> $logfile\n\necho \"\" >> $logfile\nif [[ $RUBY_VERSION
      == ruby\\-1\\.9* ]]\nthen\n\techo \"Downloadin: (from calling wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/$RUBY_VERSION.tar.gz)\"
      >> $logfile\necho \"\" >> $logfile\n\twget ftp://ftp.ruby-lang.org/pub/ruby/1.9/$RUBY_VERSION.tar.gz  >>
      $logfile\nelse\n\techo \"Downloadin: (from calling wget ftp://ftp.ruby-lang.org/pub/ruby/1.8/$RUBY_VERSION.tar.gz)\"
      >> $logfile\necho \"\" >> $logfile\n\twget ftp://ftp.ruby-lang.org/pub/ruby/1.8/$RUBY_VERSION.tar.gz  >>
      $logfile\nfi\n\necho \"\"\necho \"tar output:\"\ntar xzf $RUBY_VERSION.tar.gz
      >> $logfile\nrm $RUBY_VERSION.tar.gz\ncd $RUBY_VERSION\n\necho \"\"\necho \"current
      directory:\"\npwd >> $logfile\n\necho \"\" >> $logfile\necho \"Ruby Configuration
      output: (from calling ./configure --enable-pthread)\" >> $logfile\necho \"\"
      >> $logfile\n./configure --enable-pthread >> $logfile\n\necho \"\" >> $logfile\necho
      \"Ruby make output: (from calling make)\" >> $logfile\necho \"\" >> $logfile\nmake
      >> $logfile\n\necho \"\" >> $logfile\necho \"Ruby make install output: (from
      calling make install)\" >> $logfile\necho \"\" >> $logfile\nmake install >>
      $logfile\ncd /\nrm -rf $RUBY_VERSION\n\n# echo the ruby code to a file to be
      run\necho \"\n    ##### Ruby Code Starts Here #####\n\n    gems_to_install1
      = ENV[''gems_to_install1'']\n    gems_to_install2 = ENV[''gems_to_install2'']\n    \n    puts
      gems_to_install1\n    puts gems_to_install2\n    \n    gems_to_install1.split('','').each
      do |gem_name|\n      \\`gem install #{gem_name} >> $logfile\\`\n    end\n    \n    gems_to_install2.split('','').each
      do |gem_name|\n      \\`gem install #{gem_name} >> $logfile\\`\n    end\n\n    #####
      Ruby Code Ends Here #####\" >> $rubyscript\n\nruby $rubyscript >> $logfile\n\nrestartServices\necho
      \"StackScript Finished!\" >> $logfile"}, {"is_public": true, "username": "visnup",
      "id": 1370, "deployments_total": 27, "user_defined_fields": [{"example": "monitaur",
      "label": "node app name", "name": "node_process", "default": ""}, {"example":
      "ruby-enterprise-1.8.7-2010.02", "label": "ruby enterprise edition version",
      "name": "ree", "default": "ruby-enterprise-1.8.7-2010.02"}, {"example": "https://gist.github.com/raw/15a957952aa90eab4a27/1f06d60655d54dbe525d489f39e4fedbf163377c/authorized_keys",
      "label": "url to grab authorized keys", "name": "authorized_keys", "default":
      ""}], "updated": "2011-01-12T21:31:11", "label": "Ubuntu 10.04 LTS 64bit", "created":
      "2010-10-19T05:28:53", "images": ["linode/ubuntu10.04lts"], "user_gravatar_id":
      "d3b74a28240aef1383e7d5ae943d175e", "description": "node, mongodb, ree, apache",
      "rev_note": "use node-latest", "deployments_active": 9, "script": "#!/bin/bash\n#
      http://dpritchett.posterous.com/get-up-and-running-with-nodejs-on-your-own-am\n#
      http://increaseyourgeek.wordpress.com/2010/08/18/install-node-js-without-using-sudo/\n#
      http://fortnightlabs.posterous.com/\n\n# <UDF name=\"node_process\" Label=\"node
      app name\" default=\"\" example=\"monitaur\" />\n# <UDF name=\"ree\" Label=\"ruby
      enterprise edition version\" default=\"ruby-enterprise-1.8.7-2010.02\" example=\"ruby-enterprise-1.8.7-2010.02\"
      />\n# <UDF name=\"authorized_keys\" Label=\"url to grab authorized keys\" default=\"\"
      example=\"https://gist.github.com/raw/15a957952aa90eab4a27/1f06d60655d54dbe525d489f39e4fedbf163377c/authorized_keys\"
      />\n\n# create the app user\nmkdir /u\nuseradd -U -d /u/apps -s /bin/bash -m
      -r app\n\n# set-up ssh\nmkdir /root/.ssh\ncurl $AUTHORIZED_KEYS >> /root/.ssh/authorized_keys\nchmod
      0700 /root/.ssh\n\nmkdir /u/apps/.ssh\ncurl $AUTHORIZED_KEYS >> /u/apps/.ssh/authorized_keys\nchmod
      0700 /u/apps/.ssh\nchown -R app:app /u/apps/.ssh\n\n# add mongodb repo\ncat
      <<END >> /etc/apt/sources.list\n\ndeb http://downloads.mongodb.org/distros/ubuntu
      10.4 10gen\nEND\napt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10\n\n#
      update to latest\napt-get update -y\napt-get upgrade -y\n\n# install software\napt-get
      install -y mongodb-stable redis-server monit\n\n# install dependencies\napt-get
      install -y build-essential curl libssl-dev libreadline5-dev git-core\n\n# install
      REE\ncd /tmp\ncurl -o $REE.tar.gz http://rubyforge.org/frs/download.php/71096/$REE.tar.gz/noredirect\ntar
      xzf $REE.tar.gz\n$REE/installer -a /opt/$REE\nPATH=/opt/$REE/bin:$PATH\necho
      \"PATH=$PATH\" > /etc/environment\n\n# install passenger\napt-get install -y
      libcurl4-openssl-dev apache2-mpm-prefork apache2-prefork-dev libapr1-dev libaprutil1-dev\npassenger-install-apache2-module
      -a\ncd /etc/apache2/mods-available\npassenger-install-apache2-module --snippet
      | head -1 > passenger.load\npassenger-install-apache2-module --snippet | tail
      -2 > passenger.conf\na2enmod passenger\n\n# configure apache\na2dissite default\ncd
      /etc/apache2/sites-available\ncat <<END > $NODE_PROCESS\n  <VirtualHost *:80>\n    ServerName
      dev.monitaur.net\n    DocumentRoot /u/apps/monitaur/current/public\n    <Directory
      /u/apps/monitaur/current/public>\n      AllowOverride all\n      Options -MultiViews\n    </Directory>\n  </VirtualHost>\nEND\na2ensite
      $NODE_PROCESS\n/etc/init.d/apache2 restart\n\n# rails default env\ncat <<END
      >> /u/apps/.profile\n\nexport RAILS_ENV=production\nexport NODE_ENV=production\nEND\n\n#
      create the upstart script\ncat <<END > /etc/init/$NODE_PROCESS.conf\ndescription
      \"$NODE_PROCESS\"\nauthor \"visnup\"\n\nstart on startup\nstop on shutdown\n\nscript\n  exec
      sudo NODE_ENV=production /u/apps/local/bin/node /u/apps/$NODE_PROCESS/current/node/server.js
      >> /u/apps/$NODE_PROCESS/current/log/node.log 2>&1\nend script\nEND\n\n# let
      the app user start / stop / restart the process\ncat <<END >> /etc/sudoers\n\napp     ALL=NOPASSWD:
      /sbin/restart $NODE_PROCESS\napp     ALL=NOPASSWD: /sbin/stop $NODE_PROCESS\napp     ALL=NOPASSWD:
      /sbin/start $NODE_PROCESS\nEND\n\n\n# login app\ncat <<END > /tmp/AsApp.sh\n#
      setup space for node\nexport PREFIX=/u/apps/local\nmkdir \\$PREFIX\nperl -i
      -pe ''s/bin/local\\/bin/g'' /u/apps/.profile\n\n# install node latest\ncd /tmp\nNODE_URL=\"http://nodejs.org/dist/node-latest.tar.gz\"\nwget
      $NODE_URL\ntar xzf node-latest.tar.gz\ncd node-v*\n./configure\nmake && make
      install\n\n# install npm\nexport PATH=/u/apps/local/bin:\\$PATH\ncurl http://npmjs.org/install.sh
      | sh\nEND\n\nsudo -u app sh /tmp/AsApp.sh"}, {"is_public": true, "username":
      "retr0h", "id": 1380, "deployments_total": 2, "user_defined_fields": [], "updated":
      "2010-10-20T19:39:47", "label": "System Tools", "created": "2010-10-19T23:26:56",
      "images": ["linode/debian5.032bit", "linode/debian5.064bit", "linode/ubuntu10.04lts32bit",
      "linode/ubuntu10.04lts", "linode/ubuntu10.1032bit", "linode/ubuntu10.10"], "user_gravatar_id":
      "6aa135e92a91b698cf3c40651ade12ce", "description": "StackScript for installing
      essential system tools.\r\n\r\nsystem_tools_install\r\nsystem_start_etc_dir_versioning\r\n",
      "rev_note": "added sudo just to be clear", "deployments_active": 2, "script":
      "#!/bin/bash\n\nPACKAGES=(\n  ack-grep\n  gdb\n  htop\n  mtr\n  netcat\n  screen\n  smem\n  socat\n  telnet\n  tree
      \n  man-db\n  curl\n  wget\n  zsh\n  strace\n  ltrace\n  lsof\n  sysstat\n  whois\n  manpages\n  rsync\n  dnsutils\n  sudo\n)\n\nfunction
      enable {\n  local file=${1}\n\n  sed -i ''s/\\(ENABLED=\\).*/\\1\"true\"/''
      ${file}\n}\n\naptitude -y install ${PACKAGES[@]}\n\nenable /etc/default/sysstat"},
      {"is_public": true, "username": "retr0h", "id": 1383, "deployments_total": 0,
      "user_defined_fields": [], "updated": "2010-10-20T18:36:02", "label": "Github
      Help", "created": "2010-10-20T04:38:52", "images": ["linode/debian5.032bit",
      "linode/debian5.064bit", "linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts",
      "linode/ubuntu10.1032bit", "linode/ubuntu10.10", "linode/ubuntu9.1032bit", "linode/ubuntu9.1064bit"],
      "user_gravatar_id": "6aa135e92a91b698cf3c40651ade12ce", "description": "StackScript
      which installs git-core and github''s setup repo.  Primarily used to scriptfully
      add server keys into github.\r\n\r\nSee:\r\n  http://github.com/help/setup\r\n",
      "rev_note": "no need for function", "deployments_active": 0, "script": "#!/bin/bash\n\ndestdir=/opt\n\naptitude
      -y install git-core\n\nmkdir -p ${destdir}\ngit clone git://github.com/help/setup.git
      ${destdir}/setup"}, {"is_public": true, "username": "retr0h", "id": 1384, "deployments_total":
      6, "user_defined_fields": [], "updated": "2010-10-20T22:02:10", "label": "RVM  Install",
      "created": "2010-10-20T05:11:06", "images": ["linode/debian5.032bit", "linode/debian5.064bit",
      "linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts", "linode/ubuntu10.1032bit",
      "linode/ubuntu10.10", "linode/ubuntu9.1032bit", "linode/ubuntu9.1064bit"], "user_gravatar_id":
      "6aa135e92a91b698cf3c40651ade12ce", "description": "StackScript which installs
      RVM system wide.\r\n\r\nInstalls openssl and readline so net/https and irb/console
      work respectively.", "rev_note": "sourcing /etc/rvmrc", "deployments_active":
      1, "script": "#!/bin/bash\n\naptitude -y install curl bison build-essential
      autoconf zlib1g-dev libssl-dev libxml2-dev libreadline6-dev git-core\n\nbash
      < <( curl -L http://bit.ly/rvm-install-system-wide )\nsource /etc/rvmrc\n\nrvm
      package install openssl\nrvm package install readline\n\nrvm install ${DEFAULT_RUBY_INTERPRETER}\nrvm
      use ${DEFAULT_RUBY_INTERPRETER} --default\necho \". /usr/local/lib/rvm\" > /etc/profile.d/rvm.sh"},
      {"is_public": true, "username": "retr0h", "id": 1386, "deployments_total": 0,
      "user_defined_fields": [], "updated": "2010-10-20T18:35:47", "label": "Deny
      Hosts", "created": "2010-10-20T15:48:16", "images": ["linode/debian5.032bit",
      "linode/debian5.064bit", "linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts",
      "linode/ubuntu10.1032bit", "linode/ubuntu10.10"], "user_gravatar_id": "6aa135e92a91b698cf3c40651ade12ce",
      "description": "StackScript which installs git-core, denyhosts, and retr0h''s
      denyhosts-remove repo.\r\n\r\nSee:\r\nhttp://github.com/retr0h/denyhosts-remove\r\n",
      "rev_note": "no need for function", "deployments_active": 0, "script": "#!/bin/bash\n
      \ndestdir=/opt\n \naptitude -y install git-core denyhosts\n \nmkdir -p ${destdir}\ngit
      clone git://github.com/retr0h/denyhosts-remove.git ${destdir}/denyhosts-remove"},
      {"is_public": true, "username": "retr0h", "id": 1387, "deployments_total": 0,
      "user_defined_fields": [], "updated": "2010-10-21T06:01:27", "label": "System
      Helper", "created": "2010-10-20T18:38:54", "images": ["linode/debian5.032bit",
      "linode/debian5.064bit", "linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts",
      "linode/ubuntu10.1032bit", "linode/ubuntu10.10", "linode/ubuntu9.1032bit", "linode/ubuntu9.1064bit"],
      "user_gravatar_id": "6aa135e92a91b698cf3c40651ade12ce", "description": "StackScript
      for various system maintenance tasks.\r\n\r\nsystem_start_etc_dir_versioning\r\nsystem_add_ssh_key\r\nsystem_adduser\r\nsystem_groupadd\r\nsystem_suppl_group\r\n",
      "rev_note": "had a misplaced \"", "deployments_active": 0, "script": "#!/bin/bash\n\n##\n#
      Taken from http://www.linode.com/stackscripts/view/?StackScriptID=124.\n\nfunction
      system_start_etc_dir_versioning {\n  aptitude -y install git-core\n \n  pushd
      /etc\n  \n  git init\n  git add .\n  git commit -m \"Started versioning of /etc
      directory\"\n\n  popd\n}\n\n##\n# Taken from http://www.linode.com/stackscripts/view/?StackScriptID=123.\n\nfunction
      system_add_ssh_key {\n  local username=${1}\n  local homedir=${2}\n  local key=${3}\n\n  aptitude
      -y install wget\n\n  sudo -u ${username} mkdir -p ${homedir}/.ssh\n  sudo -u
      ${username} wget -O ${homedir}/.ssh/authorized_keys ${key}\n  chmod 0600 \"${homedir}/.ssh/authorized_keys\"\n}\n\nfunction
      has_key? {\n  local database=${1}\n  local key=${2}\n\n  getent ${database}
      ${key} >/dev/null 2>&1\n  [ $? == 0 ] && true || false\n}\n\nfunction system_adduser
      {\n  local login=${1}\n  local homedir=${2}\n\n  if ! has_key? passwd ${login};
      then\n    adduser --debug --disabled-password --home ${homedir} --gecos \"\"
      ${login}\n  fi\n}\n\nfunction system_groupadd {\n  local group=${1}\n  \n  if
      ! has_key? group ${group}; then\n    groupadd ${group}\n  fi\n}\n\nfunction
      system_suppl_group {\n  local suppl_group=${1}\n  local group=${2}\n\n  usermod
      -a -G ${suppl_group} ${group}\n}"}, {"is_public": true, "username": "clubz",
      "id": 1478, "deployments_total": 15, "user_defined_fields": [{"label": "MySQL
      root Password", "name": "db_password"}, {"example": "Drupal database name",
      "label": "Create Database", "name": "db_name", "default": "drupal"}, {"example":
      "Drupal database user", "label": "Create MySQL User", "name": "db_user", "default":
      "drupal"}, {"example": "Optionally Drupal database user''s password", "label":
      "MySQL User''s Password", "name": "db_user_password", "default": ""}, {"example":
      "Example www.example.com", "label": "Drupal''s hostname", "name": "drupal_hostname"}],
      "updated": "2010-11-05T07:51:15", "label": "drupal", "created": "2010-11-05T07:51:04",
      "images": ["linode/ubuntu10.1032bit"], "user_gravatar_id": "8ed0eb47965df14f62f4fc7034dec507",
      "description": "", "rev_note": "Initial import", "deployments_active": 1, "script":
      "#!/bin/bash                                                                        \n#
      <UDF name=\"db_password\" Label=\"MySQL root Password\" />                           \n#
      <UDF name=\"db_name\" Label=\"Create Database\" default=\"drupal\" example=\"Drupal
      database name\" />                                                                                          \n#
      <UDF name=\"db_user\" Label=\"Create MySQL User\" default=\"drupal\" example=\"Drupal
      database user\" />                                                                                        \n#
      <UDF name=\"db_user_password\" Label=\"MySQL User''s Password\" default=\"\"
      example=\"Optionally Drupal database user''s password\" />                                                           \n#
      <UDF name=\"drupal_hostname\" Label=\"Drupal''s hostname\" example=\"Example
      www.example.com\" />                                                                                \n\n\nsource
      <ssinclude StackScriptID=\"1\">\n\n###########################################################\n#
      Drupal Install // move to StackScriptID=1 ??             \n###########################################################\n\nfunction
      drupal_install {\n        # installs the latest drupal version from drupal.org\n\n        #
      $1 - required - The existing virtualhost to install into\n\n        if [ ! -n
      \"$1\" ]; then\n                echo \"drupal_install() requires the virtualhost
      as its first argument\"\n                return 1;                                                             \n        fi                                                                            \n\n        if
      [ ! -e /usr/bin/wget ]; then\n                aptitude -y install wget\n        fi                              \n\n        #
      Install drush to install drupal latest version\n\n        if [ ! -e /usr/bin/php
      ]; then\n                aptitude -y install php5-cli php5-gd cvs\n        fi                                              \n\n        if
      [ ! -e /usr/local/bin/drush ]; then\n                cd /tmp && cvs -z6 -d:pserver:anonymous:anonymous@cvs.drupal.org:/cvs/drupal-contrib
      checkout -d drush contributions/modules/drush                                        \n                if
      [ ! -f /tmp/drush/drush ]; then                                           \n                       echo
      \"Could not checkout drush from cvs\"                              \n                       exit
      1                                                                \n                fi                                                                           \n                #
      we need imagemagick.inc because ubuntu php5-gd is not working fully        \n                cd
      /tmp && cvs -z6 -d:pserver:anonymous:anonymous@cvs.drupal.org:/cvs/drupal-contrib
      checkout -d image contributions/modules/image                                        \n                cd
      /usr/local && /tmp/drush/drush dl drush && cd bin && ln -s ../drush/drush drush                                                                                        \n                if
      [ ! -x /usr/local/bin/drush ]; then                                       \n                       echo
      \"Could not install drush in /usr/local/bin\"                      \n                       exit
      1                                                                \n                fi                                                                           \n                cd
      && rm -rf /tmp/drush                                                      \n        fi                                                                                   \n\n\n        VPATH=$(apache_virtualhost_get_docroot
      $1)\n\n        if [ ! -n \"$VPATH\" ]; then\n                echo \"Could not
      determine DocumentRoot for $1\"\n                return 1;                                     \n        fi                                                    \n\n        #
      download, extract, chown, and get our config file started\n        cd $VPATH                                                  \n        cd
      .. && rm -rf public_html                                \n        drush dl drupal
      && mv $(find . -type d -name drupal\\*) public_html\n        cd $VPATH                                                         \n        cp
      sites/default/default.settings.php sites/default/settings.php  \n        if
      [ -f /tmp/image/image.imagemagick.inc ]; then                  \n                cp
      /tmp/image/image.imagemagick.inc includes/             \n                rm
      -rf /tmp/image                                         \n        fi                                                                \n        mkdir
      sites/default/files                                         \n        chmod
      640 sites/default/settings.php                              \n        chown
      -R www-data: .                                              \n\n        # database
      configuration\n        db_user_password        \n        if [ ! -n \"$DB_USER_PASSWORD\"
      ]; then\n                DB_USER_PASSWORD=$(randomString 20)\n        fi                                         \n\n        mysql_create_database
      \"$DB_PASSWORD\" \"$DB_NAME\"\n        mysql_create_user \"$DB_PASSWORD\" \"$DB_USER\"
      \"$DB_USER_PASSWORD\"\n        mysql_grant_user \"$DB_PASSWORD\" \"$DB_USER\"
      \"$DB_NAME\"          \n\n        sed -i \"/^$db_url/s/mysql\\:\\/\\/username:password/mysqli\\:\\/\\/$DB_USER:$DB_USER_PASSWORD/\"
      sites/default/settings.php                                                              \n        sed
      -i \"/^$db_url/s/databasename/$DB_NAME/\" sites/default/settings.php               \n\n        #
      setup crontab and clean-urls\n        echo \"0 * * * * /usr/local/bin/drush
      -r $VPATH cron >/dev/null\" | crontab -                                                                                    \n        a2enmod
      rewrite                                                                      \n        touch
      /tmp/restart-apache2                                                           \n\n        #
      remove # from lines below if you want modules enabled\n        # drush dl admin_menu
      advanced_help calendar cck comment_notify date filefield fivestar\n        #
      drush dl google_analytics image imageapi imagecache img_assist jquery_ui link\n        #
      drush dl markdown pathauto print tagadelic token votingapi webform\n}\n\n\nsystem_update\npostfix_install_loopback_only\nmysql_install
      \"$DB_PASSWORD\" && mysql_tune 40\nphp_install_with_apache && php_tune\ngoodstuff\nif
      [ ! -n \"$DRUPAL_HOSTNAME\" ]; then\n  apache_install && apache_tune 40 && apache_virtualhost_from_rdns\n  drupal_install
      $(get_rdns_primary_ip)\nelse\n  apache_install && apache_tune 40 && apache_virtualhost
      $DRUPAL_HOSTNAME\n  drupal_install $DRUPAL_HOSTNAME\nfi\nrestartServices"},
      {"is_public": true, "username": "killemall", "id": 1492, "deployments_total":
      1, "user_defined_fields": [], "updated": "2013-09-27T10:21:30", "label": "System
      security", "created": "2010-11-09T13:20:59", "images": ["linode/debian6"], "user_gravatar_id":
      "fbd1008c4efd005e0ae2967081094ecc", "description": "User Security", "rev_note":
      "Initial import", "deployments_active": 1, "script": "#!/bin/bash\n#\n# Security
      StackScript\n# By Donald von Stufft <donald.stufft@gmail.com>\n#\n# <udf name=\"user_name\"
      label=\"Unprivileged User Account\" />\n# <udf name=\"user_password\" label=\"Unprivileged
      User Password\" />\n# <udf name=\"user_sshkey\" label=\"Public Key for User\"
      default=\"\" />\n#\n# <udf name=\"sshd_port\" label=\"SSH Port\" default=\"22\"
      />\n# <udf name=\"sshd_protocol\" label=\"SSH Protocol\" oneOf=\"1,2,1 and 2\"
      default=\"2\" />\n# <udf name=\"sshd_permitroot\" label=\"SSH Permit Root Login\"
      oneof=\"No,Yes\" default=\"No\" />\n# <udf name=\"sshd_passwordauth\" label=\"SSH
      Password Authentication\" oneOf=\"No,Yes\" default=\"No\" />\n# <udf name=\"sshd_group\"
      label=\"SSH Allowed Groups\" default=\"sshusers\" example=\"List of groups seperated
      by spaces\" />\n#\n# <udf name=\"sudo_usergroup\" label=\"Usergroup to use for
      Admin Accounts\" default=\"wheel\" />\n# <udf name=\"sudo_passwordless\" label=\"Passwordless
      Sudo\" oneof=\"Require Password,Do Not Require Password\", default=\"Require
      Password\" />\n\nsource <ssinclude StackScriptID=\"1\">\n\n# Update the System\nsystem_update\n\n#
      Install and Configure Sudo\naptitude -y install sudo\n\ncp /etc/sudoers /etc/sudoers.tmp\nchmod
      0640 /etc/sudoers.tmp\ntest \"${SUDO_PASSWORDLESS}\" == \"Do Not Require Password\"
      && (echo \"%`echo ${SUDO_USERGROUP} | tr ''[:upper:]'' ''[:lower:]''` ALL =
      NOPASSWD: ALL\" >> /etc/sudoers.tmp)\ntest \"${SUDO_PASSWORDLESS}\" == \"Require
      Password\" && (echo \"%`echo ${SUDO_USERGROUP} | tr ''[:upper:]'' ''[:lower:]''`
      ALL = (ALL) ALL\" >> /etc/sudoers.tmp)\nchmod 0440 /etc/sudoers.tmp\nmv /etc/sudoers.tmp
      /etc/sudoers\n\n# Configure SSHD\necho \"Port ${SSHD_PORT}\" > /etc/ssh/sshd_config.tmp\necho
      \"Protocol ${SSHD_PROTOCOL}\" >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(HostKey
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(UsePrivilegeSeparation
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(KeyRegenerationInterval
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(ServerKeyBits
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(SyslogFacility
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(LogLevel
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(LoginGraceTime
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\necho \"PermitRootLogin
      `echo ${SSHD_PERMITROOT} | tr ''[:upper:]'' ''[:lower:]''`\" >> /etc/ssh/sshd_config.tmp\nsed
      -n ''s/\\(StrictModes .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed
      -n ''s/\\(RSAAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed
      -n ''s/\\(PubkeyAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed
      -n ''s/\\(IgnoreRhosts .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed
      -n ''s/\\(RhostsRSAAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed
      -n ''s/\\(HostbasedAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed
      -n ''s/\\(PermitEmptyPasswords .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed
      -n ''s/\\(ChallengeResponseAuthentication .*\\)/\\1/p'' < /etc/ssh/sshd_config
      >> /etc/ssh/sshd_config.tmp\n\necho \"PasswordAuthentication `echo ${SSHD_PASSWORDAUTH}
      | tr ''[:upper:]'' ''[:lower:]''`\" >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(X11Forwarding
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(X11DisplayOffset
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(PrintMotd
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(PrintLastLog
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\nsed -n ''s/\\(TCPKeepAlive
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(MaxStartups
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(AcceptEnv
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(Subsystem
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\nsed -n ''s/\\(UsePAM
      .*\\)/\\1/p'' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp\n\necho \"AllowGroups
      `echo ${SSHD_GROUP} | tr ''[:upper:]'' ''[:lower:]''`\" >> /etc/ssh/sshd_config.tmp\n\nchmod
      0600 /etc/ssh/sshd_config.tmp\nmv /etc/ssh/sshd_config.tmp /etc/ssh/sshd_config\ntouch
      /tmp/restart-ssh\n\n# Create Groups\ngroupadd ${SSHD_GROUP}\ngroupadd ${SUDO_USERGROUP}\n\n#
      Create User & Add SSH Key\nUSER_NAME_LOWER=`echo ${USER_NAME} | tr ''[:upper:]''
      ''[:lower:]''`\n\nuseradd -m -s /bin/bash -G ${SSHD_GROUP},${SUDO_USERGROUP}
      ${USER_NAME_LOWER}\necho \"${USER_NAME_LOWER}:${USER_PASSWORD}\" | chpasswd\n\nUSER_HOME=`sed
      -n \"s/${USER_NAME_LOWER}:x:[0-9]*:[0-9]*:[^:]*:\\(.*\\):.*/\\1/p\" < /etc/passwd`\n\nsudo
      -u ${USER_NAME_LOWER} mkdir ${USER_HOME}/.ssh\necho \"${USER_SSHKEY}\" >> $USER_HOME/.ssh/authorized_keys\nchmod
      0600 $USER_HOME/.ssh/authorized_keys\nchown ${USER_NAME_LOWER}:${USER_NAME_LOWER}
      $USER_HOME/.ssh/authorized_keys\n\n# Setup Hostname\nget_rdns_primary_ip > /etc/hostname\n/etc/init.d/hostname.sh
      start\n\n# Restart Services\nrestartServices"}, {"is_public": true, "username":
      "dreamsolid", "id": 1571, "deployments_total": 20, "user_defined_fields": [],
      "updated": "2010-12-02T03:55:21", "label": "Git + public keys", "created": "2010-11-21T04:53:32",
      "images": ["linode/ubuntu10.04lts32bit"], "user_gravatar_id": "c3b48280432f00b38b06f09a69391a19",
      "description": "Start a new Ubuntu 10.4 LTS machine and initialize gitosis\r\nfor
      serving up git repositories.\r\n\r\nthere seems to be some issue with the post-install
      state of the script -\r\nyou must open the stack script and add USER_NAME=<your
      username>\r\nthen run ./StackScript\r\n", "rev_note": "Initial Script based
      on ree stack script.  This should also install rvm ", "deployments_active":
      0, "script": "#!/bin/bash\n#\n# Gitosis setup StackScript\n# By Daniel Gray
      <dag@dreamsolid.com>\n#\n# <udf name=\"user_name\" label=\"Your non-root username.  \">\n#
      <udf name=\"user_sshkey\" label=\"Paste in your public key here *note: This
      will also be used for your instance of git\" >\n\n#ADD USER_NAME somewhere we
      can get to it later\necho \"$USER_NAME\" >> uname.txt\n\n###################
      I***REMOVED***LUDES ################\n\nsource <ssinclude StackScriptID=\"1\"> # StackScript
      Bash Library\n\tsystem_update\n\tgoodstuff\n\nsource <ssinclude StackScriptID=\"123\">
      # lib-system-ubuntu\n\tsystem_enable_universe\n\n################### Functions
      #################\nUSER_GROUPS=sudo\nexec &> /root/stackscript.log #record a
      log of the install\n\n\nbegin_logging_stackscript\n\n#Adding the non root user
      to also be the git administrator\nsystem_add_user \"$USER_NAME\" \"$USER_PASSWORD\"
      \"$USER_GROUPS\"\nif [ \"$USER_SSHKEY\" ]; then\n    system_user_add_ssh_key
      \"$USER_NAME\" \"$USER_SSHKEY\"\nfi\n\n################### Set up Gitosis #############\n\nsudo
      adduser \\\n    --system \\\n    --shell /bin/sh \\\n    --gecos ''git version
      control'' \\\n    --group \\\n    --disabled-password \\\n    --home /home/git
      \\\n    git\n\n# Get dependencies\napt-get -y install git-core python-setuptools\n\n#
      Install gitosis\nexport WORKING_DIR=`pwd`/tmp\nmkdir -p $WORKING_DIR\ncd $WORKING_DIR\n\n\t\ngit
      clone git://eagain.net/gitosis.git\ncd gitosis\npython setup.py install\n\n\n#
      Set up gitosis\nUSER_HOME=`system_get_user_home \"$USER_NAME\"`\n\n#There might
      be a better way to do this\n#but we need git to have access to authorized_keys\n#so
      we temporarily change git to owner of the aut keys file we earlier created\nchown
      git.git $USER_HOME/.ssh/authorized_keys\n\nsu git <<- _EOF_\ngitosis-init <
      $USER_HOME/.ssh/authorized_keys\n_EOF_\n\nchown \"$USER_NAME\".\"$USER_NAME\"
      $USER_HOME/.ssh/authorized_keys\n\nrm -rf $WORKING_DIR"}, {"is_public": true,
      "username": "tenfourty", "id": 1640, "deployments_total": 55, "user_defined_fields":
      [], "updated": "2011-09-10T12:31:55", "label": "CentOS-Basic", "created": "2010-12-03T22:45:00",
      "images": ["linode/centos5.632bit", "linode/centos5.6", "linode/centos6.232bit",
      "linode/centos6.2"], "user_gravatar_id": "677b94ebd9f74163b013a821bd34b97a",
      "description": "This is my version of an initial setup script for CentOS.\r\nIt
      updates all packages, installs some basic packages I use and then sets the hostname,
      updates the hosts file and sets the timezone (London).\r\nThis script is based
      on the Fedora/CentOS Basics (http://www.linode.com/stackscripts/view/?StackScriptID=52)
      with my own extensions.", "rev_note": "used my library instead", "deployments_active":
      14, "script": "#!/bin/bash\n# <udf name=\"machinename\" label=\"Hostname - make
      sure reverse DNS is setup\" example=\"hostname\"/>\n\nsource <ssinclude StackScriptID=\"20\">\nsource
      <ssinclude StackScriptID=\"1641\">\n\n###########################################################\n#
      Start Script\n###########################################################\n\n#
      update and install our stuff\nsystem_update\ninstall_basics\ninstall_private\nset_hostname
      $MACHINENAME\nset_timezone"}, {"is_public": true, "username": "tenfourty", "id":
      1641, "deployments_total": 3, "user_defined_fields": [], "updated": "2011-09-10T12:31:37",
      "label": "CentOS-Library", "created": "2010-12-04T14:23:59", "images": ["linode/centos5.632bit",
      "linode/centos5.6", "linode/centos6.232bit", "linode/centos6.2"], "user_gravatar_id":
      "677b94ebd9f74163b013a821bd34b97a", "description": "My library of CentOS functions,
      this is based on the Fedora/CentOS Bash Library (http://www.linode.com/stackscripts/view/?StackScriptID=20)
      but with my own extensions for further functionality.", "rev_note": "added functions
      to set public/private ips", "deployments_active": 1, "script": "#!/bin/bash\n\nfunction
      system_primary_ip {\n  # returns the primary IP assigned to eth0\n  echo $(ifconfig
      eth0 | awk -F: ''/inet addr:/ {print $2}'' | awk ''{ print $1 }'')\n}\n\nfunction
      get_rdns {\n  # calls host on an IP address and returns its reverse dns\n\n  if
      [ ! -e /usr/bin/host ]; then\n    yum -yq install bind-utils > /dev/null\n  fi\n  echo
      $(host $1 | awk ''/pointer/ {print $5}'' | sed ''s/\\.$//'')\n}\n\nfunction
      get_rdns_primary_ip {\n\t# returns the reverse dns of the primary IP assigned
      to this system\n\techo $(get_rdns $(system_primary_ip))\n}\n\nfunction install_private
      {\n  # install our private stuff\n \n  # add the epel library repo\n  rpm -Uvh
      http://download.fedora.redhat.com/pub/epel/5/i386/epel-release-5-4.noarch.rpm\n\n  #
      install some basic stuff we want on every image\n  yum install -y fail2ban denyhosts
      htop system-config-securitylevel\n}\n\nfunction set_hostname {\n  # set the
      hostname\n\n  echo setting hostname to $1\n  echo \"HOSTNAME=$1\" >> /etc/sysconfig/network\n  hostname
      \"$1\"\n\n  # update /etc/hosts\n  echo $(system_primary_ip) $(get_rdns_primary_ip)
      $(hostname) >> /etc/hosts\n}\n\nfunction set_timezone {\n  # set the timezone\n\n  echo
      setting the timezone\n  ln -sf /usr/share/zoneinfo/Europe/London /etc/localtime\n}\n\n#
      $1 - IPADDR, $2 - NETMASK, $3 - ***REMOVED***TEWAY\nfunction set_public_ip {\n  echo -e
      \"# Configuration for eth0\\nDEVICE=eth0\\nBOOTPROTO=none\\n\\n# This line ensures
      that the interface will be brought up during boot.\\nONBOOT=yes\\n\\n# eth0
      - This is the main IP address that will be used for most outbound connections.\\n#
      The address, netmask and gateway are all necessary.\\nIPADDR=${1}\\nNETMASK=${2}\\n***REMOVED***TEWAY=${3}\\n\"
      > /etc/sysconfig/network-scripts/ifcfg-eth0\n}\n\n# $1 - IPADDR, $2 - NETMASK\nfunction
      set_private_ip {\n  echo -e \"# Configuration for eth0:1\\nDEVICE=eth0:1\\nBOOTPROTO=none\\n\\n#
      This line ensures that the interface will be brought up during boot.\\nONBOOT=yes\\n\\n#
      eth0:1 - Private IPs have no gateway (they are not publicly routable) so all
      you need to\\n# specify is the address and netmask.\\nIPADDR=${1}\\nNETMASK=${2}\"
      > /etc/sysconfig/network-scripts/ifcfg-eth0:1\n}\n\n# $1, $2, $3 - name servers
      \nfunction set_dns_resolver {\n  echo -e \"domain members.linode.com\\nsearch
      members.linode.com\\nnameserver ${1}\\nnameserver ${2}\\nnameserver ${3}\\noptions
      rotate\" > /etc/resolv.conf\n}\n\nfunction restart_networking {\n  service network
      restart\n}"}, {"is_public": true, "username": "tenfourty", "id": 1642, "deployments_total":
      19, "user_defined_fields": [], "updated": "2011-09-10T12:31:16", "label": "CentOS-StaticIP",
      "created": "2010-12-04T15:49:16", "images": ["linode/centos5.632bit", "linode/centos5.6",
      "linode/centos6.232bit", "linode/centos6.2"], "user_gravatar_id": "677b94ebd9f74163b013a821bd34b97a",
      "description": "This script does the same tasks as our Basic setup script but
      also sets static public and private ips.\r\nThis script is based on the Fedora/CentOS
      Basics (http://www.linode.com/stackscripts/view/?StackScriptID=52) with my own
      extensions.", "rev_note": "Initial import", "deployments_active": 4, "script":
      "#!/bin/bash\n# <udf name=\"machinename\" label=\"Hostname - make sure reverse
      DNS is setup\" example=\"hostname\"/>\n# <udf name=\"publicip\" label=\"Linode
      Public IP\" example=\"178.79.134.167\"/>\n# <udf name=\"publicnetmask\" label=\"Netmask\"
      default=\"255.255.255.0\" example=\"255.255.255.0\"/>\n# <udf name=\"publicgateway\"
      label=\"Gateway\" example=\"178.79.134.1\"/>\n# <udf name=\"dnsresolver1\" label=\"DNS
      Resolver 1\" default=\"109.74.192.20\" example=\"109.74.192.20\"/>\n# <udf name=\"dnsresolver2\"
      label=\"DNS Resolver 2\" default=\"109.74.193.20\" example=\"109.74.193.20\"/>\n#
      <udf name=\"dnsresolver3\" label=\"DNS Resolver 3\" default=\"109.74.194.20\"
      example=\"109.74.194.20\"/>\n# <udf name=\"privateip\" label=\"Linode Private
      IP\" example=\"192.168.154.122\"/>\n# <udf name=\"privatenetmask\" label=\"Private
      Netmask\" default=\"255.255.128.0\" example=\"255.255.128.0\"/>\n\nsource <ssinclude
      StackScriptID=\"20\">\nsource <ssinclude StackScriptID=\"1641\">\n\n###########################################################\n#
      Start Script\n###########################################################\n\n#
      update and install our stuff\nsystem_update\ninstall_basics\ninstall_private\nset_hostname
      $MACHINENAME\nset_timezone\nset_public_ip $PUBLICIP $PUBLICNETMASK $PUBLIC***REMOVED***TEWAY\nset_private_ip
      $PRIVATEIP $PRIVATENETMASK\nrestart_networking\nset_dns_resolver $DNSRESOLVER1
      $DNSRESOLVER2 $DNSRESOLVER3\nrestart_networking"}, {"is_public": true, "username":
      "felipera", "id": 1686, "deployments_total": 7, "user_defined_fields": [{"label":
      "MySQL root Password", "name": "db_password"}], "updated": "2010-12-13T01:44:45",
      "label": "WordPress", "created": "2010-12-13T01:33:26", "images": ["linode/ubuntu10.04lts32bit"],
      "user_gravatar_id": "9ff50c2ec288cc336426e89379148490", "description": "", "rev_note":
      "Initial import", "deployments_active": 1, "script": "#!/bin/bash -x\n# <UDF
      name=\"db_password\" Label=\"MySQL root Password\" />\n\nsource <ssinclude StackScriptID=1>\n\nsystem_update\npostfix_install_loopback_only\nmysql_install
      \"$DB_PASSWORD\" && mysql_tune 40\nphp_install_with_apache && php_tune\napache_install
      && apache_tune 40 && apache_virtualhost_from_rdns\ngoodstuff\nwordpress_install
      $(get_rdns_primary_ip)\nrestartServices"}, {"is_public": true, "username": "bkirby81",
      "id": 1717, "deployments_total": 4, "user_defined_fields": [{"label": "Name
      of deployment user.", "name": "deploy_user"}, {"label": "Password for deployment
      user.", "name": "deploy_password"}, {"label": "Deployment user public ssh key.",
      "name": "deploy_sshkey"}, {"label": "SSH Port", "name": "ssh_port"}, {"label":
      "Server''s hostname.", "name": "new_hostname"}, {"label": "Default text editor.",
      "name": "default_editor", "default": "nano"}, {"oneof": "Yes,No", "label": "Install
      firewall? (UFW and iptables)", "name": "install_firewall", "default": "Yes"},
      {"oneof": "Yes,No", "label": "Open firewall ports for web?", "name": "open_web_firewall",
      "default": "Yes"}, {"oneof": "No,Stable,With Upload Module", "label": "Install
      Nginx?", "name": "nginx_options", "default": "NO"}, {"manyof": "None,MySQL,MongoDB",
      "label": "Databases to install", "name": "databases_to_install", "default":
      "None"}], "updated": "2010-12-16T15:23:29", "label": "Base setup + Ruby 1.9.2
      + Options", "created": "2010-12-16T04:47:58", "images": ["linode/ubuntu10.04lts32bit",
      "linode/ubuntu10.04lts"], "user_gravatar_id": "3afaec649e9d3fd0ddc32044ed0148e5",
      "description": "Configure hostname, deploy user, upgrade and add universe repos.\r\nConfigure
      sshd\r\nInstall Ruby 1.9.2\r\nOptional database install\r\nOptional nginx install
      (no passenger support)\r\nOptional UFW", "rev_note": "Cleanup apt calls.", "deployments_active":
      1, "script": "#!/bin/bash\n# \n# Ruby 1.9.2 with options for database, and nginx
      install. Installs nginx with upload module support.\n# Outputs to /root/stackscript.log\n#\n#
      <UDF name=\"deploy_user\" Label=\"Name of deployment user.\" />\n# <UDF name=\"deploy_password\"
      Label=\"Password for deployment user.\" />\n# <UDF name=\"deploy_sshkey\" Label=\"Deployment
      user public ssh key.\" />\n# <UDF name=\"ssh_port\" Label=\"SSH Port\" />\n#
      <UDF name=\"new_hostname\" Label=\"Server''s hostname.\" />\n# <UDF name=\"default_editor\"
      Label=\"Default text editor.\" Default=\"nano\" />\n# <UDF name=\"install_firewall\"
      Label=\"Install firewall? (UFW and iptables)\" Default=\"Yes\" oneOf=\"Yes,No\"
      />\n# <UDF name=\"open_web_firewall\" Label=\"Open firewall ports for web?\"
      Default=\"Yes\" oneOF=\"Yes,No\" />\n# <UDF name=\"nginx_options\" Label=\"Install
      Nginx?\" Default=\"NO\" oneOf=\"No,Stable,With Upload Module\" />\n# <UDF name=\"databases_to_install\"
      Label=\"Databases to install\" Default=\"None\" manyOf=\"None,MySQL,MongoDB\"
      />\n\n\nexec &> /root/stackscript.log\n\nsource <ssinclude StackScriptID=1>    #
      Common bash functions\nsource <ssinclude StackScriptID=123>  # Awesome ubuntu
      utils script\n\nfunction log {\n  echo \"$1 `date ''+%D %T''`\"\n}\n\nfunction
      mongodb_install {\n  echo \"deb http://downloads.mongodb.org/distros/ubuntu
      10.4 10gen\" >> /etc/apt/sources.list\n  apt-key adv --keyserver keyserver.ubuntu.com
      --recv 7F0CEB10\n  aptitude update\n  aptitude install -y mongodb-stable\n}\n\nfunction
      system_sshd_portnumber {\n  sed -i \"s/^#*\\(Port\\).*/\\1 $1/\" /etc/ssh/sshd_config\n}\n\nfunction
      system_sshd_append {\n  # $1 configuration option\n  # $2 value to set\n  echo
      \"$1 $2\" >> /etc/ssh/sshd_config\n}\n\n\nfunction install_nginx {\n  if [ \"$NGINX_OPTIONS\"
      == \"Stable\" ]; then\n    add-apt-repository ppa:nginx/stable\t\n  else\n    add-apt-repository
      ppa:brianmercer/nginx\n  fi\n  aptitude update\n  aptitude -y install nginx\n}\n\n\nlog
      \"Adding universe repositories and updating.\"\nsystem_enable_universe\nlog
      \"Base packages updated\"\nlog \"Installing required packages for ruby/rails,
      as well as git...\"\naptitude -y install git-core build-essential zlib1g-dev
      libssl-dev libreadline5-dev gcc g++ libxslt-dev libxml2-dev curl wget python-software-properties
      openssh-server $DEFAULT_EDITOR\nlog \"Packages installed\"\n\n# Add deploy user\nlog
      \"Adding deploy user, and ssh key.\"\nsystem_add_user $DEPLOY_USER $DEPLOY_PASSWORD
      \"users,sudo\"\nsystem_user_add_ssh_key $DEPLOY_USER \"$DEPLOY_SSHKEY\"\nsystem_update_locale_en_US_UTF_8\n\nlog
      \"Reconfiguring SSH\"\nsystem_sshd_portnumber $SSH_PORT\nsystem_sshd_permitrootlogin
      No\nsystem_sshd_passwordauthentication No\nsystem_sshd_pubkeyauthentication
      Yes\nsystem_sshd_append ClientAliveInterval 60\n/etc/init.d/ssh restart\n\nlog
      \"Set hostname to $NEW_HOSTNAME\"\nsystem_update_hostname $NEW_HOSTNAME\n\nif
      [ \"$INSTALL_FIREWALL\" == \"Yes\" ]; then\n  aptitude -y install ufw\n  ufw
      logging on\n  ufw default deny\n  if [ \"$OPEN_WEB_FIREWALL\" == \"Yes\" ];
      then\n    ufw allow 80/tcp\n    ufw allow 443/tcp\n  fi\t\n  ufw allow $SSH_PORT\n  ufw
      enable\t\nfi\n\ncd /usr/local/src\n\nexport RUBY_VERSION=\"ruby-1.9.2-p0\";\nlog
      \"Installing Ruby $RUBY_VERSION\";\n\nlog \"Downloading: (from calling wget
      ftp://ftp.ruby-lang.org/pub/ruby/1.9/$RUBY_VERSION.tar.gz)\"\nlog `wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/$RUBY_VERSION.tar.gz`\n\nlog
      \"tar output\"\nlog `tar xzf $RUBY_VERSION.tar.gz`\nrm \"$RUBY_VERSION.tar.gz\"\ncd
      $RUBY_VERSION\n\nlog \"current directory: `pwd`\"\nlog \"\"\nlog \"Ruby Configuration
      output: (from calling ./configure)\" \nlog `./configure` \n\nlog \"\"\nlog \"Ruby
      make output: (from calling make)\"\nlog `make`\n\nlog \"\"\nlog \"Ruby make
      install output: (from calling make install)\"\nlog `make install` \ncd ..\n\nlog
      \"\"\nlog \"Ruby install complete... updating rubygems if necessary.\"\n\ngem
      update --system\n\ncat <<EOT >/root/.gemrc\n---\n:verbose: true\n:bulk_threshold:
      1000\ninstall: --no-ri --no-rdoc --env-shebang\n:sources:\n- http://gemcutter.org\n-
      http://gems.rubyforge.org/\n- http://gems.github.com\n:benchmark: false\n:backtrace:
      false\nupdate: --no-ri --no-rdoc --env-shebang\n:update_sources: true\nEOT\n\ncp
      /root/.gemrc /home/$DEPLOY_USER/.gemrc && chown $DEPLOY_USER:$DEPLOY_USER /home/$DEPLOY_USER/.gemrc\n\nif
      [ \"$NGINX_OPTIONS\" != \"No\" ]; then\n  install_nginx\nfi\n \nif [[ -n \"$(echo
      $DATABASES_TO_INSTALL | grep ''MySQL'')\" ]]; then\n  log \"Installing MySQL\"\n  aptitude
      -y install libmysqlclient-dev\n  mysql_install \"$DEPLOY_PASSWORD\"\n  mysql_tune
      30\nfi\n\nif [[ -n \"$(echo $DATABASES_TO_INSTALL | grep ''MongoDB'')\" ]];
      then\n  log \"Installing MongoDB\"\n  mongodb_install\nfi"}, {"is_public": true,
      "username": "funnymonkey", "id": 1905, "deployments_total": 73, "user_defined_fields":
      [{"label": "SSH user''s login name", "name": "ssh_user_name"}, {"label": "SSH
      user''s password", "name": "ssh_user_password"}, {"label": "MySQL root Password",
      "name": "db_password"}, {"example": "(optional) Drupal database name", "label":
      "Create Database", "name": "db_name", "default": "drupal"}, {"example": "(optional)
      Drupal database user", "label": "Create MySQL User", "name": "db_user", "default":
      "drupal"}, {"example": "(optional) Drupal database user''s password", "label":
      "MySQL User''s Password", "name": "db_user_password", "default": ""}, {"example":
      "(optional) eg. www.example.com Leave this blank if you do not have a Domain
      Name", "label": "Drupal''s hostname", "name": "drupal_hostname", "default":
      ""}], "updated": "2011-02-22T17:53:24", "label": "voicebox", "created": "2011-01-18T22:30:54",
      "images": ["linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts"], "user_gravatar_id":
      "c0eb3e06a324ace9c70bd3e1b397d0e7", "description": "The VoiceBox installation
      profile is designed to simplify the work of groups looking to create or expand
      their online presence. Groups who could use this site range from media organizations
      to not-for-profits to schools to advocacy groups. If an organization wants to
      build a place for their stakeholders to publish, interact, and get more informed,
      then VoiceBox could support that work.\r\n\r\nVoiceBox is built on Drupal, and
      is freely available. Because VoiceBox is built using Drupal from open source
      components, you are free to take it, install it, and modify it to meet your
      needs.\r\n\r\nVoiceBox was built as part of the Knight Drupal Initiative, which
      was funded by the Knight Foundation.\r\n\r\nSteps to Install:\r\n1. After provisioning
      a linode. Choose \"rebuild\" from the control panel.\r\n2. Choose \"Deploying
      Using Stackscripts\"\r\n3. Search for voicebox and choose \"funnymonkey/voicebox\"\r\n4.
      Wait for the rebuild.\r\n5. Boot the server. Note that booting the server will
      boot the server and then run the stackscript. Running the stackscript to completion
      can take several minutes. It is best to monitor the progress via the lish AJAX
      console. Beginning the voicebox install prior to the stackscript completing
      can cause errors that are difficult to troubleshoot and resolve. You should
      monitor the \r\nprogress of the stackscript via the console and wait for the
      scrolling to stop with a login prompt. It should look something like the following;\r\n<pre>\r\nUbuntu
      10.04 LTS li280-10 hvc0                                                                      \r\n\r\nli280-10
      login:\r\n</pre>\r\n6. Continue with the voicebox install at the appropriate
      IP address or hostname if you configured the domain name.\r\n\r\nSee also:\r\nhttp://code.funnymonkey.com/introducing-voicebox\r\nhttp://drupal.org/project/voicebox",
      "rev_note": "team-primate: @158 undo majority of changes in @157 as per #106",
      "deployments_active": 15, "script": "#!/bin/bash\n# $Id: $\n# <UDF name=\"ssh_user_name\"
      Label=\"SSH user''s login name\" />\n# <UDF name=\"ssh_user_password\" Label=\"SSH
      user''s password\" />\n# <UDF name=\"db_password\" Label=\"MySQL root Password\"
      />                           \n# <UDF name=\"db_name\" Label=\"Create Database\"
      default=\"drupal\" example=\"(optional) Drupal database name\" />\n# <UDF name=\"db_user\"
      Label=\"Create MySQL User\" default=\"drupal\" example=\"(optional) Drupal database
      user\" />\n# <UDF name=\"db_user_password\" Label=\"MySQL User''s Password\"
      default=\"\" example=\"(optional) Drupal database user''s password\" />\n# <UDF
      name=\"drupal_hostname\" Label=\"Drupal''s hostname\" default=\"\" example=\"(optional)
      eg. www.example.com Leave this blank if you do not have a Domain Name\" />\n\nfunction
      base_setup {\n  if [ ! -n \"${DRUPAL_HOSTNAME}\" ]; then \n    # default to
      the linode DNS\n    export DRUPAL_HOSTNAME=`hostname`.members.linode.com\n  fi\n  \n  \n  #
      install shar utils for uuencode for password generation\n  apt-get -y install
      sharutils\n  \n  # install bc used for various math calculations\n  apt-get
      -y install bc\n  \n  #export DB_PASSWORD=`head -c 16 < /dev/random | uuencode
      -m - | sed ''1d'' | sed ''2d''`\n  #export DB_NAME=voicebox\n  #export DB_USER=voicebox\n  #export
      DB_USER_PASSWORD=voicebox\n  export SERVERSTATS_HTACCESS_USERNAME=admin\n  export
      SERVERSTATS_HTACCESS_PASSWORD=`head -c 16 < /dev/random | uuencode -m - | sed
      ''1d'' | sed ''2d''`\n  \n  \n}\n\n###########################################################\n#
      Users with sudo\n###########################################################\nfunction
      add_sudo_user {\n  if [ -n \"$1\" ]; then\n    # $1 - username\n    # $2 - password\n    USERNAME=`echo
      $1 | tr A-Z a-z`\n    PASSWORD=$2\n    SHELL=\"/bin/bash\"\n    useradd --create-home
      --shell \"$SHELL\" --user-group --groups sudo \"$USERNAME\"\n    echo \"$USERNAME:$PASSWORD\"
      | chpasswd\n  fi\n}\n\n###########################################################\n#
      mysql-server\n###########################################################\nfunction
      mysql_install {\n  # $1 - the mysql root password\n\n  if [ ! -n \"$1\" ]; then\n    echo
      \"mysql_install() requires the root pass as its first argument\"\n    return
      1;\n  fi\n\n  echo \"mysql-server-5.1 mysql-server/root_password password $1\"
      | debconf-set-selections\n  echo \"mysql-server-5.1 mysql-server/root_password_again
      password $1\" | debconf-set-selections\n  apt-get -y install mysql-server mysql-client\n\n  echo
      \"Sleeping while MySQL starts up for the first time...\"\n  sleep 5\n}\n\nfunction
      mysql_tune {\n  sed -i -e ''s/^#skip-innodb/skip-innodb/'' /etc/mysql/my.cnf
      # disable innodb - saves about 100M\n\n  # mysql config options we want to set
      to the percentages in the second list, respectively\n  OPTLIST=(key_buffer sort_buffer_size
      read_buffer_size read_rnd_buffer_size query_cache_size)\n  DISTLIST=(32 4 4
      4 8)\n\n  for opt in ${OPTLIST[@]}; do\n    # enable the option if it is disabled\n    sed
      -i -e \"/\\[mysqld\\]/,/\\[.*\\]/s/^$opt/#$opt/\" /etc/mysql/my.cnf\n  done\n\n  for
      i in ${!OPTLIST[*]}; do\n    config=\"${config}\\n${OPTLIST[$i]} = ${DISTLIST[$i]}M\"\n  done\n\n  config=\"${config}\\ntable_cache
      = 512\"\n\n  sed -i -e \"s/\\(\\[mysqld\\]\\)/\\1\\n$config\\n/\" /etc/mysql/my.cnf\n\n  #
      install the MySQL tuning-primer and install the necessary libs\n  curl -o /root/tuning-primer.sh
      http://www.day32.com/MySQL/tuning-primer.sh\n  chmod +x /root/tuning-primer.sh\n\n  touch
      /tmp/restart-mysql\n}\n\nfunction mysql_limit_connections {\n  # intended to
      be ran after apache_tune this limits mysql''s max_connections relative to Apache''s
      MaxClients\n  MYSQLMAX=`echo \"${MAXCLIENTS} * 2\" | bc`\n  if [ $MYSQLMAX -lt
      12 ]\n    then MYSQLMAX=12\n  fi\n  sed -i -e \"s/^#max_connections.*/max_connections
      = ${MYSQLMAX}/\" /etc/mysql/my.cnf\n  \n  touch /tmp/restart-mysql  \n}\n\nfunction
      mysql_create_database {\n  # $1 - the mysql root password\n  # $2 - the db name
      to create\n\n  if [ ! -n \"$1\" ]; then\n    echo \"mysql_create_database()
      requires the root pass as its first argument\"\n    return 1;\n  fi\n  if [
      ! -n \"$2\" ]; then\n    echo \"mysql_create_database() requires the name of
      the database as the second argument\"\n    return 1;\n  fi\n\n  echo \"CREATE
      DATABASE $2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\" |
      mysql -u root -p$1\n}\n\nfunction mysql_create_user {\n  # $1 - the mysql root
      password\n  # $2 - the user to create\n  # $3 - their password\n\n  if [ ! -n
      \"$1\" ]; then\n    echo \"mysql_create_user() requires the root pass as its
      first argument\"\n    return 1;\n  fi\n  if [ ! -n \"$2\" ]; then\n    echo
      \"mysql_create_user() requires username as the second argument\"\n    return
      1;\n  fi\n  if [ ! -n \"$3\" ]; then\n    echo \"mysql_create_user() requires
      a password as the third argument\"\n    return 1;\n  fi\n\n  echo \"CREATE USER
      ''$2''@''localhost'' IDENTIFIED BY ''$3'';\" | mysql -u root -p$1\n}\n\nfunction
      mysql_grant_user {\n  # $1 - the mysql root password\n  # $2 - the user to bestow
      privileges \n  # $3 - the database\n\n  if [ ! -n \"$1\" ]; then\n    echo \"mysql_create_user()
      requires the root pass as its first argument\"\n    return 1;\n  fi\n  if [
      ! -n \"$2\" ]; then\n    echo \"mysql_create_user() requires username as the
      second argument\"\n    return 1;\n  fi\n  if [ ! -n \"$3\" ]; then\n    echo
      \"mysql_create_user() requires a database as the third argument\"\n    return
      1;\n  fi\n\n  echo \"GRANT ALL PRIVILEGES ON $3.* TO ''$2''@''localhost'';\"
      | mysql -u root -p$1\n  echo \"FLUSH PRIVILEGES;\" | mysql -u root -p$1\n\n}\n\n###########################################################\n#
      Apache\n###########################################################\n\nfunction
      apache_install {\n  # installs the system default apache2 MPM\n  aptitude -y
      install apache2\n\n  a2dissite default # disable the interfering default virtualhost\n\n  #
      clean up, or add the NameVirtualHost line to ports.conf\n  sed -i -e ''s/^NameVirtualHost
      \\*$/NameVirtualHost *:80/'' /etc/apache2/ports.conf\n  if ! grep -q NameVirtualHost
      /etc/apache2/ports.conf; then\n    echo ''NameVirtualHost *:80'' > /etc/apache2/ports.conf.tmp\n    cat
      /etc/apache2/ports.conf >> /etc/apache2/ports.conf.tmp\n    mv -f /etc/apache2/ports.conf.tmp
      /etc/apache2/ports.conf\n  fi\n  \n  # Server stats runs on 8080\n  echo \"NameVirtualHost
      *:8080\" >> /etc/apache2/ports.conf\n  echo \"Listen 8080\" >> /etc/apache2/ports.conf\n}\n\nfunction
      apache_tune {\n  # sets AVAIL\n  available_memory\n  \n  PERPROCMEM=96 # the
      amount of memory in MB each apache process is likely to utilize\n  MAXCLIENTS=`echo
      \"$AVAILMEM/$PERPROCMEM\" | bc`\n  \n  # 6 MaxClients is an absolute minimum...
      lower than this and Apache just doesn''t work properly\n  if [ $MAXCLIENTS -lt
      6 ]\n    then MAXCLIENTS=6\n  fi\n  \n  sed -i -e \"s/\\(^[ \\t]*MaxClients[
      \\t]*\\)[0-9]*/\\1$MAXCLIENTS/\" /etc/apache2/apache2.conf\n\n  mysql_limit_connections\n\n  touch
      /tmp/restart-apache2\n}\n\nfunction apache_virtualhost {\n  # Configures a VirtualHost\n\n  #
      $1 - required - the hostname of the virtualhost to create \n  if [ ! -n \"$1\"
      ]; then\n    echo \"apache_virtualhost() requires the hostname as the first
      argument\"\n    return 1;\n  fi\n\n  if [ -e \"/etc/apache2/sites-available/$1\"
      ]; then\n    echo /etc/apache2/sites-available/$1 already exists\n    return;\n  fi\n\n  mkdir
      -p /srv/www/$1/public_html \n\n  echo \"<VirtualHost *:80>\" > /etc/apache2/sites-available/$1\n  echo
      \"    ServerName $1\" >> /etc/apache2/sites-available/$1\n  echo \"    DocumentRoot
      /srv/www/$1/public_html/\" >> /etc/apache2/sites-available/$1\n  echo \"    ErrorLog
      /var/log/apache2/$1-error.log\" >> /etc/apache2/sites-available/$1\n        echo
      \"    CustomLog /var/log/apache2/$1-access.log combined\" >> /etc/apache2/sites-available/$1\n  echo
      \"</VirtualHost>\" >> /etc/apache2/sites-available/$1\n\n  a2ensite $1\n\n  touch
      /tmp/restart-apache2\n}\n\nfunction apache_virtualhost_from_rdns {\n  # Configures
      a VirtualHost using the rdns of the first IP as the ServerName\n\n  apache_virtualhost
      $(get_rdns_primary_ip)\n}\n\n\nfunction apache_virtualhost_get_docroot {\n  if
      [ ! -n \"$1\" ]; then\n    echo \"apache_virtualhost_get_docroot() requires
      the hostname as the first argument\"\n    return 1;\n  fi\n\n  if [ -e /etc/apache2/sites-available/$1
      ];\n    then echo $(awk ''/DocumentRoot/ {print $2}'' /etc/apache2/sites-available/$1
      )\n  fi\n}           \n\n###########################################################\n#
      PHP\n###########################################################\nfunction php_tune
      {\n  sed -i -e \"s/^upload_max_filesize = [0-9]*M/upload_max_filesize = 16M/\"
      /etc/php5/apache2/php.ini # set max upload to 16M\n  sed -i -e \"s/^post_max_size
      = [0-9]*M/post_max_size = 18M/\" /etc/php5/apache2/php.ini # set max upload
      to 16M\n  \n  # configure apc\n  apt-get -y install php-apc\n  \n  echo ''apc.shm_size=\"64\"''
      >> /etc/php5/apache2/conf.d/apc.ini\n}\n\n\n###########################################################\n#
      Postfix\n###########################################################\n \nfunction
      postfix_install_loopback_only {\n    # Installs postfix and configure to listen
      only on the local interface. Also\n    # allows for local mail delivery\n \n    echo
      \"postfix postfix/main_mailer_type select Internet Site\" | debconf-set-selections\n    echo
      \"postfix postfix/mailname string localhost\" | debconf-set-selections\n    echo
      \"postfix postfix/destinations string localhost.localdomain, localhost\" | debconf-set-selections\n    aptitude
      -y install postfix\n    /usr/sbin/postconf -e \"inet_interfaces = loopback-only\"\n    #/usr/sbin/postconf
      -e \"local_transport = error:local delivery is disabled\"\n \n    touch /tmp/restart-postfix\n}\n
      \n###########################################################\n# Other niceties!\n###########################################################\n
      \nfunction goodstuff {\n    # Installs the REAL vim, wget, less, and enables
      color root prompt and the \"ll\" list long alias\n \n    aptitude -y install
      wget vim less screen\n    sed -i -e ''s/^#PS1=/PS1=/'' /root/.bashrc # enable
      the colorful root bash prompt\n    sed -i -e \"s/^#alias ll=''ls -l''/alias
      ll=''ls -al''/\" /root/.bashrc # enable ll list long alias <3\n}\n \n###########################################################\n#
      utility functions\n###########################################################\n
      \nfunction restartServices {\n    # restarts services that have a file in /tmp/needs-restart/\n
      \n    for service in $(ls /tmp/restart-* | cut -d- -f2); do\n        /etc/init.d/$service
      restart\n        rm -f /tmp/restart-$service\n    done\n}\n\n###########################################################\n#
      FunnyMonkey\n###########################################################\n\nfunction
      drush_install {\n  apt-get install -y cvs php5-cli\n\n  if [ ! -e /usr/local/bin/drush
      ]; then\n    cd /usr/local && cvs -z6 -d:pserver:anonymous:anonymous@cvs.drupal.org:/cvs/drupal-contrib
      checkout -d drush contributions/modules/drush                          \n    if
      [ ! -f /usr/local/drush/drush ]; then                                           \n           echo
      \"Could not checkout drush from cvs\"\n           exit 1\n    fi\n    /usr/local/drush/drush
      -y dl drush && cd /usr/local/bin && ln -s ../drush/drush drush                                                                             \n    if
      [ ! -x /usr/local/bin/drush ]; then                                       \n           echo
      \"Could not install drush in /usr/local/bin\"\n           exit 1\n    fi\n  fi\n}\n\nfunction
      fix_locales {\n  apt-get install -y locales\n  locale-gen en_US.UTF-8\n}\n\nfunction
      VoiceBox_install {\n  VPATH=$(apache_virtualhost_get_docroot $1)\n\n  if [ !
      -n \"$VPATH\" ]; then\n    echo \"Could not determine DocumentRoot for $1\"\n    return
      1;                                     \n  fi\n\n  # A few dependencies\n  apt-get
      install -y php5-imap php5-gd php5-dev php-pear php5-mysql php5-curl\n  pecl
      install uploadprogress\n  echo \"extension=uploadprogress.so\" > /etc/php5/apache2/conf.d/uploadprogress.ini\n\n  #
      lucid has a deprecated comment tag in imap.ini\n  sed -i -e ''s/# configuration
      for php Imap module/; configuration for php Imap module/'' /etc/php5/cli/conf.d/imap.ini\n\n  #
      Install the VoiceBox Package\n  apt-get install -y libxml-xpath-perl\n  wget
      -O VoiceBox-project.xml http://code.funnymonkey.com/fserver/voicebox/6.x\n  RELEASENAME=`xpath
      -q -e ''/project/releases/release[1]/name'' VoiceBox-project.xml | \\\n    perl
      -e ''<STDIN> =~ /<name>(.*)<\\/name>/; $name=$1; $name =~ s/ /-/; print $name;''`\n  RELEASE=`xpath
      -q -e ''/project/releases/release[1]/download_link'' VoiceBox-project.xml |
      \\\n    perl -e ''<STDIN> =~ /<download_link>(.*)<\\/download_link>/; print
      $1;''`\n\n  # download, extract, chown, and get our config file started\n  cd
      $VPATH                                                  \n  cd .. && rm -rf
      public_html                                \n  wget -O $RELEASENAME.tgz $RELEASE\n  tar
      -zxf $RELEASENAME.tgz\n  mv `find . -maxdepth 1 -type d -name ''voicebox*''`
      public_html\n  drush_install\n\n  cd $VPATH                                                         \n\n  #
      fix issue with the mimedetect module See; http://drupal.org/node/306217\n  echo
      \"\\$conf[''mimedect_magic''] = ''/usr/share/file/magic''; \" >> sites/default/default.settings.php\n\n  cp
      sites/default/default.settings.php sites/default/settings.php  \n  mkdir sites/default/files                                         \n  chmod
      640 sites/default/settings.php                              \n  # make sure
      to only issue recursive chown if we are where we think we are\n  cd $VPATH &&
      chown -R root:root .                                              \n  chown
      -R www-data:www-data $VPATH/sites/default/files\n  chown -R www-data:www-data
      $VPATH/sites/default/settings.php\n  # database configuration\n  if [ ! -n \"$DB_USER_PASSWORD\"
      ]; then\n    DB_USER_PASSWORD=$(randomString 20)\n  fi                                         \n\n  mysql_create_database
      \"$DB_PASSWORD\" \"$DB_NAME\"\n  mysql_create_user \"$DB_PASSWORD\" \"$DB_USER\"
      \"$DB_USER_PASSWORD\"\n  mysql_grant_user \"$DB_PASSWORD\" \"$DB_USER\" \"$DB_NAME\"          \n\n  #
      setup crontab and clean-urls\n  echo \"0 * * * * /usr/local/bin/drush -r $VPATH
      cron >/dev/null\" | crontab -\n  a2enmod rewrite\n\n  # make sure there is a
      minimum of 96M for php\n  sed -i \"/^memory_limit/s/=.*/= 96M/\" /etc/php5/apache2/php.ini\n\n  touch
      /tmp/restart-apache2  \n}\n\nfunction iptables_install {\n  # write the initial
      iptables file\n  iptablesFile=\"/etc/iptables-\"`date +%Y%m%d`\n\ncat > $iptablesFile
      <<EOF\n*filter \n-A INPUT -d 127.0.0.0/8 -i ! lo -j REJECT --reject-with icmp-port-unreachable
      \n-A INPUT -i lo -j ACCEPT \n-A INPUT -i eth0 -j ACCEPT \n-A INPUT -m state
      --state RELATED,ESTABLISHED -j ACCEPT \n-A INPUT -i eth1 -p icmp -m icmp --icmp-type
      8 -m limit --limit 1/sec -j ACCEPT \n-A INPUT -p tcp -m tcp --dport 22 -m state
      --state NEW -m recent --update --seconds 60 --hitcount 4 --name DEFAULT --rsource
      -j DROP \n-A INPUT -p tcp -m tcp --dport 22 -m state --state NEW -m recent --set
      --name DEFAULT --rsource \n-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT \n-A
      INPUT -p tcp -m tcp --dport 80 -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 8080
      -j ACCEPT \n-A INPUT -j REJECT --reject-with icmp-port-unreachable\nCOMMIT\nEOF\n\n  ln
      -sf $iptablesFile /etc/iptables\n}\n\nfunction make_iptables_resilient {\n  cat
      >> /etc/network/interfaces <<\"INTERFACES\"\n        pre-up iptables-restore
      < /etc/iptables\n        post-down iptables-save -c > /etc/iptables-`date +%Y%m%d`\nINTERFACES\n}\n\nfunction
      serverstats_install {\n  apt-get install -y serverstats\n\n  # modify the serverstats
      config file to enable apache and mysql monitoring\n  cp /etc/serverstats/simple.php
      /etc/serverstats/simple.php-`date +%Y%m%d%H%M%S`\n  cat /etc/serverstats/simple.php
      | \\\n    perl -e \"\n      \\$/=undef; \n      \\$config = <STDIN>; \n      \\$config
      =~ s/(apache.*?used[^>]+>)[^,]+,/\\$1 true,/s;\n      \\$config =~ s/(apache.*?hosts[^>]+>)[^,]+,/\\$1
      array(''localhost:8080''),/s; \n      \\$config =~ s/(mysql.*?used[^>]+>)[^,]+,/\\$1
      true,/s; \n      \\$config =~ s/(mysql.*?user[^>]+>)\\s*''[^'']+'',/\\$1 ''$DB_USER'',/s;
      \n      \\$config =~ s/(mysql.*?password[^>]+>)\\s*''[^'']+'',/\\$1 ''$DB_USER_PASSWORD'',/s;
      \n      print \\$config;\" > \\\n    /tmp/simple.php\n  mv /tmp/simple.php /etc/serverstats/simple.php\n\n  #
      define_syslog_variables() is deprecated\n  sed -i -e ''s/define_syslog_variables()\\;//''
      /usr/share/serverstats/includes/logger_syslog.class.php\n\n  enable_server_stats_apache\n\n  #
      enable serverstats cronjob\n  crontab -l > /tmp/serverstats_install_crontab\n  echo
      \"* * * * * php /usr/share/serverstats/update.php >/dev/null 2>&1\" >> /tmp/serverstats_install_crontab\n  cat
      /tmp/serverstats_install_crontab |crontab -\n  rm /tmp/serverstats_install_crontab\n  touch
      /tmp/restart-apache2  \n}\n\nfunction enable_server_stats_apache() {\n  # password
      protect server stats\n  HTUSERS_FILE=$(dirname $(apache_virtualhost_get_docroot
      $DRUPAL_HOSTNAME))/htusers\n\n  htpasswd -bc $HTUSERS_FILE $SERVERSTATS_HTACCESS_USERNAME
      $SERVERSTATS_HTACCESS_PASSWORD\n  a2ensite default\ncat > /etc/apache2/sites-enabled/000-default
      <<SSAPACHE\n<VirtualHost *:8080>\n    ServerAdmin webmaster@localhost\n\n    DocumentRoot
      /usr/share/serverstats\n    <Directory usr/share/serverstats>\n        Options
      Indexes MultiViews FollowSymLinks\n        AllowOverride None\n        Order
      allow,deny\n        AuthType Basic\n        AuthName \"Server Statistics\"\n        AuthUserFile
      $HTUSERS_FILE\n        require valid-user\n        allow from 127.0.0.1\n        Satisfy
      Any\n    </Directory>\n\n    ErrorLog /var/log/apache2/error.log\n\n    # Possible
      values include: debug, info, notice, warn, error, crit,\n    # alert, emerg.\n    LogLevel
      warn\n\n    CustomLog /var/log/apache2/access.log combined\n\n</VirtualHost>\nSSAPACHE\n}\n\n#
      Instructions: https://help.ubuntu.com/10.04/serverguide/C/automatic-updates.html\nfunction
      setup_unattented_upgrades {\n  apt-get install -y unattended-upgrades\n\n# Is
      there a way to do this independently of the ubuntu release name?\ncat > /etc/apt/apt.conf.d/50unattended-upgrades
      <<\"UUPGRADES\"\nUnattended-Upgrade::Allowed-Origins {\n        \"Ubuntu lucid-security\";\n//      \"Ubuntu
      lucid-updates\";\n};\nUUPGRADES\n\ncat > /etc/apt/apt.conf.d/10periodic <<PERIODIC\nAPT::Periodic::Update-Package-Lists
      \"1\";\nAPT::Periodic::Download-Upgradeable-Packages \"1\";\nAPT::Periodic::AutocleanInterval
      \"7\";\nAPT::Periodic::Unattended-Upgrade \"1\";\nPERIODIC\n}\n\nfunction setup_fail2ban
      {\n  apt-get install -y fail2ban\n\n  #enable the different jails for fail2ban\n  cp
      /etc/fail2ban/jail.conf /etc/fail2ban/jail.conf-`date +%Y%m%d%H%M%S`\n  cat
      /etc/fail2ban/jail.conf | \\\n    perl -e \"\n      \\$/=undef; \n      \\$config
      = <STDIN>; \n      \\$config =~ s/(\\[ssh\\].*?enabled\\s*=\\s*)[^\\n]+/\\$1true,/s;
      \n      \\$config =~ s/(\\[ssh-ddos\\].*?enabled\\s*=\\s*)[^\\n]+/\\$1true,/s;
      \n      \\$config =~ s/(\\[apache\\].*?enabled\\s*=\\s*)[^\\n]+/\\$1true,/s;
      \n      \\$config =~ s/(\\[apache-noscript\\].*?enabled\\s*=\\s*)[^\\n]+/\\$1true,/s;
      \n      \\$config =~ s/(\\[apache-overflows\\].*?enabled\\s*=\\s*)[^\\n]+/\\$1true,/s;
      \n      print \\$config;\" > \\\n    /tmp/jail.conf\n  mv /tmp/jail.conf /etc/fail2ban/jail.conf\n\n  touch
      /tmp/restart-fail2ban\n}\n\nfunction available_memory {\n  MEM=$(grep MemTotal
      /proc/meminfo | awk ''{ print int($2/1024) }'') # how much memory in MB this
      system has\n  \n  if [ $MEM -lt 512 ]\n    then MEM=512\n  fi\n\n  # Mysql:
      ~150M this is an approximation it is really 50M + ~50M per thread.\n  MYSQLMEM=150\n  #
      apc: 64M  apc.shm_size\n  APCMEM=64\n  \n  # 80% of the total physical RAM minus
      the above \"fixed\" values\n  AVAILMEM=`echo \"$MEM * 8 / 10 - $MYSQLMEM - $APCMEM\"
      | bc`\n}\n\n\n\n###########################################################\n#
      Actual install steps \n###########################################################\nbase_setup
      \napt-get install -y aptitude\nsystem_update\necho \"############################
      SETTING UP FIREWALL ############################\" \niptables_install\nmake_iptables_resilient\niptables-restore
      < /etc/iptables\n\nfix_locales\npostfix_install_loopback_only\n\necho \"##############################
      SETTING UP MYSQL #############################\" \nmysql_install \"$DB_PASSWORD\"
      && mysql_tune\ngoodstuff\n\necho \"########################### SETTING UP APACHE/PHP
      ###########################\" \napache_install && apache_tune\napache_virtualhost
      $DRUPAL_HOSTNAME\nphp_tune\n\necho \"############################ SETTING UP
      VOICEBOX ############################\" \nVoiceBox_install $DRUPAL_HOSTNAME\n\n\nserverstats_install\nsetup_unattented_upgrades\nsetup_fail2ban\n\nadd_sudo_user
      \"$SSH_USER_NAME\" \"$SSH_USER_PASSWORD\"\n\nrestartServices"}, {"is_public":
      true, "username": "quinnebert", "id": 1910, "deployments_total": 6, "user_defined_fields":
      [{"example": "Used for SIP authorization process", "label": "MySQL root Password",
      "name": "db_password"}, {"example": "The IP of the Kamailio node that hosts
      MySQL for SIP Authentication", "label": "Kamailio''s IP", "name": "kamas_ip"}],
      "updated": "2011-01-20T13:47:33", "label": "Asterisk (series1.6) Deployment
      for Concentration", "created": "2011-01-20T13:33:07", "images": ["linode/debian5.032bit",
      "linode/ubuntu10.04lts32bit", "linode/ubuntu10.1032bit", "linode/ubuntu9.1032bit"],
      "user_gravatar_id": "b11cc75de945fce1b597cb23e0c27dc7", "description": "A stackscript
      designed for deploying an Asterisk 1.6 node, designed to use Kamailio as a concentrator,
      and for failover control.", "rev_note": "Initial import", "deployments_active":
      0, "script": "#!/bin/bash\n# <UDF name=\"db_password\" Label=\"MySQL root Password\"
      example=\"Used for SIP authorization process\" />\n# <UDF name=\"kamas_ip\"
      Label=\"Kamailio''s IP\" example=\"The IP of the Kamailio node that hosts MySQL
      for SIP Authentication\" />\n\n# Import the Linode standard StackScript Library\nsource
      <ssinclude StackScriptID=\"1\">\n\n# Bring The System Up-to-date\nsystem_update\n\n#
      Ensure APT package list is up-to-date \napt-get -y update\n\n# Ensure OpenSSH
      Service is installed...\napt-get -y install openssh-server\n\n# Install bulk
      of packages we need...\napt-get -y install make automake autoconf libtool pkg-config
      gcc g++ doxygen libxml2-dev libncurses5-dev unixodbc-dev libltdl3-dev libmyodbc\n\n#
      Setup ODBC System for Asterisk:\n#for /etc/odbcinst.ini\necho \"[MySQL]\nDescription
      = MySQL driver\nDriver = /usr/lib/odbc/libmyodbc.so\nSetup = /usr/lib/odbc/libodbcmyS.so\nCPTimeout
      =\nCPReuse =\nUsageCount = 1\" > /etc/odbcinst.ini\n#for /etc/odbc.ini\necho
      \"[MySQL-asterisk]\nDescription = MySQL Asterisk database\nTrace = Off\nTraceFile
      = stderr\nDriver = MySQL\nSERVER = $KAMAS_IP\nUSER = asterisk\nPASSWORD = $DB_PASSWORD\nPORT
      = 3306\nDATABASE = asterisk\" > /etc/odbc.ini\n\n# less pager, wget, and vim
      editor\ngoodstuff\n\n# cleanup after stackscripts\nrestartServices\n\n## \n##
      INSTALL ASTERISK\n## \n# WARNING: This section is still incomplete!\ncd /usr/local/src\nwget
      ''http://downloads.asterisk.org/pub/telephony/asterisk/releases/asterisk-1.6.2.7.tar.gz''\ntar
      xvfz asterisk-1.6.2.7.tar.gz\ncd asterisk-1.6.2.7\n./configure\nmake && make
      install && make samples && make progdocs\n\necho \"DEBUG: Let''s slim down Asterisk
      now...\"\necho \"; \n; NoLoads from StackScript\n; \nnoload => app_adsiprog.so\nnoload
      => app_alarmreceiver.so\nnoload => app_amd.so\nnoload => app_confbridge.so\nnoload
      => app_controlplayback.so\nnoload => app_dictate.so\nnoload => app_directed_pickup.so\nnoload
      => app_directory.so\nnoload => app_disa.so\nnoload => app_dumpchan.so\nnoload
      => app_externalivr.so\nnoload => app_festival.so\nnoload => app_followme.so\nnoload
      => app_ices.so\nnoload => app_image.so\nnoload => app_milliwatt.so\nnoload =>
      app_minivm.so\nnoload => app_mixmonitor.so\nnoload => app_morsecode.so\nnoload
      => app_mp3.so\nnoload => app_nbscat.so\nnoload => app_parkandannounce.so\nnoload
      => app_privacy.so\nnoload => app_queue.so\nnoload => app_readexten.so\nnoload
      => app_record.so\nnoload => app_sayunixtime.so\nnoload => app_sendtext.so\nnoload
      => app_sms.so\nnoload => app_speech_utils.so\nnoload => app_url.so\nnoload =>
      app_voicemail.so\nnoload => chan_agent.so\nnoload => chan_bridge.so\nnoload
      => chan_local.so\nnoload => chan_mgcp.so\nnoload => chan_phone.so\nnoload =>
      chan_skinny.so\nnoload => chan_unistim.so\nnoload => func_audiohookinherit.so\nnoload
      => func_blacklist.so\nnoload => func_devstate.so\nnoload => func_extstate.so\nnoload
      => func_uri.so\nnoload => func_vmcount.so\nnoload => func_volume.so\nnoload
      => pbx_ael.so\nnoload => res_adsi.so\nnoload => res_monitor.so\nnoload => res_musiconhold.so\nnoload
      => res_phoneprov.so\nnoload => res_realtime.so\nnoload => res_ael_share.so\nnoload
      => res_smdi.so\" >> /etc/asterisk/modules.conf\n\n# Implant the Asterisk config
      bits...\n#for res_odbc.conf\necho \"[asterisk]\nenabled => yes\ndsn => MySQL-asterisk\nusername
      => asterisk\npassword => $DB_PASSWORD\npre-connect => yes\" >> /etc/asterisk/res_odbc.conf\n#for
      extconfig.conf\necho \"sipusers => odbc,asterisk,sipusers\nsippeers => odbc,asterisk,sipusers\nsipregs
      => odbc,asterisk,sipregs\nvoicemail => odbc,asterisk,voiceboxes\" >> /etc/asterisk/extconfig.conf\n\necho
      -n ''Starting Asterisk...''\n/usr/sbin/asterisk\necho ''Done!''\n\n#               #\n#
      ALL DONE HERE #\n#               #"}, {"is_public": true, "username": "quinnebert",
      "id": 1911, "deployments_total": 13, "user_defined_fields": [{"example": "Used
      for SIP authorization process", "label": "MySQL root Password", "name": "db_password"},
      {"example": "The IP of the Asterisk gateway that primarily RECEIVES users''
      incoming (not outgoing) calls.", "label": "Primary Asterisk IP", "name": "masteriskip"},
      {"example": "Separate multiple IPs by spaces ... You should include Primary
      IP in this list!", "label": "Asterisk System IPs", "name": "asteriskips"}, {"example":
      "Primary IP address of THIS node", "label": "Ethernet IP Address", "name": "ethernetsip"}],
      "updated": "2011-01-20T17:40:48", "label": "Kamailio (OpenSER) Deployment for
      Concentration", "created": "2011-01-20T13:36:12", "images": ["linode/debian5.032bit"],
      "user_gravatar_id": "b11cc75de945fce1b597cb23e0c27dc7", "description": "A stackscript
      designed for deploying a Kamailio node, designed to provide the concentrator
      and fail-smart features, meant to be deployed alongside a node created using
      the \"Asterisk (series1.6) Deployment for Concentration\" stackscript.", "rev_note":
      "Initial import", "deployments_active": 0, "script": "#!/bin/bash\n# <UDF name=\"db_password\"
      Label=\"MySQL root Password\" example=\"Used for SIP authorization process\"
      />\n# <UDF name=\"masteriskip\" Label=\"Primary Asterisk IP\" example=\"The
      IP of the Asterisk gateway that primarily RECEIVES users'' incoming (not outgoing)
      calls.\" />\n# <UDF name=\"asteriskips\" Label=\"Asterisk System IPs\" example=\"Separate
      multiple IPs by spaces ... You should include Primary IP in this list!\" />\n#
      <UDF name=\"ethernetsip\" Label=\"Ethernet IP Address\" example=\"Primary IP
      address of THIS node\" />\n\n# Import the Linode standard StackScript Library\nsource
      <ssinclude StackScriptID=\"1\">\n\n# Bring The System Up-to-date\nsystem_update\n\n#
      Ensure APT package list is up-to-date \napt-get -y update\n\n# Ensure OpenSSH
      Service is installed...\napt-get -y install openssh-server\n\n# Install bulk
      of packages we need...\napt-get -y update\napt-get -y install bison flex make
      gcc g++\napt-get -y install libmysql++-dev\n\n# MySQL Install and Configure
      first DB\nmysql_install \"$DB_PASSWORD\" && mysql_tune 40\n\n# SIP Authentication
      DB Installation\necho \"CREATE DATABASE asterisk;\n\nUSE asterisk;\n\nCREATE
      TABLE \"''`''\"sipusers\"''`''\" (\n\"''`''\"id\"''`''\" int(11) NOT NULL AUTO_I***REMOVED***REMENT,\n\"''`''\"name\"''`''\"
      varchar(80) NOT NULL DEFAULT '''',\n\"''`''\"host\"''`''\" varchar(31) NOT NULL
      DEFAULT '''',\n\"''`''\"nat\"''`''\" varchar(5) NOT NULL DEFAULT ''no'',\n\"''`''\"type\"''`''\"
      enum(''user'',''peer'',''friend'') NOT NULL DEFAULT ''friend'',\n\"''`''\"accountcode\"''`''\"
      varchar(20) DEFAULT NULL,\n\"''`''\"amaflags\"''`''\" varchar(13) DEFAULT NULL,\n\"''`''\"call-limit\"''`''\"
      smallint(5) UNSIGNED DEFAULT NULL,\n\"''`''\"callgroup\"''`''\" varchar(10)
      DEFAULT NULL,\n\"''`''\"callerid\"''`''\" varchar(80) DEFAULT NULL,\n\"''`''\"cancallforward\"''`''\"
      char(3) DEFAULT ''yes'',\n\"''`''\"canreinvite\"''`''\" char(3) DEFAULT ''yes'',\n\"''`''\"context\"''`''\"
      varchar(80) DEFAULT NULL,\n\"''`''\"defaultip\"''`''\" varchar(15) DEFAULT NULL,\n\"''`''\"dtmfmode\"''`''\"
      varchar(7) DEFAULT NULL,\n\"''`''\"fromuser\"''`''\" varchar(80) DEFAULT NULL,\n\"''`''\"fromdomain\"''`''\"
      varchar(80) DEFAULT NULL,\n\"''`''\"insecure\"''`''\" varchar(4) DEFAULT NULL,\n\"''`''\"language\"''`''\"
      char(2) DEFAULT NULL,\n\"''`''\"mailbox\"''`''\" varchar(50) DEFAULT NULL,\n\"''`''\"md5secret\"''`''\"
      varchar(80) DEFAULT NULL,\n\"''`''\"deny\"''`''\" varchar(95) DEFAULT NULL,\n\"''`''\"permit\"''`''\"
      varchar(95) DEFAULT NULL,\n\"''`''\"mask\"''`''\" varchar(95) DEFAULT NULL,\n\"''`''\"musiconhold\"''`''\"
      varchar(100) DEFAULT NULL,\n\"''`''\"pickupgroup\"''`''\" varchar(10) DEFAULT
      NULL,\n\"''`''\"qualify\"''`''\" char(3) DEFAULT NULL,\n\"''`''\"regexten\"''`''\"
      varchar(80) DEFAULT NULL,\n\"''`''\"restrictcid\"''`''\" char(3) DEFAULT NULL,\n\"''`''\"rtptimeout\"''`''\"
      char(3) DEFAULT NULL,\n\"''`''\"rtpholdtimeout\"''`''\" char(3) DEFAULT NULL,\n\"''`''\"secret\"''`''\"
      varchar(80) DEFAULT NULL,\n\"''`''\"setvar\"''`''\" varchar(100) DEFAULT NULL,\n\"''`''\"disallow\"''`''\"
      varchar(100) DEFAULT NULL,\n\"''`''\"allow\"''`''\" varchar(100) DEFAULT NULL,\n\"''`''\"fullcontact\"''`''\"
      varchar(80) NOT NULL DEFAULT '''',\n\"''`''\"ipaddr\"''`''\" varchar(15) NOT
      NULL DEFAULT '''',\n\"''`''\"port\"''`''\" mediumint(5) UNSIGNED NOT NULL DEFAULT
      ''0'',\n\"''`''\"regserver\"''`''\" varchar(100) DEFAULT NULL,\n\"''`''\"regseconds\"''`''\"
      int(11) NOT NULL DEFAULT ''0'',\n\"''`''\"lastms\"''`''\" int(11) NOT NULL DEFAULT
      ''0'',\n\"''`''\"username\"''`''\" varchar(80) NOT NULL DEFAULT '''',\n\"''`''\"defaultuser\"''`''\"
      varchar(80) NOT NULL DEFAULT '''',\n\"''`''\"subscribecontext\"''`''\" varchar(80)
      DEFAULT NULL,\n\"''`''\"useragent\"''`''\" varchar(20) DEFAULT NULL,\n\"''`''\"sippasswd\"''`''\"
      varchar(80) DEFAULT NULL,\nPRIMARY KEY  (\"''`''\"id\"''`''\"),\nUNIQUE KEY
      \"''`''\"name_uk\"''`''\" (\"''`''\"name\"''`''\")\n);\n\nCREATE TABLE \"''`''\"sipregs\"''`''\"
      (\n\"''`''\"id\"''`''\" int(11) NOT NULL AUTO_I***REMOVED***REMENT,\n\"''`''\"name\"''`''\"
      varchar(80) NOT NULL DEFAULT '''',\n\"''`''\"fullcontact\"''`''\" varchar(80)
      NOT NULL DEFAULT '''',\n\"''`''\"ipaddr\"''`''\" varchar(15) NOT NULL DEFAULT
      '''',\n\"''`''\"port\"''`''\" mediumint(5) UNSIGNED NOT NULL DEFAULT ''0'',\n\"''`''\"username\"''`''\"
      varchar(80) NOT NULL DEFAULT '''',\n\"''`''\"regserver\"''`''\" varchar(100)
      DEFAULT NULL,\n\"''`''\"regseconds\"''`''\" int(11) NOT NULL DEFAULT ''0'',\nPRIMARY
      KEY  (\"''`''\"id\"''`''\"),\nUNIQUE KEY \"''`''\"name\"''`''\" (\"''`''\"name\"''`''\")\n);\n\nCREATE
      TABLE IF NOT EXISTS \"''`''\"voiceboxes\"''`''\" (\n\"''`''\"uniqueid\"''`''\"
      int(4) NOT NULL AUTO_I***REMOVED***REMENT,\n\"''`''\"customer_id\"''`''\" varchar(10) DEFAULT
      NULL,\n\"''`''\"context\"''`''\" varchar(10) NOT NULL,\n\"''`''\"mailbox\"''`''\"
      varchar(10) NOT NULL,\n\"''`''\"password\"''`''\" varchar(12) NOT NULL,\n\"''`''\"fullname\"''`''\"
      varchar(150) DEFAULT NULL,\n\"''`''\"email\"''`''\" varchar(50) DEFAULT NULL,\n\"''`''\"pager\"''`''\"
      varchar(50) DEFAULT NULL,\n\"''`''\"tz\"''`''\" varchar(10) DEFAULT ''central'',\n\"''`''\"attach\"''`''\"
      enum(''yes'',''no'') NOT NULL DEFAULT ''yes'',\n\"''`''\"saycid\"''`''\" enum(''yes'',''no'')
      NOT NULL DEFAULT ''yes'',\n\"''`''\"dialout\"''`''\" varchar(10) DEFAULT NULL,\n\"''`''\"callback\"''`''\"
      varchar(10) DEFAULT NULL,\n\"''`''\"review\"''`''\" enum(''yes'',''no'') NOT
      NULL DEFAULT ''no'',\n\"''`''\"operator\"''`''\" enum(''yes'',''no'') NOT NULL
      DEFAULT ''no'',\n\"''`''\"envelope\"''`''\" enum(''yes'',''no'') NOT NULL DEFAULT
      ''no'',\n\"''`''\"sayduration\"''`''\" enum(''yes'',''no'') NOT NULL DEFAULT
      ''no'',\n\"''`''\"saydurationm\"''`''\" tinyint(4) NOT NULL DEFAULT ''1'',\n\"''`''\"sendvoicemail\"''`''\"
      enum(''yes'',''no'') NOT NULL DEFAULT ''no'',\n\"''`''\"delete\"''`''\" enum(''yes'',''no'')
      NULL DEFAULT ''no'',\n\"''`''\"nextaftercmd\"''`''\" enum(''yes'',''no'') NOT
      NULL DEFAULT ''yes'',\n\"''`''\"forcename\"''`''\" enum(''yes'',''no'') NOT
      NULL DEFAULT ''no'',\n\"''`''\"forcegreetings\"''`''\" enum(''yes'',''no'')
      NOT NULL DEFAULT ''no'',\n\"''`''\"hidefromdir\"''`''\" enum(''yes'',''no'')
      NOT NULL DEFAULT ''yes'',\n\"''`''\"stamp\"''`''\" timestamp NOT NULL DEFAULT
      CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\nPRIMARY KEY  (\"''`''\"uniqueid\"''`''\"),\nKEY
      \"''`''\"mailbox_context\"''`''\" (\"''`''\"mailbox\"''`''\",\"''`''\"context\"''`''\")\n);
      \n\nCREATE TABLE \"''`''\"voicemessages\"''`''\" (\n\"''`''\"id\"''`''\" int(11)
      NOT NULL AUTO_I***REMOVED***REMENT,\n\"''`''\"msgnum\"''`''\" int(11) NOT NULL DEFAULT
      ''0'',\n\"''`''\"dir\"''`''\" varchar(80) DEFAULT '''',\n\"''`''\"context\"''`''\"
      varchar(80) DEFAULT '''',\n\"''`''\"macrocontext\"''`''\" varchar(80) DEFAULT
      '''',\n\"''`''\"callerid\"''`''\" varchar(40) DEFAULT '''',\n\"''`''\"origtime\"''`''\"
      varchar(40) DEFAULT '''',\n\"''`''\"duration\"''`''\" varchar(20) DEFAULT '''',\n\"''`''\"mailboxuser\"''`''\"
      varchar(80) DEFAULT '''',\n\"''`''\"mailboxcontext\"''`''\" varchar(80) DEFAULT
      '''',\n\"''`''\"recording\"''`''\" longblob,\n\"''`''\"flag\"''`''\" varchar(128)
      DEFAULT '''',\nPRIMARY KEY  (\"''`''\"id\"''`''\"),\nKEY \"''`''\"dir\"''`''\"
      (\"''`''\"dir\"''`''\")\n);\n\n\nCREATE TABLE version (\n    table_name VARCHAR(32)
      NOT NULL,\n    table_version INT UNSIGNED DEFAULT 0 NOT NULL\n);\nINSERT INTO
      version (table_name, table_version) VALUES (''sipusers'',''6'');\n\nGRANT ALL
      ON asterisk.* TO asterisk@localhost IDENTIFIED BY ''\"$DB_PASSWORD\"'';\n\"
      > /tmp/asterisk.sql\n# \"Inject\" the above SQL Data...\nmysql -u root --password=\"$DB_PASSWORD\"
      < /tmp/asterisk.sql\n\n# less pager, wget, and vim editor\ngoodstuff\n\n# Kamailio
      Installation from-source (Quinn)\ncd /usr/local/src\nwget -c ''http://www.kamailio.org/pub/kamailio/3.0.1/src/kamailio-3.0.1_src.tar.gz''\ntar
      xvfz kamailio-3.0.1_src.tar.gz\ncd kamailio-3.0.1\nmake include_modules=\"db_mysql\"
      cfg && make all && make install\n\n# Kamailio DB Installation\necho \"DBENGINE=MYSQL\nDBROOTUSER=root\nDBHOST=localhost\nDBNAME=openser\"
      >> /usr/local/etc/kamailio/kamctlrc\nrm -f ''/usr/local/lib/kamailio/kamctl/kamdbctl.mysql''\nwget
      -O ''/usr/local/lib/kamailio/kamctl/kamdbctl.mysql'' ''http://quinnebert.net/kamdbctl.mysql''\nchown
      root:staff ''/usr/local/lib/kamailio/kamctl/kamdbctl.mysql''\nchmod 0644 ''/usr/local/lib/kamailio/kamctl/kamdbctl.mysql''\nexport
      PW=\"$DB_PASSWORD\"\n/usr/local/sbin/kamdbctl create\n\n# Toss in a better Kamailio
      configuration, which:\n#  + Supports bonded registration\n#  + Supports smart
      dial failover\necho ''#!KAMAILIO\n\ntcp_connect_timeout=1\n\n#!define WITH_MYSQL\n#!define
      WITH_AUTH\n#!define WITH_USRLOCDB\n#!define WITH_ASTERISK\n#!define WITH_NAT\n\n#\n#
      $Id$\n#\n# Kamailio (OpenSER) SIP Server v3.0 - basic configuration script\n#     -
      web: http://www.kamailio.org\n#     - git: http://sip-router.org\n#\n# Direct
      your questions about this file to: <users@lists.kamailio.org>\n#\n# Refer to
      the Core CookBook at http://www.kamailio.org/dokuwiki/doku.php\n# for an explanation
      of possible statements, functions and parameters.\n#\n# Several features can
      be enabled using ''\"''\"''#!define WITH_FEATURE''\"''\"'' directives:\n#\n#
      *** To run in debug mode:\n#     - define WITH_DEBUG\n#\n# *** To enable mysql:\n#     -
      define WITH_MYSQL\n#\n# *** To enable authentication execute:\n#     - enable
      mysql\n#     - define WITH_AUTH\n#     - add users using ''\"''\"''kamctl''\"''\"''\n#\n#
      *** To enable persistent user location execute:\n#     - enable mysql\n#     -
      define WITH_USRLOCDB\n#\n# *** To enable presence server execute:\n#     - enable
      mysql\n#     - define WITH_PRESE***REMOVED***E\n#\n# *** To enable nat traversal execute:\n#     -
      define WITH_NAT\n#     - install RTPProxy: http://www.rtpproxy.org\n#     -
      start RTPProxy:\n#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722\n#\n#
      *** To enable PSTN gateway routing execute:\n#     - define WITH_PSTN\n#     -
      set the value of pstn.gw_ip\n#     - check route[PSTN] for regexp routing condition\n#\n#
      *** To enhance accounting execute:\n#     - enable mysql\n#     - define WITH_ACCDB\n#     -
      add following columns to database\n#!ifdef ACCDB_COMMENT\n  ALTER TABLE acc
      ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n#!endif\n\n\n#######
      Global Parameters #########\n\n#!ifdef WITH_DEBUG\nfork=no\ndebug=2\nlog_stderror=yes\n#!else\nfork=yes\nchildren=4\ndebug=2\nlog_stderror=no\n#!endif\n\nmemdbg=5\nmemlog=5\n\nlog_facility=LOG_LOCAL0\n\n/*
      uncomment the next line to disable TCP (default on) */\n#disable_tcp=yes\n\n/*
      uncomment the next line to disable the auto discovery of local aliases\n   based
      on revers DNS on IPs (default on) */\n#auto_aliases=no\n\n\n/* uncomment and
      configure the following line if you want Kamailio to\n   bind on a specific
      interface/port/proto (default bind on all available) */\nlisten=udp:''$ETHERNETSIP''\nport=5060\n\n#######
      Custom Parameters #########\n\n# These parameters can be modified runtime via
      RPC interface\n# - see the documentation of ''\"''\"''cfg_rpc''\"''\"'' module.\n#\n#
      Format: group.id = value ''\"''\"''desc''\"''\"'' description\n# Access: $sel(cfg_get.group.id)
      or @cfg_get.group.id\n#\n\n#!ifdef WITH_PSTN\n# PSTN GW Routing\n#\n# - pstn.gw_ip:
      valid IP or hostname as string value, example:\n# pstn.gw_ip = \"10.0.0.101\"
      desc \"My PSTN GW Address\"\n#\n# - by default is empty to avoid misrouting\npstn.gw_ip
      = \"\" desc \"PSTN GW Address\"\n#!endif\n\n#!ifdef WITH_ASTERISK\nasterisk.bindip
      = \"''$MASTERISKIP''\" desc \"Asterisk IP Address\"\nasterisk.bindport = \"5060\"
      desc \"Asterisk Port\"\nkamailio.bindip = \"''$ETHERNETSIP''\" desc \"Kamailio
      IP Address\"\nkamailio.bindport = \"5060\" desc \"Kamailio Port\"\n#!endif\n\n#######
      Modules Section ########\n\n#set module path\nmpath=\"/usr/local/lib/kamailio/modules_k/:/usr/local/lib/kamailio/modules/\"\n\n/*
      uncomment next line for MySQL DB support */\n#!ifdef WITH_MYSQL\nloadmodule
      \"db_mysql.so\"\n#!endif\nloadmodule \"mi_fifo.so\"\nloadmodule \"kex.so\"\nloadmodule
      \"tm.so\"\nloadmodule \"tmx.so\"\nloadmodule \"sl.so\"\nloadmodule \"rr.so\"\nloadmodule
      \"pv.so\"\nloadmodule \"maxfwd.so\"\nloadmodule \"usrloc.so\"\nloadmodule \"registrar.so\"\nloadmodule
      \"textops.so\"\nloadmodule \"uri_db.so\"\nloadmodule \"siputils.so\"\nloadmodule
      \"xlog.so\"\nloadmodule \"sanity.so\"\nloadmodule \"ctl.so\"\nloadmodule \"mi_rpc.so\"\nloadmodule
      \"acc.so\"\n#!ifdef WITH_AUTH\nloadmodule \"auth.so\"\nloadmodule \"auth_db.so\"\n#!endif\n/*
      uncomment next line for aliases support\n   NOTE: a DB (like db_mysql) module
      must be also loaded */\n#loadmodule \"alias_db.so\"\n/* uncomment next line
      for multi-domain support\n   NOTE: a DB (like db_mysql) module must be also
      loaded\n   NOTE: be sure and enable multi-domain support in all used modules\n         (see
      \"multi-module params\" section ) */\n#loadmodule \"domain.so\"\n#!ifdef WITH_PRESE***REMOVED***E\nloadmodule
      \"presence.so\"\nloadmodule \"presence_xml.so\"\n#!endif\n\n#!ifdef WITH_NAT\nloadmodule
      \"nathelper.so\"\n#!endif\n\n#!ifdef WITH_ASTERISK\nloadmodule \"uac.so\"\n#!endif\n\nloadmodule
      \"dispatcher.so\"\n\n# ----------------- setting module-specific parameters
      ---------------\n\n\n# ----- mi_fifo params -----\nmodparam(\"mi_fifo\", \"fifo_name\",
      \"/tmp/kamailio_fifo\")\n\n\n# ----- rr params -----\n# add value to ;lr param
      to cope with most of the UAs\nmodparam(\"rr\", \"enable_full_lr\", 1)\n# do
      not append from tag to the RR (no need for this script)\n#!ifdef WITH_ASTERISK\nmodparam(\"rr\",
      \"append_fromtag\", 1)\n#!else\nmodparam(\"rr\", \"append_fromtag\", 0)\n#!endif\n\n\n#
      ----- rr params -----\nmodparam(\"registrar\", \"method_filtering\", 1)\n/*
      uncomment the next line to disable parallel forking via location */\n# modparam(\"registrar\",
      \"append_branches\", 0)\n/* uncomment the next line not to allow more than 10
      contacts per AOR */\n#modparam(\"registrar\", \"max_contacts\", 10)\n\n\n# -----
      uri_db params -----\n/* by default we disable the DB support in the module as
      we do not need it\n   in this configuration */\nmodparam(\"uri_db\", \"use_uri_table\",
      0)\nmodparam(\"uri_db\", \"db_url\", \"\")\n\n\n# ----- acc params -----\n/*
      what sepcial events should be accounted ? */\nmodparam(\"acc\", \"early_media\",
      1)\nmodparam(\"acc\", \"report_ack\", 1)\nmodparam(\"acc\", \"report_cancels\",
      1)\n/* by default ww do not adjust the direct of the sequential requests.\n   if
      you enable this parameter, be sure the enable \"append_fromtag\"\n   in \"rr\"
      module */\nmodparam(\"acc\", \"detect_direction\", 0)\n/* account triggers (flags)
      */\nmodparam(\"acc\", \"failed_transaction_flag\", 3)\nmodparam(\"acc\", \"log_flag\",
      1)\nmodparam(\"acc\", \"log_missed_flag\", 2)\nmodparam(\"acc\", \"log_extra\",\n        \"src_user=$fU;src_domain=$fd;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd\")\n/*
      enhanced DB accounting */\n#!ifdef WITH_ACCDB\nmodparam(\"acc\", \"db_flag\",
      1)\nmodparam(\"acc\", \"db_missed_flag\", 2)\nmodparam(\"acc\", \"db_url\",\n        \"mysql://openser:openserrw@localhost/openser\")\nmodparam(\"acc\",
      \"db_extra\",\n        \"src_user=$fU;src_domain=$fd;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd\")\n#!endif\n\n#
      ----- usrloc params -----\n/* enable DB persistency for location entries */\n#!ifdef
      WITH_USRLOCDB\nmodparam(\"usrloc\", \"db_mode\",   2)\nmodparam(\"usrloc\",
      \"db_url\",\n        \"mysql://openser:openserrw@localhost/openser\")\n#!endif\n\n#
      ----- auth_db params -----\n/* enable the DB based authentication */\n#!ifdef
      WITH_AUTH\nmodparam(\"auth_db\", \"calculate_ha1\", yes)\n#!ifdef WITH_ASTERISK\nmodparam(\"auth_db\",
      \"user_column\", \"username\")\nmodparam(\"auth_db\", \"password_column\", \"sippasswd\")\nmodparam(\"auth_db\",
      \"db_url\",\n        \"mysql://asterisk:''$DB_PASSWORD''@localhost/asterisk\")\n#!else\nmodparam(\"auth_db\",
      \"password_column\", \"password\")\nmodparam(\"auth_db\", \"db_url\",\n        \"mysql://openser:openserrw@localhost/openser\")\n#!endif\nmodparam(\"auth_db\",
      \"load_credentials\", \"\")\n#!endif\n\n# ----- alias_db params -----\n/* uncomment
      the following lines if you want to enable the DB based\n   aliases */\n#modparam(\"alias_db\",
      \"db_url\",\n#        \"mysql://openser:openserrw@localhost/openser\")\n\n\n#
      ----- domain params -----\n/* uncomment the following lines to enable multi-domain
      detection\n   support */\n#modparam(\"domain\", \"db_url\",\n#        \"mysql://openser:openserrw@localhost/openser\")\n#modparam(\"domain\",
      \"db_mode\", 1)   # Use caching\n\n\n# ----- multi-module params -----\n/* uncomment
      the following line if you want to enable multi-domain support\n   in the modules
      (dafault off) */\n#modparam(\"alias_db|auth_db|usrloc|uri_db\", \"use_domain\",
      1)\n\n\n# ----- presence params -----\n/* enable presence server support */\n#!ifdef
      WITH_PRESE***REMOVED***E\nmodparam(\"presence|presence_xml\", \"db_url\",\n        \"mysql://openser:openserrw@localhost/openser\")\nmodparam(\"presence_xml\",
      \"force_active\", 1)\nmodparam(\"presence\", \"server_address\", \"sip:10.0.0.10:5060\")\n#!endif\n\n#
      ----- nathelper -----\n#!ifdef WITH_NAT\nmodparam(\"nathelper\", \"rtpproxy_sock\",
      \"udp:127.0.0.1:7722\")\nmodparam(\"nathelper\", \"natping_interval\", 30)\nmodparam(\"nathelper\",
      \"ping_nated_only\", 1)\nmodparam(\"nathelper\", \"sipping_bflag\", 7)\nmodparam(\"nathelper\",
      \"sipping_from\", \"sip:pinger@kamailio.org\")\nmodparam(\"registrar|nathelper\",
      \"received_avp\", \"$avp(i:80)\")\nmodparam(\"usrloc\", \"nat_bflag\", 6)\n#!endif\n\n#!ifdef
      WITH_ASTERISK\n####### Routing Logic ########\n\n\n# main request routing logic\n\nroute{\n\n        if
      (!mf_process_maxfwd_header(\"10\")) {\n                sl_send_reply(\"483\",\"Too
      Many Hops\");\n                exit;\n        }\n\n        if(!sanity_check(\"1511\",
      \"7\"))\n        {\n                xlog(\"Malformed SIP message from $si:$sp\\n\");\n                exit;\n        }\n\n        #
      NAT detection\n        route(NAT);\n\n        if (has_totag()) {\n                #
      sequential request withing a dialog should\n                # take the path
      determined by record-routing\n                if (loose_route()) {\n                        if
      (is_method(\"BYE\")) {\n                                setflag(1); # do accounting
      ...\n                                setflag(3); # ... even if the transaction
      fails\n                        }\n                        route(RELAY);\n                }
      else {\n                        if (is_method(\"SUBSCRIBE\") && uri == myself)
      {\n                                # in-dialog subscribe requests\n                                route(PRESE***REMOVED***E);\n                                exit;\n                        }\n                        if
      ( is_method(\"ACK\") ) {\n                                if ( t_check_trans()
      ) {\n                                        # non loose-route, but stateful
      ACK; must be an ACK after a 487\n                                        # or
      e.g. 404 from upstream server\n                                        t_relay();\n                                        exit;\n                                }
      else {\n                                        # ACK without matching transaction
      ... ignore and discard.\\n\");\n                                        exit;\n                                }\n                        }\n                        sl_send_reply(\"404\",\"Not
      here\");\n                }\n                exit;\n        }\n\n        #initial
      requests\n\n        # CA***REMOVED***EL processing\n        if (is_method(\"CA***REMOVED***EL\"))\n        {\n                if
      (t_check_trans())\n                        t_relay();\n                exit;\n        }\n\n        t_check_trans();\n\n        #
      authentication\n        route(AUTH);\n\n        # record routing for dialog
      forming requests (in case they are routed)\n        # - remove preloaded route
      headers\n        remove_hf(\"Route\");\n        if (is_method(\"INVITE|SUBSCRIBE\"))\n                record_route();\n\n        #
      account only INVITEs\n        if (is_method(\"INVITE\")) {\n                setflag(1);
      # do accounting\n        }\n        if (!uri==myself)\n        /* replace with
      following line if multi-domain support is used */\n        ##if (!is_uri_host_local())\n        {\n                append_hf(\"P-hint:
      outbound\\r\\n\");\n                route(RELAY);\n        }\n\n        # requests
      for my domain\n\n        if( is_method(\"PUBLISH|SUBSCRIBE\"))\n                route(PRESE***REMOVED***E);\n\n        if
      (is_method(\"REGISTER\"))\n        {\n                if(isflagset(5))\n                {\n                        setbflag(\"6\");\n                        #
      uncomment next line to do SIP NAT pinging\n                        ## setbflag(\"7\");\n                }\n                if
      (!save(\"location\"))\n                        sl_reply_error();\n\n#!ifdef
      WITH_ASTERISK\n                route(REGFWD);\n#!endif\n                exit;\n        }\n\n        if
      ($rU==$null) {\n                # request with no Username in RURI\n                sl_send_reply(\"484\",\"Address
      Incomplete\");\n                exit;\n        }\n\n        route(PSTN);\n\n        #
      apply DB based aliases (uncomment to enable)\n        ##alias_db_lookup(\"dbaliases\");\n\n#!ifdef
      WITH_ASTERISK\n        if(!is_method(\"INVITE\")) {\n                # non-INVITE
      request are routed directly by Kamailio\n#!endif\n        if (!lookup(\"location\"))
      {\n                switch ($rc) {\n                        case -1:\n                        case
      -3:\n                                t_newtran();\n                                t_reply(\"404\",
      \"Not Found\");\n                                exit;\n                        case
      -2:\n                                sl_send_reply(\"405\", \"Method Not Allowed\");\n                                exit;\n                }\n        }\n#!ifdef
      WITH_ASTERISK\n        } /* end non-INVITE test */\n        # only INVITE from
      now on\n        if(route(FROMASTERISK))\n        {\n                # coming
      from Asterisk - do location lookup\n                if (!lookup(\"location\"))
      {\n                        switch ($rc) {\n                                case
      -1:\n                                case -3:\n                                        t_newtran();\n                                        t_reply(\"404\",
      \"Not Found\");\n                                        exit;\n                                case
      -2:\n                                        sl_send_reply(\"405\", \"Method
      Not Allowed\");\n                                        exit;\n                        }\n                }\n        }
      else {\n                # new call - send to Asterisk\n\t\tds_select_dst(\"1\",\"4\");\n\t\txlog(\"Sending
      call to Asterisk at $rd\\n\");\n                route(TOASTERISK);\n        }\n#!endif\n\n        #
      when routing via usrloc, log the missed calls also\n        setflag(2);\n\n        route(RELAY);\n}\n\n\nroute[RELAY]
      {\n\t#!ifdef WITH_NAT\n        if (check_route_param(\"nat=yes\")) {\n                setbflag(\"6\");\n        }\n        if
      (isflagset(5) || isbflagset(\"6\")) {\n                route(RTPPROXY);\n        }\n\t#!endif\n        /*
      example how to enable some additional event routes */\n        if (is_method(\"INVITE\"))
      {\n\t\tt_on_branch(\"BRA***REMOVED***H_ONE\");\n\t\tt_on_reply(\"REPLY_ONE\");\n\t\tt_on_failure(\"FAIL_ONE\");\n        }\n        if
      (!t_relay()) {\n                sl_reply_error();\n        }\n        exit;\n}\n\n\n#
      Presence server route\nroute[PRESE***REMOVED***E]\n{\n#!ifdef WITH_PRESE***REMOVED***E\n        if
      (!t_newtran())\n        {\n                sl_reply_error();\n                exit;\n        };\n\n        if(is_method(\"PUBLISH\"))\n        {\n                handle_publish();\n                t_release();\n        }\n        else\n        if(
      is_method(\"SUBSCRIBE\"))\n        {\n                handle_subscribe();\n                t_release();\n        }\n        exit;\n#!endif\n\n        #
      if presence enabled, this part will not be executed\n        if (is_method(\"PUBLISH\")
      || $rU==$null)\n        {\n                sl_send_reply(\"404\", \"Not here\");\n                exit;\n        }\n        return;\n}\n\n#
      Authentication route\nroute[AUTH] {\n#!ifdef WITH_AUTH\n\n#!ifdef WITH_ASTERISK\n        #
      do not auth traffic from Asterisk - trusted!\n        if(route(FROMASTERISK))\n                return;\n#!endif\n\n        if
      (is_method(\"REGISTER\"))\n        {\n                # authenticate the REGISTER
      requests (uncomment to enable auth)\n#!ifdef WITH_ASTERISK\n                if
      (!www_authorize(\"\", \"sipusers\"))\n#!else\n                if (!www_authorize(\"\",
      \"subscriber\"))\n#!endif\n                {\n                        www_challenge(\"\",
      \"0\");\n                        exit;\n                }\n\n                if
      ($au!=$tU)\n                {\n                        sl_send_reply(\"403\",\"Forbidden
      auth ID\");\n                        exit;\n                }\n        } else
      {\n                # authenticate if from local subscriber (uncomment to enable
      auth)\n                if (from_uri==myself)\n                {\n#!ifdef WITH_ASTERISK\n                        if
      (!proxy_authorize(\"\", \"sipusers\")) {\n#!else\n                        if
      (!proxy_authorize(\"\", \"subscriber\")) {\n#!endif\n                                proxy_challenge(\"\",
      \"0\");\n                                exit;\n                        }\n                        if
      (is_method(\"PUBLISH\"))\n                        {\n                                if
      ($au!=$tU) {\n                                        sl_send_reply(\"403\",\"Forbidden
      auth ID\");\n                                        exit;\n                                }\n                        }
      else {\n                                if ($au!=$fU) {\n                                        sl_send_reply(\"403\",\"Forbidden
      auth ID\");\n                                        exit;\n                                }\n                        }\n\n                        consume_credentials();\n                        #
      caller authenticated\n                }\n        }\n#!endif\n        return;\n}\n\n#
      Caller NAT detection route\nroute[NAT]{\n#!ifdef WITH_NAT\n        force_rport();\n        if
      (nat_uac_test(\"19\")) {\n                if (method==\"REGISTER\") {\n                        fix_nated_register();\n                }
      else {\n                        fix_nated_contact();\n                }\n                setflag(5);\n        }\n#!endif\n        return;\n}\n\n#
      RTPProxy control\nroute[RTPPROXY] {\n#!ifdef WITH_NAT\n        if (is_method(\"BYE\"))
      {\n                unforce_rtp_proxy();\n        } else if (is_method(\"INVITE\")){\n                force_rtp_proxy();\n        }\n        if
      (!has_totag()) add_rr_param(\";nat=yes\");\n#!endif\n        return;\n}\n\n#
      PSTN GW routing\nroute[PSTN] {\n#!ifdef WITH_PSTN\n        # check if PSTN GW
      IP is defined\n        if (strempty($sel(cfg_get.pstn.gw_ip))) {\n                xlog(\"SCRIPT:
      PSTN rotuing enabled but pstn.gw_ip not defined\\n\");\n                return;\n        }\n\n        #
      route to PSTN dialed numbers starting with ''\"''\"''+''\"''\"'' or ''\"''\"''00''\"''\"''\n        #     (international
      format)\n        # - update the condition to match your dialing rules for PSTN
      routing\n        if(!($rU=~\"^(\\+|00)[1-9][0-9]{3,20}$\"))\n                return;\n\n        #
      only local users allowed to call\n        if(from_uri!=myself) {\n                sl_send_reply(\"403\",
      \"Not Allowed\");\n                exit;\n        }\n\n        $ru = \"sip:\"
      + $rU + \"@\" + $sel(cfg_get.pstn.gw_ip);\n\n        route(RELAY);\n        exit;\n#!endif\n\n        return;\n}\n\n#!ifdef
      WITH_ASTERISK\n# Test if coming from Asterisk\nroute[FROMASTERISK] {\n        if($si==$sel(cfg_get.asterisk.bindip)\n                        &&
      $sp==$sel(cfg_get.asterisk.bindport))\n                return 1;\n        return
      -1;\n}\n\nfailure_route[1] {\n\txlog(\"The $rd Asterisk failed to route us,
      trying next gateway...\\n\");\n\tif (t_check_status(\"408\")) { # if timeout\n\t\tds_mark_dst();
      # do not use this destination anymore\n\t\t# Failover -- Try next destination...\n\t\tds_next_dst();
      # use next\n\t\tt_on_failure(\"1\"); # if the next one is dead too\n\t\tt_relay();\n\t}
      else {\n\t\tt_reply(\"501\", \"Not Implemented\");\n\t}\n}\n\n# Send to Asterisk\nroute[TOASTERISK]
      {\n        # $du = \"sip:\" + $sel(cfg_get.asterisk.bindip) + \":\"\n\t#\t+
      $sel(cfg_get.asterisk.bindport);\n\tds_select_dst(\"1\",\"4\"); # 4 = round-robin\n\tt_on_failure(\"1\");
      # If there is no response after 5 sec\n\tt_relay();\n        # route(RELAY);\n\texit;\n}\n\n#
      Forward REGISTER to Asterisk\nroute[REGFWD] {\n        if(!is_method(\"REGISTER\"))\n        {\n                return;\n        }\n        $var(rip)
      = $sel(cfg_get.asterisk.bindip);\n        $uac_req(method)=\"REGISTER\";\n        $uac_req(ruri)=\"sip:\"
      + $var(rip) + \":\" + $sel(cfg_get.asterisk.bindport);\n        $uac_req(furi)=\"sip:\"
      + $au + $var(rip);\n        $uac_req(turi)=\"sip:\" + $au + \"@\" + $var(rip);\n        $uac_req(hdrs)=\"Contact:
      <sip:\" + $au + \"@\"\n                                + $sel(cfg_get.kamailio.bindip)\n                                +
      \":\" + $sel(cfg_get.kamailio.bindport) + \">\\r\\n\";\n        if($sel(contact.expires)
      != $null)\n                $uac_req(hdrs)= $uac_req(hdrs) + \"Expires: \" +
      $sel(contact.expires) + \"\\r\\n\";\n        else\n                $uac_req(hdrs)=
      $uac_req(hdrs) + \"Expires: \" + $hdr(Expires) + \"\\r\\n\";\n        uac_req_send();\n}\n\n#!endif\n\n#
      Sample branch router\nbranch_route[BRA***REMOVED***H_ONE] {\n        xdbg(\"new branch
      at $ru\\n\");\n}\n\n# Sample onreply route\nonreply_route[REPLY_ONE] {\n        xdbg(\"incoming
      reply\\n\");\n#!ifdef WITH_NAT\n        if ((isflagset(5) || isbflagset(\"6\"))
      && status=~\"(183)|(2[0-9][0-9])\") {\n                force_rtp_proxy();\n        }\n        if
      (isbflagset(\"6\")) {\n                fix_nated_contact();\n        }\n#!endif\n}\n\n#
      Sample failure route\nfailure_route[FAIL_ONE] {\n#!ifdef WITH_NAT\n        if
      (is_method(\"INVITE\")\n                        && (isbflagset(\"6\") || isflagset(5)))
      {\n                unforce_rtp_proxy();\n        }\n#!endif\n\n        if (t_is_canceled())
      {\n                exit;\n        }\n\n        # uncomment the following lines
      if you want to block client\n        # redirect based on 3xx replies.\n        ##if
      (t_check_status(\"3[0-9][0-9]\")) {\n        ##t_reply(\"404\",\"Not found\");\n        ##        exit;\n        ##}\n\n        if
      (t_check_status(\"486|408\")) {\n                sethostport(\"69.164.207.72:5060\");\n                append_branch();\n                #
      do not set the missed call flag again\n                t_relay();\n        }\n}''
      > /usr/local/etc/kamailio/kamailio.cfg\necho ''# line format\n# setit(integer)
      destination(sip uri) flags (integer, optional)\n\n# proxies\n2 sip:127.0.0.1:5060\n\n#
      gateways'' > /usr/local/etc/kamailio/dispatcher.list\nfor ASTERISK_IP in $ASTERISKIPS;
      do \\\n  echo ''1 sip:''\"$ASTERISK_IP\"'':5060'' >> /usr/local/etc/kamailio/dispatcher.list;
      \\\ndone\n\n# cleanup after stackscripts\nrestartServices\n\n# Finally, Fixup
      for MySQL Service...\nmkdir -p /etc/xinetd.d\necho ''service mysql\n{\n    only_from      =  localhost
      ''$ETHERNETSIP $ASTERISKIPS''\n    flags          =  REUSE\n    socket_type    =  stream\n    wait           =  no\n    user           =  root\n    redirect       =  127.0.0.1
      3306\n    log_on_failure += USERID\n    interface      =  ''$ETHERNETSIP''\n}''
      > /etc/xinetd.d/mysql\nchmod -R 0:0 /etc/xinetd.d\nchown 0755 /etc/xinetd.d\nchown
      0644 /etc/xinetd.d/mysql\napt-get -y install xinetd\n\n# Start Kamailio\n/usr/local/sbin/kamailio\n\n#               #\n#
      ALL DONE HERE #\n#               #"}, {"is_public": true, "username": "quinnebert",
      "id": 1912, "deployments_total": 45, "user_defined_fields": [{"example": "Used
      for SIP authorization process", "label": "MySQL root Password", "name": "db_password"},
      {"example": "The IP of the Asterisk gateway that primarily RECEIVES users''
      incoming (not outgoing) calls.", "label": "Primary Asterisk IP", "name": "masteriskip"},
      {"example": "Separate multiple IPs by spaces ... You should include Primary
      IP in this list!", "label": "Asterisk System IPs", "name": "asteriskips"}, {"example":
      "Primary IP address of THIS node", "label": "Ethernet IP Address", "name": "ethernetsip"}],
      "updated": "2011-01-20T13:47:55", "label": "Kamailio+A2Billing Linode Deployment",
      "created": "2011-01-20T13:39:04", "images": ["linode/debian5.032bit", "linode/ubuntu10.04lts32bit",
      "linode/ubuntu10.1032bit", "linode/ubuntu9.1032bit"], "user_gravatar_id": "b11cc75de945fce1b597cb23e0c27dc7",
      "description": "A stackscript which deploys a workable, all-integrated system,
      including Kamailio as base SIP router + Asterisk PBX v1.6 + A2Billing system.",
      "rev_note": "Initial import", "deployments_active": 5, "script": "#!/bin/bash\n#
      <UDF name=\"db_password\" Label=\"MySQL root Password\" example=\"Used for SIP
      authorization process\" />\n# <UDF name=\"masteriskip\" Label=\"Primary Asterisk
      IP\" example=\"The IP of the Asterisk gateway that primarily RECEIVES users''
      incoming (not outgoing) calls.\" />\n# <UDF name=\"asteriskips\" Label=\"Asterisk
      System IPs\" example=\"Separate multiple IPs by spaces ... You should include
      Primary IP in this list!\" />\n# <UDF name=\"ethernetsip\" Label=\"Ethernet
      IP Address\" example=\"Primary IP address of THIS node\" />\n\n# Import the
      Linode standard StackScript Library\nsource <ssinclude StackScriptID=\"1\">\n\n#
      Bring The System Up-to-date\nsystem_update\n\n# Ensure APT package list is up-to-date
      \napt-get -y update\n\n# Ensure OpenSSH Service is installed...\napt-get -y
      install openssh-server\n\n# Install bulk of packages we need...\napt-get -y
      update\napt-get -y install bison flex make gcc g++\napt-get -y install libmysql++-dev\n\n#
      MySQL Install and Configure first DB\nmysql_install \"$DB_PASSWORD\" && mysql_tune
      40\n\n# SIP Authentication DB Installation\necho \"CREATE DATABASE asterisk;\n\nUSE
      asterisk;\n\nCREATE TABLE \"''`''\"sipusers\"''`''\" (\n\"''`''\"id\"''`''\"
      int(11) NOT NULL AUTO_I***REMOVED***REMENT,\n\"''`''\"name\"''`''\" varchar(80) NOT NULL
      DEFAULT '''',\n\"''`''\"host\"''`''\" varchar(31) NOT NULL DEFAULT '''',\n\"''`''\"nat\"''`''\"
      varchar(5) NOT NULL DEFAULT ''no'',\n\"''`''\"type\"''`''\" enum(''user'',''peer'',''friend'')
      NOT NULL DEFAULT ''friend'',\n\"''`''\"accountcode\"''`''\" varchar(20) DEFAULT
      NULL,\n\"''`''\"amaflags\"''`''\" varchar(13) DEFAULT NULL,\n\"''`''\"call-limit\"''`''\"
      smallint(5) UNSIGNED DEFAULT NULL,\n\"''`''\"callgroup\"''`''\" varchar(10)
      DEFAULT NULL,\n\"''`''\"callerid\"''`''\" varchar(80) DEFAULT NULL,\n\"''`''\"cancallforward\"''`''\"
      char(3) DEFAULT ''yes'',\n\"''`''\"canreinvite\"''`''\" char(3) DEFAULT ''yes'',\n\"''`''\"context\"''`''\"
      varchar(80) DEFAULT NULL,\n\"''`''\"defaultip\"''`''\" varchar(15) DEFAULT NULL,\n\"''`''\"dtmfmode\"''`''\"
      varchar(7) DEFAULT NULL,\n\"''`''\"fromuser\"''`''\" varchar(80) DEFAULT NULL,\n\"''`''\"fromdomain\"''`''\"
      varchar(80) DEFAULT NULL,\n\"''`''\"insecure\"''`''\" varchar(4) DEFAULT NULL,\n\"''`''\"language\"''`''\"
      char(2) DEFAULT NULL,\n\"''`''\"mailbox\"''`''\" varchar(50) DEFAULT NULL,\n\"''`''\"md5secret\"''`''\"
      varchar(80) DEFAULT NULL,\n\"''`''\"deny\"''`''\" varchar(95) DEFAULT NULL,\n\"''`''\"permit\"''`''\"
      varchar(95) DEFAULT NULL,\n\"''`''\"mask\"''`''\" varchar(95) DEFAULT NULL,\n\"''`''\"musiconhold\"''`''\"
      varchar(100) DEFAULT NULL,\n\"''`''\"pickupgroup\"''`''\" varchar(10) DEFAULT
      NULL,\n\"''`''\"qualify\"''`''\" char(3) DEFAULT NULL,\n\"''`''\"regexten\"''`''\"
      varchar(80) DEFAULT NULL,\n\"''`''\"restrictcid\"''`''\" char(3) DEFAULT NULL,\n\"''`''\"rtptimeout\"''`''\"
      char(3) DEFAULT NULL,\n\"''`''\"rtpholdtimeout\"''`''\" char(3) DEFAULT NULL,\n\"''`''\"secret\"''`''\"
      varchar(80) DEFAULT NULL,\n\"''`''\"setvar\"''`''\" varchar(100) DEFAULT NULL,\n\"''`''\"disallow\"''`''\"
      varchar(100) DEFAULT NULL,\n\"''`''\"allow\"''`''\" varchar(100) DEFAULT NULL,\n\"''`''\"fullcontact\"''`''\"
      varchar(80) NOT NULL DEFAULT '''',\n\"''`''\"ipaddr\"''`''\" varchar(15) NOT
      NULL DEFAULT '''',\n\"''`''\"port\"''`''\" mediumint(5) UNSIGNED NOT NULL DEFAULT
      ''0'',\n\"''`''\"regserver\"''`''\" varchar(100) DEFAULT NULL,\n\"''`''\"regseconds\"''`''\"
      int(11) NOT NULL DEFAULT ''0'',\n\"''`''\"lastms\"''`''\" int(11) NOT NULL DEFAULT
      ''0'',\n\"''`''\"username\"''`''\" varchar(80) NOT NULL DEFAULT '''',\n\"''`''\"defaultuser\"''`''\"
      varchar(80) NOT NULL DEFAULT '''',\n\"''`''\"subscribecontext\"''`''\" varchar(80)
      DEFAULT NULL,\n\"''`''\"useragent\"''`''\" varchar(20) DEFAULT NULL,\n\"''`''\"sippasswd\"''`''\"
      varchar(80) DEFAULT NULL,\nPRIMARY KEY  (\"''`''\"id\"''`''\"),\nUNIQUE KEY
      \"''`''\"name_uk\"''`''\" (\"''`''\"name\"''`''\")\n);\n\nCREATE TABLE \"''`''\"sipregs\"''`''\"
      (\n\"''`''\"id\"''`''\" int(11) NOT NULL AUTO_I***REMOVED***REMENT,\n\"''`''\"name\"''`''\"
      varchar(80) NOT NULL DEFAULT '''',\n\"''`''\"fullcontact\"''`''\" varchar(80)
      NOT NULL DEFAULT '''',\n\"''`''\"ipaddr\"''`''\" varchar(15) NOT NULL DEFAULT
      '''',\n\"''`''\"port\"''`''\" mediumint(5) UNSIGNED NOT NULL DEFAULT ''0'',\n\"''`''\"username\"''`''\"
      varchar(80) NOT NULL DEFAULT '''',\n\"''`''\"regserver\"''`''\" varchar(100)
      DEFAULT NULL,\n\"''`''\"regseconds\"''`''\" int(11) NOT NULL DEFAULT ''0'',\nPRIMARY
      KEY  (\"''`''\"id\"''`''\"),\nUNIQUE KEY \"''`''\"name\"''`''\" (\"''`''\"name\"''`''\")\n);\n\nCREATE
      TABLE IF NOT EXISTS \"''`''\"voiceboxes\"''`''\" (\n\"''`''\"uniqueid\"''`''\"
      int(4) NOT NULL AUTO_I***REMOVED***REMENT,\n\"''`''\"customer_id\"''`''\" varchar(10) DEFAULT
      NULL,\n\"''`''\"context\"''`''\" varchar(10) NOT NULL,\n\"''`''\"mailbox\"''`''\"
      varchar(10) NOT NULL,\n\"''`''\"password\"''`''\" varchar(12) NOT NULL,\n\"''`''\"fullname\"''`''\"
      varchar(150) DEFAULT NULL,\n\"''`''\"email\"''`''\" varchar(50) DEFAULT NULL,\n\"''`''\"pager\"''`''\"
      varchar(50) DEFAULT NULL,\n\"''`''\"tz\"''`''\" varchar(10) DEFAULT ''central'',\n\"''`''\"attach\"''`''\"
      enum(''yes'',''no'') NOT NULL DEFAULT ''yes'',\n\"''`''\"saycid\"''`''\" enum(''yes'',''no'')
      NOT NULL DEFAULT ''yes'',\n\"''`''\"dialout\"''`''\" varchar(10) DEFAULT NULL,\n\"''`''\"callback\"''`''\"
      varchar(10) DEFAULT NULL,\n\"''`''\"review\"''`''\" enum(''yes'',''no'') NOT
      NULL DEFAULT ''no'',\n\"''`''\"operator\"''`''\" enum(''yes'',''no'') NOT NULL
      DEFAULT ''no'',\n\"''`''\"envelope\"''`''\" enum(''yes'',''no'') NOT NULL DEFAULT
      ''no'',\n\"''`''\"sayduration\"''`''\" enum(''yes'',''no'') NOT NULL DEFAULT
      ''no'',\n\"''`''\"saydurationm\"''`''\" tinyint(4) NOT NULL DEFAULT ''1'',\n\"''`''\"sendvoicemail\"''`''\"
      enum(''yes'',''no'') NOT NULL DEFAULT ''no'',\n\"''`''\"delete\"''`''\" enum(''yes'',''no'')
      NULL DEFAULT ''no'',\n\"''`''\"nextaftercmd\"''`''\" enum(''yes'',''no'') NOT
      NULL DEFAULT ''yes'',\n\"''`''\"forcename\"''`''\" enum(''yes'',''no'') NOT
      NULL DEFAULT ''no'',\n\"''`''\"forcegreetings\"''`''\" enum(''yes'',''no'')
      NOT NULL DEFAULT ''no'',\n\"''`''\"hidefromdir\"''`''\" enum(''yes'',''no'')
      NOT NULL DEFAULT ''yes'',\n\"''`''\"stamp\"''`''\" timestamp NOT NULL DEFAULT
      CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\nPRIMARY KEY  (\"''`''\"uniqueid\"''`''\"),\nKEY
      \"''`''\"mailbox_context\"''`''\" (\"''`''\"mailbox\"''`''\",\"''`''\"context\"''`''\")\n);
      \n\nCREATE TABLE \"''`''\"voicemessages\"''`''\" (\n\"''`''\"id\"''`''\" int(11)
      NOT NULL AUTO_I***REMOVED***REMENT,\n\"''`''\"msgnum\"''`''\" int(11) NOT NULL DEFAULT
      ''0'',\n\"''`''\"dir\"''`''\" varchar(80) DEFAULT '''',\n\"''`''\"context\"''`''\"
      varchar(80) DEFAULT '''',\n\"''`''\"macrocontext\"''`''\" varchar(80) DEFAULT
      '''',\n\"''`''\"callerid\"''`''\" varchar(40) DEFAULT '''',\n\"''`''\"origtime\"''`''\"
      varchar(40) DEFAULT '''',\n\"''`''\"duration\"''`''\" varchar(20) DEFAULT '''',\n\"''`''\"mailboxuser\"''`''\"
      varchar(80) DEFAULT '''',\n\"''`''\"mailboxcontext\"''`''\" varchar(80) DEFAULT
      '''',\n\"''`''\"recording\"''`''\" longblob,\n\"''`''\"flag\"''`''\" varchar(128)
      DEFAULT '''',\nPRIMARY KEY  (\"''`''\"id\"''`''\"),\nKEY \"''`''\"dir\"''`''\"
      (\"''`''\"dir\"''`''\")\n);\n\n\nCREATE TABLE version (\n    table_name VARCHAR(32)
      NOT NULL,\n    table_version INT UNSIGNED DEFAULT 0 NOT NULL\n);\nINSERT INTO
      version (table_name, table_version) VALUES (''sipusers'',''6'');\n\nGRANT ALL
      ON asterisk.* TO asterisk@localhost IDENTIFIED BY ''\"$DB_PASSWORD\"'';\n\"
      > /tmp/asterisk.sql\n# \"Inject\" the above SQL Data...\nmysql -u root --password=\"$DB_PASSWORD\"
      < /tmp/asterisk.sql\n\n# less pager, wget, and vim editor\ngoodstuff\n\n# Kamailio
      Installation from-source (Quinn)\ncd /usr/local/src\nwget -c ''http://www.kamailio.org/pub/kamailio/3.0.1/src/kamailio-3.0.1_src.tar.gz''\ntar
      xvfz kamailio-3.0.1_src.tar.gz\ncd kamailio-3.0.1\nmake include_modules=\"db_mysql\"
      cfg && make all && make install\n\n# Kamailio DB Installation\necho \"DBENGINE=MYSQL\nDBROOTUSER=root\nDBHOST=localhost\nDBNAME=openser\"
      >> /usr/local/etc/kamailio/kamctlrc\nrm -f ''/usr/local/lib/kamailio/kamctl/kamdbctl.mysql''\nwget
      -O ''/usr/local/lib/kamailio/kamctl/kamdbctl.mysql'' ''http://quinnebert.net/kamdbctl.mysql''\nchown
      root:staff ''/usr/local/lib/kamailio/kamctl/kamdbctl.mysql''\nchmod 0644 ''/usr/local/lib/kamailio/kamctl/kamdbctl.mysql''\nexport
      PW=\"$DB_PASSWORD\"\n/usr/local/sbin/kamdbctl create\n\n# Toss in a better Kamailio
      configuration, which:\n#  + Supports bonded registration\n#  + Supports smart
      dial failover\necho ''#!KAMAILIO\n\ntcp_connect_timeout=1\n\n#!define WITH_MYSQL\n#!define
      WITH_AUTH\n#!define WITH_USRLOCDB\n#!define WITH_ASTERISK\n#!define WITH_NAT\n\n#\n#
      $Id$\n#\n# Kamailio (OpenSER) SIP Server v3.0 - basic configuration script\n#     -
      web: http://www.kamailio.org\n#     - git: http://sip-router.org\n#\n# Direct
      your questions about this file to: <users@lists.kamailio.org>\n#\n# Refer to
      the Core CookBook at http://www.kamailio.org/dokuwiki/doku.php\n# for an explanation
      of possible statements, functions and parameters.\n#\n# Several features can
      be enabled using ''\"''\"''#!define WITH_FEATURE''\"''\"'' directives:\n#\n#
      *** To run in debug mode:\n#     - define WITH_DEBUG\n#\n# *** To enable mysql:\n#     -
      define WITH_MYSQL\n#\n# *** To enable authentication execute:\n#     - enable
      mysql\n#     - define WITH_AUTH\n#     - add users using ''\"''\"''kamctl''\"''\"''\n#\n#
      *** To enable persistent user location execute:\n#     - enable mysql\n#     -
      define WITH_USRLOCDB\n#\n# *** To enable presence server execute:\n#     - enable
      mysql\n#     - define WITH_PRESE***REMOVED***E\n#\n# *** To enable nat traversal execute:\n#     -
      define WITH_NAT\n#     - install RTPProxy: http://www.rtpproxy.org\n#     -
      start RTPProxy:\n#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722\n#\n#
      *** To enable PSTN gateway routing execute:\n#     - define WITH_PSTN\n#     -
      set the value of pstn.gw_ip\n#     - check route[PSTN] for regexp routing condition\n#\n#
      *** To enhance accounting execute:\n#     - enable mysql\n#     - define WITH_ACCDB\n#     -
      add following columns to database\n#!ifdef ACCDB_COMMENT\n  ALTER TABLE acc
      ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n  ALTER
      TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT ''\"''\"''''\"''\"'';\n#!endif\n\n\n#######
      Global Parameters #########\n\n#!ifdef WITH_DEBUG\nfork=no\ndebug=2\nlog_stderror=yes\n#!else\nfork=yes\nchildren=4\ndebug=2\nlog_stderror=no\n#!endif\n\nmemdbg=5\nmemlog=5\n\nlog_facility=LOG_LOCAL0\n\n/*
      uncomment the next line to disable TCP (default on) */\n#disable_tcp=yes\n\n/*
      uncomment the next line to disable the auto discovery of local aliases\n   based
      on revers DNS on IPs (default on) */\n#auto_aliases=no\n\n\n/* uncomment and
      configure the following line if you want Kamailio to\n   bind on a specific
      interface/port/proto (default bind on all available) */\nlisten=udp:''$ETHERNETSIP''\nport=5060\n\n#######
      Custom Parameters #########\n\n# These parameters can be modified runtime via
      RPC interface\n# - see the documentation of ''\"''\"''cfg_rpc''\"''\"'' module.\n#\n#
      Format: group.id = value ''\"''\"''desc''\"''\"'' description\n# Access: $sel(cfg_get.group.id)
      or @cfg_get.group.id\n#\n\n#!ifdef WITH_PSTN\n# PSTN GW Routing\n#\n# - pstn.gw_ip:
      valid IP or hostname as string value, example:\n# pstn.gw_ip = \"10.0.0.101\"
      desc \"My PSTN GW Address\"\n#\n# - by default is empty to avoid misrouting\npstn.gw_ip
      = \"\" desc \"PSTN GW Address\"\n#!endif\n\n#!ifdef WITH_ASTERISK\nasterisk.bindip
      = \"''$MASTERISKIP''\" desc \"Asterisk IP Address\"\nasterisk.bindport = \"5060\"
      desc \"Asterisk Port\"\nkamailio.bindip = \"''$ETHERNETSIP''\" desc \"Kamailio
      IP Address\"\nkamailio.bindport = \"5060\" desc \"Kamailio Port\"\n#!endif\n\n#######
      Modules Section ########\n\n#set module path\nmpath=\"/usr/local/lib/kamailio/modules_k/:/usr/local/lib/kamailio/modules/\"\n\n/*
      uncomment next line for MySQL DB support */\n#!ifdef WITH_MYSQL\nloadmodule
      \"db_mysql.so\"\n#!endif\nloadmodule \"mi_fifo.so\"\nloadmodule \"kex.so\"\nloadmodule
      \"tm.so\"\nloadmodule \"tmx.so\"\nloadmodule \"sl.so\"\nloadmodule \"rr.so\"\nloadmodule
      \"pv.so\"\nloadmodule \"maxfwd.so\"\nloadmodule \"usrloc.so\"\nloadmodule \"registrar.so\"\nloadmodule
      \"textops.so\"\nloadmodule \"uri_db.so\"\nloadmodule \"siputils.so\"\nloadmodule
      \"xlog.so\"\nloadmodule \"sanity.so\"\nloadmodule \"ctl.so\"\nloadmodule \"mi_rpc.so\"\nloadmodule
      \"acc.so\"\n#!ifdef WITH_AUTH\nloadmodule \"auth.so\"\nloadmodule \"auth_db.so\"\n#!endif\n/*
      uncomment next line for aliases support\n   NOTE: a DB (like db_mysql) module
      must be also loaded */\n#loadmodule \"alias_db.so\"\n/* uncomment next line
      for multi-domain support\n   NOTE: a DB (like db_mysql) module must be also
      loaded\n   NOTE: be sure and enable multi-domain support in all used modules\n         (see
      \"multi-module params\" section ) */\n#loadmodule \"domain.so\"\n#!ifdef WITH_PRESE***REMOVED***E\nloadmodule
      \"presence.so\"\nloadmodule \"presence_xml.so\"\n#!endif\n\n#!ifdef WITH_NAT\nloadmodule
      \"nathelper.so\"\n#!endif\n\n#!ifdef WITH_ASTERISK\nloadmodule \"uac.so\"\n#!endif\n\nloadmodule
      \"dispatcher.so\"\n\n# ----------------- setting module-specific parameters
      ---------------\n\n\n# ----- mi_fifo params -----\nmodparam(\"mi_fifo\", \"fifo_name\",
      \"/tmp/kamailio_fifo\")\n\n\n# ----- rr params -----\n# add value to ;lr param
      to cope with most of the UAs\nmodparam(\"rr\", \"enable_full_lr\", 1)\n# do
      not append from tag to the RR (no need for this script)\n#!ifdef WITH_ASTERISK\nmodparam(\"rr\",
      \"append_fromtag\", 1)\n#!else\nmodparam(\"rr\", \"append_fromtag\", 0)\n#!endif\n\n\n#
      ----- rr params -----\nmodparam(\"registrar\", \"method_filtering\", 1)\n/*
      uncomment the next line to disable parallel forking via location */\n# modparam(\"registrar\",
      \"append_branches\", 0)\n/* uncomment the next line not to allow more than 10
      contacts per AOR */\n#modparam(\"registrar\", \"max_contacts\", 10)\n\n\n# -----
      uri_db params -----\n/* by default we disable the DB support in the module as
      we do not need it\n   in this configuration */\nmodparam(\"uri_db\", \"use_uri_table\",
      0)\nmodparam(\"uri_db\", \"db_url\", \"\")\n\n\n# ----- acc params -----\n/*
      what sepcial events should be accounted ? */\nmodparam(\"acc\", \"early_media\",
      1)\nmodparam(\"acc\", \"report_ack\", 1)\nmodparam(\"acc\", \"report_cancels\",
      1)\n/* by default ww do not adjust the direct of the sequential requests.\n   if
      you enable this parameter, be sure the enable \"append_fromtag\"\n   in \"rr\"
      module */\nmodparam(\"acc\", \"detect_direction\", 0)\n/* account triggers (flags)
      */\nmodparam(\"acc\", \"failed_transaction_flag\", 3)\nmodparam(\"acc\", \"log_flag\",
      1)\nmodparam(\"acc\", \"log_missed_flag\", 2)\nmodparam(\"acc\", \"log_extra\",\n        \"src_user=$fU;src_domain=$fd;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd\")\n/*
      enhanced DB accounting */\n#!ifdef WITH_ACCDB\nmodparam(\"acc\", \"db_flag\",
      1)\nmodparam(\"acc\", \"db_missed_flag\", 2)\nmodparam(\"acc\", \"db_url\",\n        \"mysql://openser:openserrw@localhost/openser\")\nmodparam(\"acc\",
      \"db_extra\",\n        \"src_user=$fU;src_domain=$fd;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd\")\n#!endif\n\n#
      ----- usrloc params -----\n/* enable DB persistency for location entries */\n#!ifdef
      WITH_USRLOCDB\nmodparam(\"usrloc\", \"db_mode\",   2)\nmodparam(\"usrloc\",
      \"db_url\",\n        \"mysql://openser:openserrw@localhost/openser\")\n#!endif\n\n#
      ----- auth_db params -----\n/* enable the DB based authentication */\n#!ifdef
      WITH_AUTH\nmodparam(\"auth_db\", \"calculate_ha1\", yes)\n#!ifdef WITH_ASTERISK\nmodparam(\"auth_db\",
      \"user_column\", \"username\")\nmodparam(\"auth_db\", \"password_column\", \"sippasswd\")\nmodparam(\"auth_db\",
      \"db_url\",\n        \"mysql://asterisk:''$DB_PASSWORD''@localhost/asterisk\")\n#!else\nmodparam(\"auth_db\",
      \"password_column\", \"password\")\nmodparam(\"auth_db\", \"db_url\",\n        \"mysql://openser:openserrw@localhost/openser\")\n#!endif\nmodparam(\"auth_db\",
      \"load_credentials\", \"\")\n#!endif\n\n# ----- alias_db params -----\n/* uncomment
      the following lines if you want to enable the DB based\n   aliases */\n#modparam(\"alias_db\",
      \"db_url\",\n#        \"mysql://openser:openserrw@localhost/openser\")\n\n\n#
      ----- domain params -----\n/* uncomment the following lines to enable multi-domain
      detection\n   support */\n#modparam(\"domain\", \"db_url\",\n#        \"mysql://openser:openserrw@localhost/openser\")\n#modparam(\"domain\",
      \"db_mode\", 1)   # Use caching\n\n\n# ----- multi-module params -----\n/* uncomment
      the following line if you want to enable multi-domain support\n   in the modules
      (dafault off) */\n#modparam(\"alias_db|auth_db|usrloc|uri_db\", \"use_domain\",
      1)\n\n\n# ----- presence params -----\n/* enable presence server support */\n#!ifdef
      WITH_PRESE***REMOVED***E\nmodparam(\"presence|presence_xml\", \"db_url\",\n        \"mysql://openser:openserrw@localhost/openser\")\nmodparam(\"presence_xml\",
      \"force_active\", 1)\nmodparam(\"presence\", \"server_address\", \"sip:10.0.0.10:5060\")\n#!endif\n\n#
      ----- nathelper -----\n#!ifdef WITH_NAT\nmodparam(\"nathelper\", \"rtpproxy_sock\",
      \"udp:127.0.0.1:7722\")\nmodparam(\"nathelper\", \"natping_interval\", 30)\nmodparam(\"nathelper\",
      \"ping_nated_only\", 1)\nmodparam(\"nathelper\", \"sipping_bflag\", 7)\nmodparam(\"nathelper\",
      \"sipping_from\", \"sip:pinger@kamailio.org\")\nmodparam(\"registrar|nathelper\",
      \"received_avp\", \"$avp(i:80)\")\nmodparam(\"usrloc\", \"nat_bflag\", 6)\n#!endif\n\n#!ifdef
      WITH_ASTERISK\n####### Routing Logic ########\n\n\n# main request routing logic\n\nroute{\n\n        if
      (!mf_process_maxfwd_header(\"10\")) {\n                sl_send_reply(\"483\",\"Too
      Many Hops\");\n                exit;\n        }\n\n        if(!sanity_check(\"1511\",
      \"7\"))\n        {\n                xlog(\"Malformed SIP message from $si:$sp\\n\");\n                exit;\n        }\n\n        #
      NAT detection\n        route(NAT);\n\n        if (has_totag()) {\n                #
      sequential request withing a dialog should\n                # take the path
      determined by record-routing\n                if (loose_route()) {\n                        if
      (is_method(\"BYE\")) {\n                                setflag(1); # do accounting
      ...\n                                setflag(3); # ... even if the transaction
      fails\n                        }\n                        route(RELAY);\n                }
      else {\n                        if (is_method(\"SUBSCRIBE\") && uri == myself)
      {\n                                # in-dialog subscribe requests\n                                route(PRESE***REMOVED***E);\n                                exit;\n                        }\n                        if
      ( is_method(\"ACK\") ) {\n                                if ( t_check_trans()
      ) {\n                                        # non loose-route, but stateful
      ACK; must be an ACK after a 487\n                                        # or
      e.g. 404 from upstream server\n                                        t_relay();\n                                        exit;\n                                }
      else {\n                                        # ACK without matching transaction
      ... ignore and discard.\\n\");\n                                        exit;\n                                }\n                        }\n                        sl_send_reply(\"404\",\"Not
      here\");\n                }\n                exit;\n        }\n\n        #initial
      requests\n\n        # CA***REMOVED***EL processing\n        if (is_method(\"CA***REMOVED***EL\"))\n        {\n                if
      (t_check_trans())\n                        t_relay();\n                exit;\n        }\n\n        t_check_trans();\n\n        #
      authentication\n        route(AUTH);\n\n        # record routing for dialog
      forming requests (in case they are routed)\n        # - remove preloaded route
      headers\n        remove_hf(\"Route\");\n        if (is_method(\"INVITE|SUBSCRIBE\"))\n                record_route();\n\n        #
      account only INVITEs\n        if (is_method(\"INVITE\")) {\n                setflag(1);
      # do accounting\n        }\n        if (!uri==myself)\n        /* replace with
      following line if multi-domain support is used */\n        ##if (!is_uri_host_local())\n        {\n                append_hf(\"P-hint:
      outbound\\r\\n\");\n                route(RELAY);\n        }\n\n        # requests
      for my domain\n\n        if( is_method(\"PUBLISH|SUBSCRIBE\"))\n                route(PRESE***REMOVED***E);\n\n        if
      (is_method(\"REGISTER\"))\n        {\n                if(isflagset(5))\n                {\n                        setbflag(\"6\");\n                        #
      uncomment next line to do SIP NAT pinging\n                        ## setbflag(\"7\");\n                }\n                if
      (!save(\"location\"))\n                        sl_reply_error();\n\n#!ifdef
      WITH_ASTERISK\n                route(REGFWD);\n#!endif\n                exit;\n        }\n\n        if
      ($rU==$null) {\n                # request with no Username in RURI\n                sl_send_reply(\"484\",\"Address
      Incomplete\");\n                exit;\n        }\n\n        route(PSTN);\n\n        #
      apply DB based aliases (uncomment to enable)\n        ##alias_db_lookup(\"dbaliases\");\n\n#!ifdef
      WITH_ASTERISK\n        if(!is_method(\"INVITE\")) {\n                # non-INVITE
      request are routed directly by Kamailio\n#!endif\n        if (!lookup(\"location\"))
      {\n                switch ($rc) {\n                        case -1:\n                        case
      -3:\n                                t_newtran();\n                                t_reply(\"404\",
      \"Not Found\");\n                                exit;\n                        case
      -2:\n                                sl_send_reply(\"405\", \"Method Not Allowed\");\n                                exit;\n                }\n        }\n#!ifdef
      WITH_ASTERISK\n        } /* end non-INVITE test */\n        # only INVITE from
      now on\n        if(route(FROMASTERISK))\n        {\n                # coming
      from Asterisk - do location lookup\n                if (!lookup(\"location\"))
      {\n                        switch ($rc) {\n                                case
      -1:\n                                case -3:\n                                        t_newtran();\n                                        t_reply(\"404\",
      \"Not Found\");\n                                        exit;\n                                case
      -2:\n                                        sl_send_reply(\"405\", \"Method
      Not Allowed\");\n                                        exit;\n                        }\n                }\n        }
      else {\n                # new call - send to Asterisk\n\t\tds_select_dst(\"1\",\"4\");\n\t\txlog(\"Sending
      call to Asterisk at $rd\\n\");\n                route(TOASTERISK);\n        }\n#!endif\n\n        #
      when routing via usrloc, log the missed calls also\n        setflag(2);\n\n        route(RELAY);\n}\n\n\nroute[RELAY]
      {\n\t#!ifdef WITH_NAT\n        if (check_route_param(\"nat=yes\")) {\n                setbflag(\"6\");\n        }\n        if
      (isflagset(5) || isbflagset(\"6\")) {\n                route(RTPPROXY);\n        }\n\t#!endif\n        /*
      example how to enable some additional event routes */\n        if (is_method(\"INVITE\"))
      {\n\t\tt_on_branch(\"BRA***REMOVED***H_ONE\");\n\t\tt_on_reply(\"REPLY_ONE\");\n\t\tt_on_failure(\"FAIL_ONE\");\n        }\n        if
      (!t_relay()) {\n                sl_reply_error();\n        }\n        exit;\n}\n\n\n#
      Presence server route\nroute[PRESE***REMOVED***E]\n{\n#!ifdef WITH_PRESE***REMOVED***E\n        if
      (!t_newtran())\n        {\n                sl_reply_error();\n                exit;\n        };\n\n        if(is_method(\"PUBLISH\"))\n        {\n                handle_publish();\n                t_release();\n        }\n        else\n        if(
      is_method(\"SUBSCRIBE\"))\n        {\n                handle_subscribe();\n                t_release();\n        }\n        exit;\n#!endif\n\n        #
      if presence enabled, this part will not be executed\n        if (is_method(\"PUBLISH\")
      || $rU==$null)\n        {\n                sl_send_reply(\"404\", \"Not here\");\n                exit;\n        }\n        return;\n}\n\n#
      Authentication route\nroute[AUTH] {\n#!ifdef WITH_AUTH\n\n#!ifdef WITH_ASTERISK\n        #
      do not auth traffic from Asterisk - trusted!\n        if(route(FROMASTERISK))\n                return;\n#!endif\n\n        if
      (is_method(\"REGISTER\"))\n        {\n                # authenticate the REGISTER
      requests (uncomment to enable auth)\n#!ifdef WITH_ASTERISK\n                if
      (!www_authorize(\"\", \"sipusers\"))\n#!else\n                if (!www_authorize(\"\",
      \"subscriber\"))\n#!endif\n                {\n                        www_challenge(\"\",
      \"0\");\n                        exit;\n                }\n\n                if
      ($au!=$tU)\n                {\n                        sl_send_reply(\"403\",\"Forbidden
      auth ID\");\n                        exit;\n                }\n        } else
      {\n                # authenticate if from local subscriber (uncomment to enable
      auth)\n                if (from_uri==myself)\n                {\n#!ifdef WITH_ASTERISK\n                        if
      (!proxy_authorize(\"\", \"sipusers\")) {\n#!else\n                        if
      (!proxy_authorize(\"\", \"subscriber\")) {\n#!endif\n                                proxy_challenge(\"\",
      \"0\");\n                                exit;\n                        }\n                        if
      (is_method(\"PUBLISH\"))\n                        {\n                                if
      ($au!=$tU) {\n                                        sl_send_reply(\"403\",\"Forbidden
      auth ID\");\n                                        exit;\n                                }\n                        }
      else {\n                                if ($au!=$fU) {\n                                        sl_send_reply(\"403\",\"Forbidden
      auth ID\");\n                                        exit;\n                                }\n                        }\n\n                        consume_credentials();\n                        #
      caller authenticated\n                }\n        }\n#!endif\n        return;\n}\n\n#
      Caller NAT detection route\nroute[NAT]{\n#!ifdef WITH_NAT\n        force_rport();\n        if
      (nat_uac_test(\"19\")) {\n                if (method==\"REGISTER\") {\n                        fix_nated_register();\n                }
      else {\n                        fix_nated_contact();\n                }\n                setflag(5);\n        }\n#!endif\n        return;\n}\n\n#
      RTPProxy control\nroute[RTPPROXY] {\n#!ifdef WITH_NAT\n        if (is_method(\"BYE\"))
      {\n                unforce_rtp_proxy();\n        } else if (is_method(\"INVITE\")){\n                force_rtp_proxy();\n        }\n        if
      (!has_totag()) add_rr_param(\";nat=yes\");\n#!endif\n        return;\n}\n\n#
      PSTN GW routing\nroute[PSTN] {\n#!ifdef WITH_PSTN\n        # check if PSTN GW
      IP is defined\n        if (strempty($sel(cfg_get.pstn.gw_ip))) {\n                xlog(\"SCRIPT:
      PSTN rotuing enabled but pstn.gw_ip not defined\\n\");\n                return;\n        }\n\n        #
      route to PSTN dialed numbers starting with ''\"''\"''+''\"''\"'' or ''\"''\"''00''\"''\"''\n        #     (international
      format)\n        # - update the condition to match your dialing rules for PSTN
      routing\n        if(!($rU=~\"^(\\+|00)[1-9][0-9]{3,20}$\"))\n                return;\n\n        #
      only local users allowed to call\n        if(from_uri!=myself) {\n                sl_send_reply(\"403\",
      \"Not Allowed\");\n                exit;\n        }\n\n        $ru = \"sip:\"
      + $rU + \"@\" + $sel(cfg_get.pstn.gw_ip);\n\n        route(RELAY);\n        exit;\n#!endif\n\n        return;\n}\n\n#!ifdef
      WITH_ASTERISK\n# Test if coming from Asterisk\nroute[FROMASTERISK] {\n        if($si==$sel(cfg_get.asterisk.bindip)\n                        &&
      $sp==$sel(cfg_get.asterisk.bindport))\n                return 1;\n        return
      -1;\n}\n\nfailure_route[1] {\n\txlog(\"The $rd Asterisk failed to route us,
      trying next gateway...\\n\");\n\tif (t_check_status(\"408\")) { # if timeout\n\t\tds_mark_dst();
      # do not use this destination anymore\n\t\t# Failover -- Try next destination...\n\t\tds_next_dst();
      # use next\n\t\tt_on_failure(\"1\"); # if the next one is dead too\n\t\tt_relay();\n\t}
      else {\n\t\tt_reply(\"501\", \"Not Implemented\");\n\t}\n}\n\n# Send to Asterisk\nroute[TOASTERISK]
      {\n        # $du = \"sip:\" + $sel(cfg_get.asterisk.bindip) + \":\"\n\t#\t+
      $sel(cfg_get.asterisk.bindport);\n\tds_select_dst(\"1\",\"4\"); # 4 = round-robin\n\tt_on_failure(\"1\");
      # If there is no response after 5 sec\n\tt_relay();\n        # route(RELAY);\n\texit;\n}\n\n#
      Forward REGISTER to Asterisk\nroute[REGFWD] {\n        if(!is_method(\"REGISTER\"))\n        {\n                return;\n        }\n        $var(rip)
      = $sel(cfg_get.asterisk.bindip);\n        $uac_req(method)=\"REGISTER\";\n        $uac_req(ruri)=\"sip:\"
      + $var(rip) + \":\" + $sel(cfg_get.asterisk.bindport);\n        $uac_req(furi)=\"sip:\"
      + $au + $var(rip);\n        $uac_req(turi)=\"sip:\" + $au + \"@\" + $var(rip);\n        $uac_req(hdrs)=\"Contact:
      <sip:\" + $au + \"@\"\n                                + $sel(cfg_get.kamailio.bindip)\n                                +
      \":\" + $sel(cfg_get.kamailio.bindport) + \">\\r\\n\";\n        if($sel(contact.expires)
      != $null)\n                $uac_req(hdrs)= $uac_req(hdrs) + \"Expires: \" +
      $sel(contact.expires) + \"\\r\\n\";\n        else\n                $uac_req(hdrs)=
      $uac_req(hdrs) + \"Expires: \" + $hdr(Expires) + \"\\r\\n\";\n        uac_req_send();\n}\n\n#!endif\n\n#
      Sample branch router\nbranch_route[BRA***REMOVED***H_ONE] {\n        xdbg(\"new branch
      at $ru\\n\");\n}\n\n# Sample onreply route\nonreply_route[REPLY_ONE] {\n        xdbg(\"incoming
      reply\\n\");\n#!ifdef WITH_NAT\n        if ((isflagset(5) || isbflagset(\"6\"))
      && status=~\"(183)|(2[0-9][0-9])\") {\n                force_rtp_proxy();\n        }\n        if
      (isbflagset(\"6\")) {\n                fix_nated_contact();\n        }\n#!endif\n}\n\n#
      Sample failure route\nfailure_route[FAIL_ONE] {\n#!ifdef WITH_NAT\n        if
      (is_method(\"INVITE\")\n                        && (isbflagset(\"6\") || isflagset(5)))
      {\n                unforce_rtp_proxy();\n        }\n#!endif\n\n        if (t_is_canceled())
      {\n                exit;\n        }\n\n        # uncomment the following lines
      if you want to block client\n        # redirect based on 3xx replies.\n        ##if
      (t_check_status(\"3[0-9][0-9]\")) {\n        ##t_reply(\"404\",\"Not found\");\n        ##        exit;\n        ##}\n\n        if
      (t_check_status(\"486|408\")) {\n                sethostport(\"69.164.207.72:5060\");\n                append_branch();\n                #
      do not set the missed call flag again\n                t_relay();\n        }\n}''
      > /usr/local/etc/kamailio/kamailio.cfg\necho ''# line format\n# setit(integer)
      destination(sip uri) flags (integer, optional)\n\n# proxies\n2 sip:127.0.0.1:5060\n\n#
      gateways'' > /usr/local/etc/kamailio/dispatcher.list\nfor ASTERISK_IP in $ASTERISKIPS;
      do \\\n  echo ''1 sip:''\"$ASTERISK_IP\"'':5060'' >> /usr/local/etc/kamailio/dispatcher.list;
      \\\ndone\n\n# cleanup after stackscripts\nrestartServices\n\n# Finally, Fixup
      for MySQL Service...\nmkdir -p /etc/xinetd.d\necho ''service mysql\n{\n    only_from      =  localhost
      ''$ETHERNETSIP $ASTERISKIPS''\n    flags          =  REUSE\n    socket_type    =  stream\n    wait           =  no\n    user           =  root\n    redirect       =  127.0.0.1
      3306\n    log_on_failure += USERID\n    interface      =  ''$ETHERNETSIP''\n}''
      > /etc/xinetd.d/mysql\nchmod -R 0:0 /etc/xinetd.d\nchown 0755 /etc/xinetd.d\nchown
      0644 /etc/xinetd.d/mysql\napt-get -y install xinetd\n\n# Start Kamailio\n/usr/local/sbin/kamailio\n\n##
      \n## A2BILLING STUFF BELOW\n# \n# Clear The View\nclear\n# Give the debugging
      person (Quinn, usually) a chance to notice we''re moving on to the next phase
      here...  ;)\nfor s in 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13
      12 11 10 09 08 07 06 05 04 03 02 01 ; do \\\n     echo '' => ''$s'' seconds
      until we begin A2Billing setup...'' && /bin/sleep 1; \\\ndone\n# Prerequisite
      APT Packages:\necho ''* Install Prerequisite APT Packages:''\napt-get -y install
      libapache2-mod-php5 php5 php5-common php5-cli php5-mysql mysql-server apache2
      php5-gd openssh-server subversion\napt-get -y install php5-mcrypt asterisk\n#
      Fix broken Ubuntu=>Asterisk installation:\n#  <Re: Ubuntu LaunchPad Bug #383465>\necho
      ''* Fix broken Ubuntu=>Asterisk installation:''\necho '' '' >> /etc/default/asterisk\necho
      ''AST_REALTIME=no'' >> /etc/default/asterisk\napt-get -y -f install\n# Make
      directory to put A2Billing into:\necho ''* Make directory to put A2Billing into:''\nmkdir
      /usr/local/src/a2billing\n# Move into that directory:\necho ''* Move into that
      directory:''\ncd /usr/local/src/a2billing\n# Get the source package:\necho ''*
      Get the source package:''\nwget -c ''http://www.asterisk2billing.org/downloads/A2Billing_1.7.1.tar.gz''\n#
      Unpack that source package:\necho ''* Unpack that source package:''\ntar xzvf
      A2Billing_1.7.1.tar.gz\n# Setup the new MySQL database for A2Billing:\necho
      ''* Create the A2Billing SQL Database''\nmysql -u root --password=\"$DB_PASSWORD\"
      < DataBase/mysql-5.x/a2billing-createdb-user.sql\necho ''* Add in the A2Billiig
      SQL Schemas''\nmysql -u root --password=\"$DB_PASSWORD\" mya2billing < DataBase/mysql-5.x/a2billing-schema-v1.4.0.sql\necho
      ''* Create our A2Billing Config File''\necho '';\n; A2Billing config file\n;\n\n\n;
      Global Database Setup - select the database type and authentication as required.\n\n[database]\nhostname
      = localhost\nport = 3306\nuser = a2billinguser\npassword = a2billing\ndbname
      = mya2billing\ndbtype = mysql\n\n\n; config for the daemon process\n[daemon-info]\nuid
      =\ngid =\npidfile = /var/run/a2billing/a2b-callback-daemon.pid\n;pidfile = ./a2b-callback-daemon.pid\n\n\n;
      config for the logger\n; article on http://www.red-dove.com/python_logging.html\n[loggers]\nkeys=root,callbackLogger\n\n\n[handlers]\nkeys=consoleHandler,FileHandler,RotatingFileHandler\n\n\n[formatters]\nkeys=callbackFormatter\n\n\n[logger_root]\n;level=DEBUG\nlevel=INFO\nhandlers=consoleHandler,RotatingFileHandler\n\n\n[logger_callbackLogger]\n;level=DEBUG\nlevel=INFO\nhandlers=consoleHandler,RotatingFileHandler\nqualname=callbackLogger\npropagate=0\n\n\n[handler_consoleHandler]\nclass=StreamHandler\n;level=DEBUG\nlevel=INFO\nformatter=callbackFormatter\nargs=(sys.stdout,)\n\n\n[handler_FileHandler]\nclass=FileHandler\nlevel=DEBUG\nformatter=callbackFormatter\nargs=(''\"''\"''/var/log/a2billing/a2b-callback-daemon.log''\"''\"'',
      ''\"''\"''a''\"''\"'')\nfilename=/var/log/a2billing/a2b-callback-daemon.log\nmode=a\n\n\n[handler_RotatingFileHandler]\n;class=handlers.RotatingFileHandler\nclass=handlers.TimedRotatingFileHandler\nlevel=DEBUG\nformatter=callbackFormatter\n;
      TimedRotatingFileHandler\nargs=(''\"''\"''/var/log/a2billing/a2b-callback-daemon.log''\"''\"'',  ''\"''\"''midnight''\"''\"'',
      1)\n\n\n[formatter_callbackFormatter]\nformat=\"%(asctime)s - %(name)s - %(threadName)-10s
      - %(levelname)s - %(message)s\"\ndatefmt=\n\n\n'' > /etc/a2billing.conf\n# A2Billing
      Filesystem Permissions:\necho ''* A2Billing Filesystem Object Permissions Setup:''\nchmod
      777 /etc/asterisk\ntouch /etc/asterisk/additional_a2billing_iax.conf\ntouch
      /etc/asterisk/additional_a2billing_sip.conf\necho \\#include additional_a2billing_sip.conf
      >> /etc/asterisk/sip.conf\necho \\#include additional_a2billing_iax.conf >>
      /etc/asterisk/iax.conf\nchown -Rf www-data /etc/asterisk/additional_a2billing_iax.conf\nchown
      -Rf www-data /etc/asterisk/additional_a2billing_sip.conf\nchown -R asterisk:asterisk
      /usr/share/asterisk/sounds/\n# Asterisk Manager Configuration:\necho ''* Asterisk
      Manager Configuration Setup:''\necho ''[general] \nenabled = yes \nport = 5038
      \nbindaddr = 0.0.0.0 \n\n[myasterisk] \nsecret=mycode \nread=system,call,log,verbose,command,agent,user
      \nwrite=system,call,log,verbose,command,agent,user \n'' > /etc/asterisk/manager.conf\n#
      A2Billing AGI Installation:\necho ''* A2Billing AGI Installation:''\nmkdir /usr/share/asterisk/agi-bin\nchown
      asterisk:asterisk /usr/share/asterisk/agi-bin\ncd /usr/local/src/a2billing/AGI\ncp
      a2billing.php /usr/share/asterisk/agi-bin/\ncp -Rf lib /usr/share/asterisk/agi-bin/\nchmod
      +x /usr/share/asterisk/agi-bin/a2billing.php\n# Installation of WebUI Components:\necho
      ''* Installation of WebUI Components:''\nmkdir /var/www/a2billing\ncp -rf /usr/local/src/a2billing/admin
      /var/www/a2billing\ncp -rf /usr/local/src/a2billing/agent /var/www/a2billing\ncp
      -rf /usr/local/src/a2billing/customer /var/www/a2billing\ncp -rf /usr/local/src/a2billing/common
      /var/www/a2billing\n# Fixing of SmartyTemplates FS Permissions for A2Billing:\necho
      ''* Fixing SmartyTemplates FS Permissions for A2Billing:''\nchmod 755 /usr/local/src/a2billing/admin/templates_c\nchmod
      755 /usr/local/src/a2billing/customer/templates_c\nchmod 755 /usr/local/src/a2billing/agent/templates_c\nchown
      -Rf www-data:www-data /usr/local/src/a2billing/admin/templates_c\nchown -Rf
      www-data:www-data /usr/local/src/a2billing/customer/templates_c\nchown -Rf www-data:www-data
      /usr/local/src/a2billing/agent/templates_c\nchown -Rf www-data:www-data /var/www/a2billing/admin/templates_c/\nchown
      -Rf www-data:www-data /var/www/a2billing/customer/templates_c/\nchown -Rf www-data:www-data
      /var/www/a2billing/agent/templates_c/\n# Modify Asterisk Dialplan for A2Billing:\necho
      ''* Modify Asterisk Dialplan for A2Billing:''\necho \"[a2billing]\n; CallingCard
      application\nexten => _X.,1,Answer\nexten => _X.,2,Wait,2\nexten => _X.,3,DeadAGI,a2billing.php\nexten
      => _X.,4,Wait,2\nexten => _X.,5,Hangup\n\n[did] \n; CallingCard application
      \nexten => _X.,1,DeadAGI(a2billing.php|1|did) \n\" >> /etc/asterisk/extensions.conf\n#
      Setup A2Billing Crontab:\nechp ''* Setup A2Billing Crontab:''\necho \"# update
      the currency table\n0 6 * * * php /usr/local/src/a2billing/Cronjobs/currencies_update_yahoo.php\n\n#
      manage the monthly services subscription\n0 6 1 * * php /usr/local/src/a2billing/Cronjobs/a2billing_subscription_fee.php\n\n#
      To check account of each Users and send an email if the balance is\nless than
      the user have choice.\n0 * * * * php /usr/local/src/a2billing/Cronjobs/a2billing_notify_account.php\n\n#
      this script will browse all the DID that are reserve and check if\nthe customer
      need to pay for it\n# bill them or warn them per email to know if they want
      to pay in\norder to keep their DIDs\n0 2 * * * php /usr/local/src/a2billing/Cronjobs/a2billing_bill_diduse.php\n\n#
      This script will take care of the recurring service.\n0 12 * * * php /usr/local/src/a2billing/Cronjobs/a2billing_batch_process.php\n\n#
      To generate invoices and for each user.\n0 6 * * * php /usr/local/src/a2billing/Cronjobs/a2billing_batch_billing.php\n\n#
      to proceed the autodialer\n*/5 * * * * php /usr/local/src/a2billing/Cronjobs/a2billing_batch_autodialer.php\n\n#
      manage alarms\n0 * * * * php /usr/local/src/a2billing/Cronjobs/a2billing_alarm.php\n\"
      > /var/spool/cron/a2billing\n# Install Packages needed by Callback Daemon:\necho
      ''* Install Packages needed by Callback Daemon:''\napt-get -y install python-setuptools
      python-mysqldb python-psycopg2 python-sqlalchemy\ncd /usr/local/src/a2billing/CallBack\neasy_install
      callback-daemon-py/dist/callback_daemon-1.0.prod_r1527-py2.5.egg \n# Install
      the Initscript used by Callback Daemon:\necho ''* Install the Initscript used
      by Callback Daemon:''\ncd /usr/local/src/a2billing/CallBack/callback-daemon-py/callback_daemon/\ncp
      a2b-callback-daemon.debian /etc/init.d/a2b-callback-daemon\nchmod +x /etc/init.d/a2b-callback-daemon\n#
      Final Apache Webserver Restart:\necho ''* Final Apache Webserver Restart:''\n/etc/init.d/apache2
      stop\n/etc/init.d/apache2 start\n# Bring up A2Billing Callback Daemon:\necho
      ''* Bring up A2Billing Callback Daemon:''\n/etc/init.d/a2b-callback-daemon start\n#               #\n#
      ALL DONE HERE #\n#               #"}, {"is_public": true, "username": "riverdale",
      "id": 1950, "deployments_total": 13, "user_defined_fields": [], "updated": "2011-03-29T20:55:57",
      "label": "RVM + Chef Solo", "created": "2011-01-26T06:26:44", "images": ["linode/ubuntu10.04lts32bit"],
      "user_gravatar_id": "37884561e5a9b482d59c4acd734ae66b", "description": "Almost
      the same as StackScript 1133, which configures a chef client on top of rvm.
      This script configures for chef solo. The expectation is that cookbooks and
      roles will be copied to /tmp/chef, and then chef-solo will be executed remotely
      over ssh.\r\n\r\nUPDATE: rvm system-wide install fixed at 1.3.0, see http://stackoverflow.com/questions/5421800/rvm-system-wide-install-script-url-broken-what-is-replacement\r\n",
      "rev_note": "Fixed RVM version at 1.3.0", "deployments_active": 5, "script":
      "#!/bin/bash\n\n# <udf name=\"hostname\" label=\"Hostname\">\n# <udf name=\"default_ruby_interpreter\"
      label=\"Default Ruby Interpreter\"\n#   oneOf=\"ruby-1.8.6,ruby-1.8.7,ruby-1.9.1,ruby-1.9.2,ruby-head\"
      \n#   default=\"ruby-1.9.2\">\n\nlogfile=/root/stackscript.log\n\necho \"Setting
      locales (en_US.UTF-8)\" >> $logfile\naptitude -y update\naptitude -y install
      locales\n# Set locales to en_US.UTF-8\nlocaledev -i en_US -c -f UTF-8 en_US.UTF-8\nlocalgen\n\necho
      \"Upgrading packages\" >> $logfile\naptitude -y upgrade\n\necho \"Setting hostname
      to {$HOSTNAME}\" >> $logfile\necho ${HOSTNAME} > /etc/hostname\nhostname -F
      /etc/hostname\n\necho \"Installing RVM and Ruby dependencies\" >> $logfile\napt-get
      -y install curl git-core bzip2 build-essential zlib1g-dev libssl-dev\n\necho
      \"Installing RVM system-wide\" >> $logfile\nbash -c \"bash <( curl -L https://github.com/wayneeseguin/rvm/raw/1.3.0/contrib/install-system-wide
      ) --version ''1.3.0''\"\ncat >> /etc/profile <<''EOF''\n# Load RVM if it is
      installed,\n#  first try to load  user install\n#  then try to load root install,
      if user install is not there.\nif [ -s \"$HOME/.rvm/scripts/rvm\" ] ; then\n  .
      \"$HOME/.rvm/scripts/rvm\"\nelif [ -s \"/usr/local/rvm/scripts/rvm\" ] ; then\n  .
      \"/usr/local/rvm/scripts/rvm\"\nfi\nEOF\n\nsource /etc/profile\n\necho \"Installing
      Ruby interpreter (${DEFAULT_RUBY_INTERPRETER})\" >> $logfile\nrvm install ${DEFAULT_RUBY_INTERPRETER}\nrvm
      use ${DEFAULT_RUBY_INTERPRETER} --default\n\necho \"Installing Chef\" >> $logfile\ngem
      install chef\n\necho \"Configuring Chef solo\" >> $logfile\nmkdir /etc/chef\ncat
      >> /etc/chef/solo.rb <<EOF\nfile_cache_path \"/tmp/chef\"\ncookbook_path \"/tmp/chef/cookbooks\"\nrole_path
      \"/tmp/chef/roles\"\nlog_level :info\nEOF\n\necho \"Script complete\" >> $logfile"},
      {"is_public": true, "username": "portertech", "id": 1970, "deployments_total":
      10, "user_defined_fields": [], "updated": "2011-01-29T23:42:34", "label": "Graylog2",
      "created": "2011-01-29T23:28:55", "images": ["linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts"],
      "user_gravatar_id": "98f9dfc2e5e1318ac78b8c716582cd30", "description": "Installs
      and configures Graylog2 (server & web interface).\r\n\r\nUses https://github.com/portertech/graylog2-bootstrap/blob/master/bootstrap.sh",
      "rev_note": "Initial import", "deployments_active": 7, "script": "#!/bin/bash\n\ncd
      /usr/local/src\n\nsudo apt-get update\nsudo apt-get install -y git-core\n\ngit
      clone git://github.com/portertech/graylog2-bootstrap.git\n\ncd graylog2-bootstrap\n\n./bootstrap.sh"},
      {"is_public": true, "username": "pixid", "id": 1982, "deployments_total": 2,
      "user_defined_fields": [{"example": "Desired hostname of your Linode", "label":
      "Hostname", "name": "hostname"}, {"example": "Domain name which Apache will
      host", "label": "Domain Name", "name": "domain"}, {"label": "MySQL Root Password",
      "name": "mysqlpassword"}, {"label": "RVM ruby to install", "name": "rvmruby",
      "default": "1.9.2"}], "updated": "2011-03-29T22:30:28", "label": "Pixid Web
      Server", "created": "2011-01-31T23:50:54", "images": ["linode/archlinux2010.0532bit",
      "linode/archlinux2010.0564bit"], "user_gravatar_id": "54a8cb8e2a31fb342f5f799d7b7613c5",
      "description": "", "rev_note": "Initial import", "deployments_active": 0, "script":
      "#!/bin/bash\n# <UDF name=\"hostname\" label=\"Hostname\" example=\"Desired
      hostname of your Linode\" />\n# <UDF name=\"domain\" label=\"Domain Name\" example=\"Domain
      name which Apache will host\" />\n# <UDF name=\"mysqlpassword\" label=\"MySQL
      Root Password\" />\n# <UDF name=\"rvmruby\" label=\"RVM ruby to install\" default=\"1.9.2\"
      />\n\n# Update mirrorlist for pacman\nmv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.old\nwget
      http://www.archlinux.org/mirrorlist/all/ -O /etc/pacman.d/mirrorlist.new\nsed
      -i ''/^#\\S/ s|#||'' /etc/pacman.d/mirrorlist.new\nrankmirrors -n 6 /etc/pacman.d/mirrorlist.new
      > /etc/pacman.d/mirrorlist\n\n# Upgrade software\npacman -Syy --noconfirm\npacman
      -S --noconfirm pacman\npacman -S --noconfirm reflector curl\nmv /etc/pacman.d/mirrorlist
      /etc/pacman.d/mirrorlist.backup\nreflector -l 8 -r -o /etc/pacman.d/mirrorlist\npacman
      -Syy --noconfirm\npacman -Syu --noconfirm\n\n# Set hostname\nsed -i \"s/# HOSTNAME=\\\"myhost\\\"/HOSTNAME=\\\"$HOSTNAME\\\"/\"
      /etc/rc.conf\n\n# Set locales\nsed -i ''s/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/''
      /etc/locale.gen\nsed -i ''s/#en_US ISO-8859-1/en_US ISO-8859-1/'' /etc/locale.gen\nlocale-gen\n\n#
      Make some tweaks for bash completion/coloring and handy aliases\npacman -S --noconfirm
      bash-completion\nrm /etc/skel/.bashrc\nrm /etc/skel/.bash_profile\nwget https://gist.github.com/raw/1dfcf5019b227315c389/61137621e788691de0d89ac8514168ef9b9b5f87/bash_profile.sh
      -O /etc/skel/.bash_profile\nwget https://gist.github.com/raw/1dfcf5019b227315c389/8378bde77a24a68c5e3f3f34badeee27b6078c28/bashrc.sh
      -O /etc/skel/.bashrc\nwget https://gist.github.com/raw/1dfcf5019b227315c389/f9ef7eb4190b790f3e3a213da928e14d6807017f/bash.bashrc.local.sh
      -O /etc/bash.bashrc.local\ncp /etc/skel/.bash_profile /root/.bash_profile\ncp
      /etc/skel/.bashrc /root/.bashrc\n\n# Install sudo\npacman -S --noconfirm sudo\nsed
      -i ''s/# %wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/'' /etc/sudoers\n\n# Install
      RVM\npacman -Sy --noconfirm gcc patch curl bison zlib readline libxml2 libxslt
      git autoconf diffutils patch bison make\nbash < <( curl -L http://bit.ly/rvm-install-system-wide
      )\nsource ''/usr/local/lib/rvm''"}, {"is_public": true, "username": "steveberryman",
      "id": 2114, "deployments_total": 2, "user_defined_fields": [], "updated": "2011-03-06T18:05:59",
      "label": "RPM Fusion Repos", "created": "2011-02-20T22:05:57", "images": ["linode/fedora1432bit",
      "linode/fedora14", "linode/fedora1232bit", "linode/fedora12", "linode/fedora1332bit",
      "linode/fedora13"], "user_gravatar_id": "fe3c979afbe3cef92929b39d72386a81",
      "description": "Install the RPM Fusion fedora repos (both free and non-free)",
      "rev_note": "added -y so it doesnt hang waiting for input", "deployments_active":
      0, "script": "#!/bin/bash\n\nyum -y localinstall --nogpgcheck http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm
      http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm"},
      {"is_public": true, "username": "sharkatak", "id": 2166, "deployments_total":
      104, "user_defined_fields": [{"label": "MySQL root Password", "name": "db_password"},
      {"label": "Rails/Rack environment to run", "name": "rr_env", "default": "production"}],
      "updated": "2011-03-01T19:17:32", "label": "Rails 3 & Ruby 1.9.2", "created":
      "2011-03-01T19:17:23", "images": ["linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts",
      "linode/ubuntu10.1032bit", "linode/ubuntu10.10"], "user_gravatar_id": "f331926ac50ce87bcbc5317ca9a122e6",
      "description": "Update script of recrea''s stackscript (http://www.linode.com/stackscripts/view/?StackScriptID=1291)\r\n\r\nSet
      the LANG to en_US.UTF-8 by default so that bundler won''t bark on gemspecs containing
      UTF-8 characters.  See more info here http://alexle.net/archives/311.\r\n\r\n-
      Rails 3\r\n- Ruby 1.9.2\r\n- Nginx with Passenger\r\n- MySQL\r\n- git\r\n- Updates
      rubygems\r\n- Install rails 3\r\n- Install mysql gem\r\n- Add deploy user",
      "rev_note": "Initial import", "deployments_active": 31, "script": "#!/bin/bash\n#
      \n# Installs Ruby 1.9, and Nginx with Passenger. \n#\n# <UDF name=\"db_password\"
      Label=\"MySQL root Password\" />\n# <UDF name=\"rr_env\" Label=\"Rails/Rack
      environment to run\" default=\"production\" />\n\nsource <ssinclude StackScriptID=1>  #
      Common bash functions\n\nfunction log {\n  echo \"$1 `date ''+%D %T''`\" >>
      /root/log.txt\n}\n\n# Update packages and install essentials\n  cd /tmp\n  system_update\n  log
      \"System updated\"\n  apt-get -y install build-essential zlib1g-dev libssl-dev
      libreadline5-dev openssh-server libyaml-dev libcurl4-openssl-dev libxslt-dev
      libxml2-dev\n  goodstuff\n  log \"Essentials installed\"\n\n# Set up MySQL\n  mysql_install
      \"$DB_PASSWORD\" && mysql_tune 40\n  log \"MySQL installed\"\n\n# Set up Postfix\n  postfix_install_loopback_only\n\n#
      Installing Ruby\n  export RUBY_VERSION=\"ruby-1.9.2-p0\"\n  log \"Installing
      Ruby $RUBY_VERSION\"\n\n  log \"Downloading: (from calling wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/$RUBY_VERSION.tar.gz)\"
      \n  log `wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/$RUBY_VERSION.tar.gz`\n\n  log
      \"tar output:\"\n  log `tar xzf $RUBY_VERSION.tar.gz`\n  rm \"$RUBY_VERSION.tar.gz\"\n  cd
      $RUBY_VERSION\n\n  log \"current directory: `pwd`\"\n  log \"\"\n  log \"Ruby
      Configuration output: (from calling ./configure)\" \n  log `./configure` \n\n  log
      \"\"\n  log \"Ruby make output: (from calling make)\"\n  log `make`\n\n  log
      \"\"\n  log \"Ruby make install output: (from calling make install)\"\n  log
      `make install` \n  cd ..\n  rm -rf $RUBY_VERSION\n  log \"Ruby installed!\"\n\n#
      Set up Nginx and Passenger\n  log \"Installing Nginx and Passenger\" \n  gem
      install passenger\n  passenger-install-nginx-module --auto --auto-download --prefix=\"/usr/local/nginx\"\n  log
      \"Passenger and Nginx installed\"\n\n# Configure nginx to start automatically\n  wget
      http://library.linode.com/web-servers/nginx/installation/reference/init-deb.sh\n  cat
      init-deb.sh | sed ''s:/opt/:/usr/local/:'' > /etc/init.d/nginx\n  chmod +x /etc/init.d/nginx\n  /usr/sbin/update-rc.d
      -f nginx defaults\n  log \"Nginx configured to start automatically\"\n\n# Install
      git\n  apt-get -y install git-core\n\n# Set up environment\n  # Global environment
      variables\n  if [ ! -n \"$RR_ENV\" ]; then\n    RR_ENV=\"production\"\n  fi\n  cat
      >> /etc/environment << EOF\nRAILS_ENV=\"$RR_ENV\"\nRACK_ENV=\"$RR_ENV\"\nLANG=\"en_US.UTF-8\"\nEOF\n\n#
      Install Rails 3\n  # Update rubygems to (=> 1.3.6 as required by rails3)\n  gem
      update --system\n\n  # Install rails\n  gem install rails --no-ri --no-rdoc\n\n  #
      Install sqlite gem\n  apt-get -y install sqlite3 libsqlite3-dev\n  gem install
      sqlite3-ruby --no-ri --no-rdoc\n\n  # Install mysql gem\n  apt-get -y install
      libmysql-ruby libmysqlclient-dev\n  gem install mysql2 --no-ri --no-rdoc\n\n#
      Add deploy user\necho \"deploy:deploy:1000:1000::/home/deploy:/bin/bash\" |
      newusers\ncp -a /etc/skel/.[a-z]* /home/deploy/\nchown -R deploy /home/deploy\n#
      Add to sudoers(?)\necho \"deploy    ALL=(ALL) ALL\" >> /etc/sudoers\n\n# Spit
      & polish\n  restartServices\n  log \"StackScript Finished!\""}, {"is_public":
      true, "username": "bkirby81", "id": 2220, "deployments_total": 32, "user_defined_fields":
      [{"label": "Name of deployment user.", "name": "deploy_user"}, {"label": "Password
      for deployment user.", "name": "deploy_password"}, {"label": "Deployment user
      public ssh key.", "name": "deploy_sshkey"}, {"label": "SSH Port", "name": "ssh_port"},
      {"label": "Server''s hostname.", "name": "new_hostname"}, {"label": "Default
      text editor.", "name": "default_editor", "default": "nano"}, {"oneof": "Yes,No",
      "label": "Install firewall? (UFW and iptables)", "name": "install_firewall",
      "default": "Yes"}, {"oneof": "Yes,No", "label": "Open firewall ports for web?",
      "name": "open_web_firewall", "default": "Yes"}, {"oneof": "No,Stable,With Upload
      Module", "label": "Install Nginx?", "name": "nginx_options", "default": "NO"},
      {"manyof": "None,MySQL,MongoDB", "label": "Databases to install", "name": "databases_to_install",
      "default": "None"}, {"oneof": "Yes,No", "label": "Install RVM? (system wide)",
      "name": "install_rvm", "default": "No"}], "updated": "2011-06-14T03:10:45",
      "label": "Ubuntu Lucid: Base Setup + Nginx + Optional MongoDb/MySQL", "created":
      "2011-03-11T00:38:17", "images": ["linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts",
      "linode/ubuntu10.1032bit", "linode/ubuntu10.10"], "user_gravatar_id": "3afaec649e9d3fd0ddc32044ed0148e5",
      "description": "Base system setup including SSH config, hostname, optional nginx/mysql/mongo
      and optional RVM system wide install.", "rev_note": "Added RVM option", "deployments_active":
      9, "script": "#!/bin/bash\n# \n# Ruby 1.9.2 with options for database, and nginx
      install. Adds option to install RVM system-wide.\n# Outputs to /root/stackscript.log\n#\n#
      <UDF name=\"deploy_user\" Label=\"Name of deployment user.\" />\n# <UDF name=\"deploy_password\"
      Label=\"Password for deployment user.\" />\n# <UDF name=\"deploy_sshkey\" Label=\"Deployment
      user public ssh key.\" />\n# <UDF name=\"ssh_port\" Label=\"SSH Port\" />\n#
      <UDF name=\"new_hostname\" Label=\"Server''s hostname.\" />\n# <UDF name=\"default_editor\"
      Label=\"Default text editor.\" Default=\"nano\" />\n# <UDF name=\"install_firewall\"
      Label=\"Install firewall? (UFW and iptables)\" Default=\"Yes\" oneOf=\"Yes,No\"
      />\n# <UDF name=\"open_web_firewall\" Label=\"Open firewall ports for web?\"
      Default=\"Yes\" oneOF=\"Yes,No\" />\n# <UDF name=\"nginx_options\" Label=\"Install
      Nginx?\" Default=\"NO\" oneOf=\"No,Stable,With Upload Module\" />\n# <UDF name=\"databases_to_install\"
      Label=\"Databases to install\" Default=\"None\" manyOf=\"None,MySQL,MongoDB\"
      />\n# <UDF name=\"install_rvm\" Label=\"Install RVM? (system wide)\" Default=\"No\"
      oneOf=\"Yes,No\" />\n\n\nexec &> /root/stackscript.log\n\nsource <ssinclude
      StackScriptID=1>    # Common bash functions\nsource <ssinclude StackScriptID=123>  #
      Awesome ubuntu utils script\n\nfunction log {\n  echo \"$1 `date ''+%D %T''`\"\n}\n\nfunction
      mongodb_install {\n  echo \"deb http://downloads.mongodb.org/distros/ubuntu
      10.4 10gen\" >> /etc/apt/sources.list\n  apt-key adv --keyserver keyserver.ubuntu.com
      --recv 7F0CEB10\n  aptitude update\n  aptitude install -y mongodb-stable\n}\n\nfunction
      system_sshd_portnumber {\n  sed -i \"s/^#*\\(Port\\).*/\\1 $1/\" /etc/ssh/sshd_config\n}\n\nfunction
      system_sshd_append {\n  # $1 configuration option\n  # $2 value to set\n  echo
      \"$1 $2\" >> /etc/ssh/sshd_config\n}\n\n\nfunction install_nginx {\n  if [ \"$NGINX_OPTIONS\"
      == \"Stable\" ]; then\n    add-apt-repository ppa:nginx/stable\t\n  else\n    add-apt-repository
      ppa:brianmercer/nginx\n  fi\n  aptitude update\n  aptitude -y install nginx\n}\n\n\nlog
      \"Adding universe repositories and updating.\"\nsystem_enable_universe\nlog
      \"Base packages updated\"\nlog \"Installing required packages for ruby/rails,
      as well as git...\"\naptitude -y install git-core build-essential zlib1g-dev
      libssl-dev libreadline5-dev gcc g++ libxslt-dev libxml2-dev curl wget python-software-properties
      openssh-server $DEFAULT_EDITOR\nlog \"Packages installed\"\n\n# Add deploy user\nlog
      \"Adding deploy user, and ssh key.\"\nsystem_add_user $DEPLOY_USER $DEPLOY_PASSWORD
      \"users,sudo\"\nsystem_user_add_ssh_key $DEPLOY_USER \"$DEPLOY_SSHKEY\"\nsystem_update_locale_en_US_UTF_8\n\nlog
      \"Reconfiguring SSH\"\nsystem_sshd_portnumber $SSH_PORT\nsystem_sshd_permitrootlogin
      No\nsystem_sshd_passwordauthentication No\nsystem_sshd_pubkeyauthentication
      Yes\nsystem_sshd_append ClientAliveInterval 60\n/etc/init.d/ssh restart\n\nlog
      \"Set hostname to $NEW_HOSTNAME\"\nsystem_update_hostname $NEW_HOSTNAME\n\nif
      [ \"$INSTALL_FIREWALL\" == \"Yes\" ]; then\n  aptitude -y install ufw\n  ufw
      logging on\n  ufw default deny\n  if [ \"$OPEN_WEB_FIREWALL\" == \"Yes\" ];
      then\n    ufw allow 80/tcp\n    ufw allow 443/tcp\n  fi\t\n  ufw allow $SSH_PORT\n  ufw
      enable\t\nfi\n\n\nif [ \"$NGINX_OPTIONS\" != \"No\" ]; then\n  install_nginx\nfi\n
      \nif [[ -n \"$(echo $DATABASES_TO_INSTALL | grep ''MySQL'')\" ]]; then\n  log
      \"Installing MySQL\"\n  aptitude -y install libmysqlclient-dev\n  mysql_install
      \"$DEPLOY_PASSWORD\"\n  mysql_tune 30\nfi\n\nif [[ -n \"$(echo $DATABASES_TO_INSTALL
      | grep ''MongoDB'')\" ]]; then\n  log \"Installing MongoDB\"\n  mongodb_install\nfi\n\nif
      [ \"$INSTALL_RVM\" == \"Yes\" ]; then\n  log \"Installing RVM. Make sure to
      update .bashrc on first login.\"\n  bash < <(curl -s https://rvm.beginrescueend.com/install/rvm)\n\tlog
      \"Installing openssl and readline\"\n\trvm package install openssl\n\trvm package
      install readline\nend"}, {"is_public": true, "username": "fagiani", "id": 2253,
      "deployments_total": 100, "user_defined_fields": [{"label": "Server''s hostname",
      "name": "host_name", "default": "appserver"}, {"label": "Type the domain(s)
      name(s) for nginx config", "name": "domain_name", "default": "localhost"}, {"label":
      "Name of deployment user", "name": "user_name", "default": "app"}, {"label":
      "Password for deployment user", "name": "user_password"}, {"label": "Deployment
      user public ssh key", "name": "user_ssh_key"}, {"oneof": "mysql,pgsql,both",
      "label": "Select which database to install", "name": "database_type", "default":
      "mysql"}, {"label": "MySQL/PgSQL root Password", "name": "database_password"},
      {"label": "Rails/Rack environment to run", "name": "r_env", "default": "production"},
      {"example": "p290", "label": "Ruby 1.9.2 Release", "name": "ruby_release", "default":
      "p290"}, {"example": "1.0.11", "label": "Nginx release", "name": "nginx_release",
      "default": "1.0.11"}, {"example": "2.2.4", "label": "Redis version", "name":
      "redis_version", "default": "2.2.4"}], "updated": "2014-05-08T00:47:30", "label":
      "Optimized Ruby on Rails with extras", "created": "2011-03-19T15:11:46", "images":
      ["linode/ubuntu10.04lts32bit"], "user_gravatar_id": "afe1c18b5b4f52d0c8ada174e60c17ae",
      "description": "Installs Ruby 1.9.2 + Node.js + Nginx + Passenger + MySQL/PgSQL
      + Redis + Git + Bundler + BluePill + Deploy User", "rev_note": "making bluepill
      config default under /etc/bluepill.conf", "deployments_active": 9, "script":
      "#!/bin/bash\n# stackscript: RoR with L(inux)E(nginx)M(ysql)P(assenger) + extras\n#
      Installs Ruby 1.9.2 + Nginx + Passenger + MySQL + Git + Bundler + BluePill +
      Deploy User\n# author: Paulo Fagiani <pfagiani at gmail>\n#\n# Things to remember
      after install or to automate later:\n# - adjust server timezone if required\n#
      - put SSL certificate files at /usr/local/share/ca-certificates/\n# - customize
      nginx to suit your app and static files\n# - create logrotate file to the deployed
      app logs\n# - generate github/codeplane ssh deployment keys\n# - setup reverse
      DNS on Linode control panel\n# - run cap production deploy:setup to configure
      initial files\n#\n# <UDF name=\"host_name\" Label=\"Server''s hostname\" default=\"appserver\"
      />\n# <UDF name=\"domain_name\" Label=\"Type the domain(s) name(s) for nginx
      config\" default=\"localhost\" />\n# <UDF name=\"user_name\" Label=\"Name of
      deployment user\" default=\"app\" />\n# <UDF name=\"user_password\" Label=\"Password
      for deployment user\" />\n# <UDF name=\"user_ssh_key\" Label=\"Deployment user
      public ssh key\" />\n# <UDF name=\"database_type\" oneof=\"mysql,pgsql,both\"
      Label=\"Select which database to install\" default=\"mysql\" />\n# <UDF name=\"database_password\"
      Label=\"MySQL/PgSQL root Password\" />\n# <UDF name=\"r_env\" Label=\"Rails/Rack
      environment to run\" default=\"production\" />\n# <UDF name=\"ruby_release\"
      Label=\"Ruby 1.9.2 Release\" default=\"p290\" example=\"p290\" />\n# <UDF name=\"nginx_release\"
      Label=\"Nginx release\" default=\"1.0.11\" example=\"1.0.11\" />\n# <UDF name=\"redis_version\"
      Label=\"Redis version\" default=\"2.2.4\" example=\"2.2.4\" />\n\nexec &> /root/shellstack.log\n\necho
      \"Installing git and cloning the shellstack script...\"\napt-get install -y
      git-core\n\ngit clone git://github.com/fagiani/shellstack.git\nshellstack/install
      rails"}, {"is_public": true, "username": "dharmatech", "id": 2256, "deployments_total":
      18, "user_defined_fields": [{"label": "Client username", "name": "client_username"},
      {"label": "Client password", "name": "client_password"}, {"example": "The hostname
      to set inside the container, typically the domain name.", "label": "Hostname",
      "name": "client_hostname"}, {"example": "Optional address to send notification
      to when setup is complete.", "label": "Send notification to", "name": "notify_email",
      "default": ""}], "updated": "2011-06-02T22:43:14", "label": "Sandbox Migration",
      "created": "2011-03-20T02:24:12", "images": ["linode/ubuntu10.04lts32bit"],
      "user_gravatar_id": "14f456c274f50c48599f567d6c0fc1ed", "description": "Used
      when migrating from the dharmatech sandbox to production.", "rev_note": "Tweak",
      "deployments_active": 3, "script": "#!/bin/bash\n\n# <UDF name=\"client_username\"
      Label=\"Client username\"/>\n# <UDF name=\"client_password\" Label=\"Client
      password\"/>\n# <UDF name=\"client_hostname\" Label=\"Hostname\" example=\"The
      hostname to set inside the container, typically the domain name.\" />\n# <UDF
      name=\"notify_email\" Label=\"Send notification to\" default=\"\" example=\"Optional
      address to send notification to when setup is complete.\" />\n\nexec &> /root/stackscript.log\n\nfunction
      system_set_swappiness {\n  echo \"system_set_swappiness()\"\n  # Delay using
      swap space for as long as possible\n  echo \"vm.swappiness=1\" >> /etc/sysctl.conf\n  sysctl
      vm.swappiness=1\n}\n\nfunction system_set_accept_svn_cert {\n  echo \"system_set_accept_svn_cert()\"\n  #
      Accept self-signed cert to checkout from svn.dharmatech.org\n  cat > /etc/subversion/cacert.crt
      <<EOF\n-----BEGIN CERTIFICATE-----\nMIIEMTCCA5qgAwIBAgIJAPi0iNqgPEpFMA0GCSqGSIb3DQEBBQUAMIHCMQswCQYD\nVQQGEwJVUzENMAs***REMOVED***1UECBMEVXRhaDEXMBU***REMOVED***1UEBxMOU2FsdCBMYWtlIENpdHkx\nEzARBgNVBAoTCkRoYXJtYVRlY2gxKTAnBgNVBAsTIERoYXJtYVRlY2ggQ2VydGlm\naWNhdGUgQXV0aG9yaXR5MSQwIgYDVQQDExtEaGFybWFUZWNoIHJvb3QgY2VydGlm\naWNhdGUxJTAjBgkqhkiG9w0BCQEWFnN1cHBvcnRAZGhhcm1hdGVjaC5vcmcwHhcN\nMDgwOTE4MDAyMTQxWhcNMDgxMDE4MDAyMTQxWjCBwjELMAk***REMOVED***1UEBhMCVVMxDTAL\nBgNVBAgTBFV0YWgxFzAVBgNVBAcTDlNhbHQgTGFrZSBDaXR5MRMwEQYDVQQKEwpE\naGFybWFUZWNoMSkwJwYDVQQLEyBEaGFybWFUZWNoIENlcnRpZmljYXRlIEF1dGhv\ncml0eTEkMCI***REMOVED***1UEAxMbRGhhcm1hVGVjaCByb290IGNlcnRpZmljYXRlMSUwIwYJ\nKoZIhvcNAQkBFhZzdXBwb3J0QGRoYXJtYXRlY2gub3JnMIGfMA0GCSqGSIb3DQEB\nAQUAA4GNADCBiQKBgQDB0DMERm+KEnFn3qkHghk+wXLF+IkMWQmUOomYsElh2zXZ\nCxM9xUchn9Z3OGkKDsFyEwc7raVYijG8sE49KD4u64SJG219IHY/hFQvFpgy1cbe\n2yP85TLP3Z1Ppzb/vMzKRXdAxfYSY/LXIo+LwwxkZLyihqn+TdNftXADiZNT0wID\nAQABo4IBKzCCAScwHQYDVR0OBBYEFKY2kcL6trgBY5swypCX0TSa74khMIH3BgNV\nHSMEge8wgeyAFKY2kcL6trgBY5swypCX0TSa74khoYHIpIHFMIHCMQswCQYDVQQG\nEwJVUzENMAs***REMOVED***1UECBMEVXRhaDEXMBU***REMOVED***1UEBxMOU2FsdCBMYWtlIENpdHkxEzAR\nBgNVBAoTCkRoYXJtYVRlY2gxKTAnBgNVBAsTIERoYXJtYVRlY2ggQ2VydGlmaWNh\ndGUgQXV0aG9yaXR5MSQwIgYDVQQDExtEaGFybWFUZWNoIHJvb3QgY2VydGlmaWNh\ndGUxJTAjBgkqhkiG9w0BCQEWFnN1cHBvcnRAZGhhcm1hdGVjaC5vcmeCCQD4tIja\noDxKRTAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4GBAJvXncVENRwz9caz\nGtI9JSnBQr+DbBQHEhs32pgyZJffzZMllczZbqA01hHbACrslpWB2rOjS9KD3/ek\nZhCQeGMlRMr8dsY7VszCBACTKWZbk8T4A56qkGDtA6u3X0O03OVR3sgmsQJuh3fC\nndvmeVpuqK6PL8cxJ+Cwu0RPp2vn\n-----END
      CERTIFICATE-----\nEOF\n\n  cat > /etc/subversion/svn.dharmatech.org.crt <<EOF\n-----BEGIN
      CERTIFICATE-----\nMIIDdjCCAt+gAwIBAgIBATANBgkqhkiG9w0BAQUFADCBwjELMAk***REMOVED***1UEBhMCVVMx\nDTALBgNVBAgTBFV0YWgxFzAVBgNVBAcTDlNhbHQgTGFrZSBDaXR5MRMwEQYDVQQK\nEwpEaGFybWFUZWNoMSkwJwYDVQQLEyBEaGFybWFUZWNoIENlcnRpZmljYXRlIEF1\ndGhvcml0eTEkMCI***REMOVED***1UEAxMbRGhhcm1hVGVjaCByb290IGNlcnRpZmljYXRlMSUw\nIwYJKoZIhvcNAQkBFhZzdXBwb3J0QGRoYXJtYXRlY2gub3JnMB4XDTA4MDkxODAx\nMDUxMloXDTE4MDkxNjAxMDUxMlowga4xCzAJBgNVBAYTAlVTMQ0wCwYDVQQIEwRV\ndGFoMRcwFQYDVQQHEw5TYWx0IExha2UgQ2l0eTETMBE***REMOVED***1UEChMKRGhhcm1hVGVj\naDEeMBw***REMOVED***1UECxMVU3VidmVyc2lvbiByZXBvc2l0b3J5MRswGQYDVQQDExJzdm4u\nZGhhcm1hdGVjaC5vcmcxJTAjBgkqhkiG9w0BCQEWFnN1cHBvcnRAZGhhcm1hdGVj\naC5vcmcwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAK8CBrQKE8AqboCeu07J\nvSPKvUrfYJmMZM0sTt4Dk3m5Gu/HNqTU+W8VEoejopEZaZScmQX3ACa5AbG9cvmq\nY7ssOIh1Ce9lX9vpz4JCyQDPVdoJKTCTMo40M/Rz1YgqoBskLxlfuI1fsPAhyf3L\nm7S8W9krF+PLx7lnSjQS/5gFAgMBAAGjgY0wgYowCQYDVR0TBAIwADA9BglghkgB\nhvhCAQ0EMBYuQ2VydGlmaWNhdGUgZ2VuZXJhdGVkIGJ5IGh0dHA6Ly9kaGFybWF0\nZWNoLm9yZzAdBgNVHQ4EFgQUrB51YuvRwWRDG0S2qVxMD6oahHswHwYDVR0jBBgw\nFoAUpjaRwvq2uAFjmzDKkJfRNJrviSEwDQYJKoZIhvcNAQEFBQADgYEAIGhYx4T+\nSyZVkjG2mYf/+r+mzZyokQsDZ7cRCZb53C8ERVzBtL2sGVLrx7L2SRmU+58K9uTt\nUPefSvYe1RnNDw0SJt9XSxghl8eMHVVzNLmnC1wmsxuuo8k9NSptke3CnHPFSakg\nd3jfzFkAzrPtgI+wCvuxy4K9+PHaTeHS84w=\n-----END
      CERTIFICATE-----\nEOF\n\n  echo \"ssl-authority-files = /etc/subversion/cacert.crt;/etc/subversion/svn.dharmatech.org.crt\"
      >> /etc/subversion/servers\n}\n\nfunction system_install_additional {\n  echo
      \"system_install_additional()\"\n  apt-get install -y htop git-core subversion
      wget curl tcsh\n  apt-get install -y snmpd rsnapshot munin munin-node bsd-mailx\n}\n\nfunction
      system_set_timezone {\n  echo \"system_set_timezone()\"\n  echo \"America/Denver\"
      > /etc/timezone\n  rm -f /etc/localtime\n  ln -s /usr/share/zoneinfo/America/Denver
      /etc/localtime\n}\n\nfunction system_install_mysql {\n  echo \"system_install_mysql()\"\n  DB_PASSWORD=$(randomString
      13)\n  mysql_install \"$DB_PASSWORD\"\n  mysql_create_database \"$DB_PASSWORD\"
      \"${CLIENT_USERNAME}_drupal\"\n  mysql_create_database \"$DB_PASSWORD\" \"${CLIENT_USERNAME}_civicrm\"\n  mysql_create_user
      \"$DB_PASSWORD\" \"$CLIENT_USERNAME\" \"$CLIENT_PASSWORD\"\n  mysql_grant_user
      \"$DB_PASSWORD\" \"$CLIENT_USERNAME\" \"${CLIENT_USERNAME}_drupal\"\n  mysql_grant_user
      \"$DB_PASSWORD\" \"$CLIENT_USERNAME\" \"${CLIENT_USERNAME}_civicrm\"\n\n  #
      Used by rsnapshot for backups\n  echo \"mysql_server=localhost\" >> /usr/local/etc/adm.conf\n  echo
      \"mysql_clients=localhost\" >> /usr/local/etc/adm.conf\n  echo \"mysql_admin_user=root\"
      >> /usr/local/etc/adm.conf\n  echo \"mysql_admin_pw=${DB_PASSWORD}\" >> /usr/local/etc/adm.conf\n  chmod
      400 /usr/local/etc/adm.conf\n}\n\nfunction system_install_php_apache {\n  echo
      \"system_install_php_apache()\"\n  php_install_with_apache && php_tune\n\n  sed
      -i ''/max_execution_time/s/.*/max_execution_time = 300/'' /etc/php5/apache2/php.ini\n  sed
      -i ''/max_execution_time/s/.*/max_execution_time = 300/'' /etc/php5/cli/php.ini\n  sed
      -i ''/max_execution_time/s/.*/max_execution_time = 300/'' /etc/php5/cgi/php.ini\n\n  sed
      -i ''/memory_limit/s/.*/memory_limit = 128M/'' /etc/php5/apache2/php.ini\n  sed
      -i ''/memory_limit/s/.*/memory_limit = 128M/'' /etc/php5/cli/php.ini\n  sed
      -i ''/memory_limit/s/.*/memory_limit = 128M/'' /etc/php5/cgi/php.ini\n\n  sed
      -i ''/upload_max_filesize/s/.*/upload_max_filesize = 8M/'' /etc/php5/apache2/php.ini\n  sed
      -i ''/upload_max_filesize/s/.*/upload_max_filesize = 8M/'' /etc/php5/cli/php.ini\n  sed
      -i ''/upload_max_filesize/s/.*/upload_max_filesize = 8M/'' /etc/php5/cgi/php.ini\n\n  sed
      -i ''/post_max_size/s/.*/post_max_size = 16M/'' /etc/php5/apache2/php.ini\n  sed
      -i ''/post_max_size/s/.*/post_max_size = 16M/'' /etc/php5/cli/php.ini\n  sed
      -i ''/post_max_size/s/.*/post_max_size = 16M/'' /etc/php5/cgi/php.ini\n\n  apache_install
      && apache_tune 40\n  apt-get install -y php-pear php5-xmlrpc php5-curl php5-gd
      php5-mysql php5-cli\n  cat > /etc/apache2/ports.conf <<EOF\nListen 80\n<IfModule
      mod_ssl.c>\n  Listen 443\n</IfModule>\nEOF\n\n  cat > /etc/apache2/sites-available
      <<EOF\nDocumentRoot /var/www/\n<Directory /var/www/>\n  Options Indexes FollowSymLinks
      MultiViews ExecCGI\n  AllowOverride All\n</Directory>\n\nErrorLog /var/log/apache2/error.log\nLogLevel
      warn\nSetEnvIf Request_URI \"\\.(jpg|xml|png|gif|ico|js|css|swf|js?.|css?.)$\"
      DontLog\nCustomLog /var/log/apache2/access.log combined Env=!DontLog\nServerSignature
      On\n\nNameVirtualHost *:80\n<VirtualHost *:80>\n  ServerAdmin support@dharmatech.org\n  RewriteEngine
      On\n  # Rewrite www.domain.com to domain.com\n  RewriteCond %{HTTP_HOST} ^www\\.(.*)$
      [***REMOVED***]\n  RewriteRule ^(.*)$ http://%1$1 [L,R=301]\n</VirtualHost>\n\n#NameVirtualHost
      *:443\n#<VirtualHost *:443>\n#  ServerAdmin support@dharmatech.org\n#  ServerName
      contextualpsychology.org\n#  SSLEngine On\n#  SSLProtocol all -SSLv2\n#  SSLCertificateKeyFile
      /etc/apache2/ssl/ssl.key/site.key\n#  SSLCertificateFile /etc/apache2/ssl/ssl.crt/site.crt\n#  SSLCertificateChainFile
      /etc/apache2/ssl/ssl.crt/site.ca-bundle\n#</VirtualHost>\nEOF\n\n  # (En|Dis)able
      (un)necessary modules\n  rm /etc/apache2/mods-enabled/status.*\n  rm /etc/apache2/mods-enabled/status.*\n  rm
      /etc/apache2/mods-enabled/reqtimeout.*\n  rm /etc/apache2/mods-enabled/php5.*\n  rm
      /etc/apache2/mods-enabled/negotiation.*\n  rm /etc/apache2/mods-enabled/autoindex.*\n  ln
      -s /etc/apache2/mods-available/ssl.* /etc/apache2/mods-enabled/\n  ln -s /etc/apache2/mods-available/expires.*
      /etc/apache2/mods-enabled/\n  \n  ln -s /etc/apache2/sites-available /etc/apache2/sites-enabled/000-default\n}\n\nfunction
      system_install_fw {\n  echo \"system_install_fw()\"\n  # Allow standard ports
      and non-standard ssh port\n  iptables -A INPUT -i lo -j ACCEPT\n  iptables -A
      INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n  iptables -A INPUT -p
      tcp --dport 4422 -j ACCEPT\n  iptables -A INPUT -p tcp --dport www -j ACCEPT\n  iptables
      -A INPUT -p tcp --dport https -j ACCEPT\n  iptables -A INPUT -p udp --sport
      domain -j ACCEPT\n  iptables -A INPUT -p icmp -j ACCEPT\n  iptables -A INPUT
      -p tcp -j REJECT --reject-with tcp-reset\n  iptables -A INPUT -p udp -j REJECT
      --reject-with icmp-port-unreachable\n  iptables-save > /etc/iptables.rules\n\n  cat
      > /etc/init.d/iptables <<EOF\n#!/bin/sh\n#  Load iptables from /etc/iptables.save
      at boot time\ncase \"\\${1:-''''}\" in\n  ''start'')\n     if [ -f /etc/iptables.rules
      -a -x /sbin/iptables-restore ]\n       then\n         /sbin/iptables-restore
      < /etc/iptables.rules\n     fi\n     exit 0\n     ;;\n\n  ''stop'')\n     if
      [ -x /sbin/iptables ]\n       then\n         /sbin/iptables -F\n     fi\n     exit
      0\n     ;;\n\n  ''restart'')\n        set +e; ./iptables stop; set -e\n        ./iptables
      start \n        ;;\n\n  *)\n     echo \"Usage: iptables start|stop|restart|reload|force-reload|status\"\n     exit
      1\n     ;;\nesac\nEOF\n\n  chmod a+x /etc/init.d/iptables\n  /usr/sbin/update-rc.d
      iptables defaults\n}\n\nfunction system_set_admin_group {\n  echo \"system_set_admin_group()\"\n  groupadd
      admin\n  echo \"%admin ALL=(ALL) ALL\" > /etc/sudoers\n}\n\nfunction system_configure_backups
      {\n  echo \"system_configure_backups()\"\n  mkdir /backup\n}\n\nfunction system_svn_co
      {\n  echo \"system_svn_co\"\n  svn export https://svn.dharmatech.org/svn/adm/trunk
      /usr/local/sbin/\n}\n\nfunction system_configure_postfix {\n  echo \"system_configure_postfix()\"\n  #
      Disable local delivery and smtp\n  sed -i /etc/postfix/master.cf <<EOF\n/^smtp/s/smtp      inet/#smtp      inet/\n/^local/s/local/#local/\nEOF\n\n  #
      Use a virtual alias and transport map\n  sed -i /etc/postfix/main.cf <<EOF\n/alias_database/a\\\nvirtual_alias_maps
      = hash:/etc/postfix/virtual\\n\\\ntransport_maps = hash:/etc/postfix/transport\nEOF\n\n  #
      Don''t listen on the network\n  sed -i /etc/postfix/main.cf <<EOF\n/^myhostname/d\n/^alias/d\n/^mydestination/s/.*/mydestination
      =/\n/^mynetworks/s/.*/mynetworks_style = host/\nEOF\n\n  # Build the transport
      map\n  cat > /etc/postfix/transport <<EOF\nexample.com      discard:\n.example.com     discard:\nEOF\n  /usr/sbin/postmap
      /etc/postfix/transport\n}\n\nfunction system_set_host {\n  echo \"system_set_host()\"\n  echo
      \"${CLIENT_HOSTNAME}\" > /etc/hostname\n  /etc/init.d/hostname.sh start\n}\n\nfunction
      system_install_user {\n  echo \"system_install_user\"\n  useradd -m -s /bin/tcsh
      -G admin -c \"Staff\" ${CLIENT_USERNAME}\n  echo \"${CLIENT_USERNAME}:${CLIENT_PASSWORD}\"
      | chpasswd\n  sed -i ''/Port/s/.*/Port 4422/'' /etc/ssh/sshd_config\n  echo
      \"AllowUser ${CLIENT_USERNAME}@*\" >> /etc/ssh/sshd_config\n  /etc/init.d/ssh
      restart\n}\n\n### Begin installation ###\nsource <ssinclude StackScriptID=\"1\">\n\nsystem_update\npostfix_install_loopback_only\nsystem_set_swappiness\nsystem_set_accept_svn_cert\nsystem_set_timezone\nsystem_set_admin_group\nsystem_set_host\n\nsystem_install_mysql\nsystem_install_php_apache\nsystem_install_additional\nsystem_install_fw\nsystem_install_user\n\nsystem_svn_co\nsystem_configure_backups\nsystem_configure_postfix\n\nrestartServices\n\nif
      [ -n \"$NOTIFY_EMAIL\" ]; then\n  mail -s \"$(system_primary_ip) configuration
      complete\" \"${NOTIFY_EMAIL}\" <<EOD\nEOD\nfi"}, {"is_public": true, "username":
      "samuelelliot", "id": 2266, "deployments_total": 43, "user_defined_fields":
      [{"                               example": "Ex: test.example.com", "    label":
      "Hostname", "name": "sys_hostname"}, {"                               example":
      "Ex: America/Los_Angeles, US/Central, EST, etc.", "    label": "Timezone", "name":
      "sys_timezone"}, {" label": "Puppet Agent Environment", "               example":
      "Ex: development, production, etc.", "default": "", "name": "puppetagent_env"},
      {" label": "Puppet Master IP", "                       example": "Ex: 12.34.56.78
      (* Required to initialize Puppet Secure Communications)", "default": "", "name":
      "puppetmaster_ip"}, {"oneof": "Yes,No", "default": "No", "example": "(* Requires
      Puppet Master IP) Runs `puppetd --waitforcert 60 --test` to create a new SSL
      key and a request for cert on the Puppet Master.  On the Puppet Master run `puppetca
      --list` to see pending requests and `puppetca --sign fqdn` where fqdn is the
      hostname for this agent.", "name": "puppet_seccom", "   label": "Initialize
      Puppet Secure Communications"}, {"oneof": "No,Yes", "                       example":
      "Augeas 7 installs by default", "label": "Install Augeas 8", "name": "install_augeas_8",
      "default": "Yes"}, {" label": "Log StackScripts Activity", "oneof": "No,Yes",
      "              example": "Log output & any errors to roots home. Output is still
      sent to STDOUT and may be watched from LISH", "default": "Yes", "name": "stackscriptslog"}],
      "updated": "2014-01-02T03:27:55", "label": "Ubuntu 10.04 LTS with Puppet Agent
      from Backports PPA", "created": "2011-03-22T15:44:45", "images": ["linode/ubuntu10.04lts",
      "linode/ubuntu10.04lts32bit"], "user_gravatar_id": "d5b74599186fb382586673895bb2cb1e",
      "description": "Setup a Linode as a Puppet Agent with a remote Puppet Master,
      optionally installing Augeas 8.\r\n\r\nRequires StackScript Bash Library (StackScriptID:
      3687)\r\nRequires StackScript Bash Library (StackScriptID: 3691)\r\n\r\nPuppet
      Backports PPA from LaunchPad ~mathiaz (https://launchpad.net/~mathiaz/+archive/puppet-backports)\r\nAugeas
      Backports PPA from LaunchPad ~raphink (https://launchpad.net/~raphink/+archive/augeas)\r\n\r\n1*
      [Optional] Starts logging\r\n    * Logging is done with synchronous output to
      the STDOUT\r\n    * You can see both stackscript.log & stackscript.err in the
      root folder\r\n2* Installs \"python-software-properties\" for \"add-apt-repository\"
      to add PPAs into source.list\r\n3* Sets system hostname and timezone\r\n4* Adds
      repository and key for Puppet backports\r\n5* [Optional] Adds repository and
      key for Augeas backports\r\n6* Installs \"puppet rdoc\" and all dependent packages\r\n7*
      [Optional] Sets Puppet Agent environment\r\n8* [Optional] Adds an IP for puppet
      in the hosts file\r\n9* [Optional] Run `puppetd --waitforcert 60 --test` for
      initial handshake.\r\n    * An IP address for the Puppet Master must be specified\r\n    *
      Command waits for a signed cert on the CA\r\n    * On Puppet Master run `puppetca
      --list` to view list of unsigned certs\r\n    * On Puppet Master run `puppetca
      --sign fqdn` (where fqdn is your nodes domain) to sign cert", "rev_note": "General
      refactoring and cleanup", "deployments_active": 5, "script": "#!/usr/bin/env
      bash\n#\n# Ubuntu 10.04 LTS with Puppet Agent from Backports PPA\n#\n# Setup
      a Linode as a Puppet Agent with a remote Puppet Master, optionally installing
      Augeas 8.\n#\n# Requires StackScript Bash Library (StackScriptID: 3687)\n# Requires
      StackScript Bash Library (StackScriptID: 3691)\n#\n# Puppet Backports PPA from
      LaunchPad ~mathiaz (https://launchpad.net/~mathiaz/+archive/puppet-backports)\n#
      Augeas Backports PPA from LaunchPad ~raphink (https://launchpad.net/~raphink/+archive/augeas)\n#\n#
      1* [Optional] Starts logging\n#     * Logging is done with synchronous output
      to the STDOUT\n#     * You can see both stackscript.log & stackscript.err in
      the root folder\n# 2* Installs \"python-software-properties\" for \"add-apt-repository\"
      to add PPAs into source.list\n# 3* Sets system hostname and timezone\n# 4* Adds
      repository and key for Puppet backports\n# 5* [Optional] Adds repository and
      key for Augeas backports\n# 6* Installs \"puppet rdoc\" and all dependent packages\n#
      7* [Optional] Sets Puppet Agent environment\n# 8* [Optional] Adds an IP for
      puppet in the hosts file\n# 9* [Optional] Run `puppetd --waitforcert 60 --test`
      for initial handshake.\n#     * An IP address for the Puppet Master must be
      specified\n#     * Command waits for a signed cert on the CA\n#     * On Puppet
      Master run `puppetca --list` to view list of unsigned certs\n#     * On Puppet
      Master run `puppetca --sign fqdn` (where fqdn is your nodes domain) to sign
      cert\n#\n# <UDF name=\"sys_hostname\"     Label=\"Hostname\"                                example=\"Ex:
      test.example.com\" />\n# <UDF name=\"sys_timezone\"     Label=\"Timezone\"                                example=\"Ex:
      America/Los_Angeles, US/Central, EST, etc.\" />\n# <UDF name=\"puppetagent_env\"  Label=\"Puppet
      Agent Environment\"                example=\"Ex: development, production, etc.\"
      default=\"\" />\n# <UDF name=\"puppetmaster_ip\"  Label=\"Puppet Master IP\"                        example=\"Ex:
      12.34.56.78 (* Required to initialize Puppet Secure Communications)\" default=\"\"
      />\n# <UDF name=\"puppet_seccom\"    Label=\"Initialize Puppet Secure Communications\"
      example=\"(* Requires Puppet Master IP) Runs `puppetd --waitforcert 60 --test`
      to create a new SSL key and a request for cert on the Puppet Master.  On the
      Puppet Master run `puppetca --list` to see pending requests and `puppetca --sign
      fqdn` where fqdn is the hostname for this agent.\" oneOf=\"Yes,No\" default=\"No\"/>\n#
      <UDF name=\"install_augeas_8\" Label=\"Install Augeas 8\"                        example=\"Augeas
      7 installs by default\" oneOf=\"No,Yes\" default=\"Yes\" />\n# <UDF name=\"stackscriptslog\"  Label=\"Log
      StackScripts Activity\"               example=\"Log output & any errors to roots
      home. Output is still sent to STDOUT and may be watched from LISH\" oneOf=\"No,Yes\"
      default=\"Yes\" />\n\nsource <ssinclude StackScriptID=\"3687\">\nsource <ssinclude
      StackScriptID=\"3691\">\n\n\n######################\n## STACKSCRIPT FLOW ##\n######################\n\n#
      Error Logging\nif [ \"$STACKSCRIPTSLOG\" == \"Yes\" ]; then\n    stackscript_log                                     #
      Defined in StackScriptID 3687\nfi\n\n# Bring system up to date\napt_upgrade_full                                        #
      Defined in StackScriptID 3687\n\n# Set system hostname & timezone\nset_hostname
      \"$SYS_HOSTNAME\"                            # Defined in StackScriptID 3687\nset_timezone
      \"$SYS_TIMEZONE\"                            # Defined in StackScriptID 3687\n\n\n#
      Add Augeas Backport PPA & Install software\nif [ \"$INSTALL_AUGEAS_8\" == \"Yes\"
      ]; then\n    augeas_install_from_backports_ppa                   # Defined in
      StackScriptID 3691\nfi\n\n# Add Puppet Backport PPA & Install software\npuppet_install_from_backports_ppa                       #
      Defined in StackScriptID 3691\n\n\n# Set Agents environment\nif [ -n \"$PUPPETAGENT_ENV\"
      ]; then\n    puppet_config_agent_env \"$PUPPETAGENT_ENV\"          # Defined
      in StackScriptID 3691\nfi\n\n# Set IP for Puppetmaster\nif [ -n \"$PUPPETMASTER_IP\"
      ]; then\n    puppet_config_agent_master_dns \"$PUPPETMASTER_IP\"   # Defined
      in StackScriptID 3691\nfi\n\n# Configure CSR\nif [ -n \"$PUPPETMASTER_IP\" -a
      \"$PUPPET_SECCOM\" == \"Yes\" ]; then\n    puppet_config_agent_seccom                          #
      Defined in StackScriptID 3691\nfi"}, {"is_public": true, "username": "vukpessh1",
      "id": 2276, "deployments_total": 0, "user_defined_fields": [], "updated": "2011-03-24T11:06:14",
      "label": "shutdown", "created": "2011-03-24T11:05:48", "images": ["linode/centos5.632bit"],
      "user_gravatar_id": "cb2e965fab891d6356d247799df48a6c", "description": "shutdown
      the machine", "rev_note": "Initial import", "deployments_active": 0, "script":
      "#!/bin/bash\nhalt"}, {"is_public": true, "username": "matthewderby", "id":
      2279, "deployments_total": 41, "user_defined_fields": [], "updated": "2011-03-24T20:38:22",
      "label": "Ubuntu 10.10 with Sun Java 6 JDK/Groovy 1.7.0/Grails 1.3.7", "created":
      "2011-03-24T19:52:35", "images": ["linode/ubuntu10.1032bit", "linode/ubuntu10.10"],
      "user_gravatar_id": "23649ec68adf9ccc784f34f0e637d89d", "description": "Simple
      Ubuntu 10.10 install with Sun Java 6 JDK / Groovy 1.7.0 / Grails 1.7.3", "rev_note":
      "Final", "deployments_active": 21, "script": "#!/bin/bash\n\necho deb http://archive.canonical.com/ubuntu
      maverick partner >> /etc/apt/sources.list\necho deb-src http://archive.canonical.com/ubuntu
      maverick partner >> /etc/apt/sources.list\necho >> /etc/apt/sources.list\necho
      deb http://archive.canonical.com/ubuntu maverick-updates partner >> /etc/apt/sources.list\necho
      deb-src http://archive.canonical.com/ubuntu maverick-updates partner >> /etc/apt/sources.list\necho
      >> /etc/apt/sources.list\necho deb http://archive.canonical.com/ubuntu maverick-security
      partner >> /etc/apt/sources.list\necho deb-src http://archive.canonical.com/ubuntu
      maverick-security partner >> /etc/apt/sources.list\n\napt-get update\n\napt-get
      upgrade -y\n\necho Installing Sun Java 6 JDK\necho sun-java6-jdk shared/accepted-sun-dlj-v1-1
      select true | /usr/bin/debconf-set-selections\napt-get install sun-java6-jdk
      -y\n\necho export JAVA_HOME=/usr/lib/jvm/java-6-sun >> /root/.profile\nexport
      JAVA_HOME=/usr/lib/jvm/java-6-sun\n\necho Installing groovy 1.7.0\napt-get install
      groovy -y\n\ncd /root\n\nGRAILS_VERSION=1.3.7;\n\necho Getting and installing
      latest Grails $GRAILS_VERSION distro from Spring\nwget http://dist.springframework.org.s3.amazonaws.com/release/GRAILS/grails-$GRAILS_VERSION.zip\n\nunzip
      /root/grails-$GRAILS_VERSION.zip\n\nmv /root/grails-$GRAILS_VERSION /usr/share/grails\n\nln
      -s /usr/share/grails/bin/grails /usr/bin/grails\n\nln -s /usr/share/grails/bin/startGrails
      /usr/bin/startGrails"}, {"is_public": true, "username": "ip_fix", "id": 2306,
      "deployments_total": 16, "user_defined_fields": [{"label": "Unprivileged user
      account name", "name": "user_name"}, {"label": "Unprivileged user password",
      "name": "user_password"}, {"example": "Name of your server, i.e. linode1", "label":
      "System hostname", "name": "sys_hostname", "default": "myvps"}, {"example":
      "/opt will install MongoDB to /opt/mongodb", "label": "Base data directory for
      MongoDB", "name": "base_data_directory", "default": "/opt"}, {"example": "/opt
      will install NGINX to /opt/nginx", "label": "Install Prefix for NGINX", "name":
      "nginx_prefix", "default": "/opt"}], "updated": "2011-04-03T03:17:20", "label":
      "Ubuntu+MongoDB+NGINX+Passenger+REE+Rails+Git", "created": "2011-04-02T01:41:19",
      "images": ["linode/ubuntu10.04lts32bit"], "user_gravatar_id": "d829e0cef24773940cf6d2ef49deb106",
      "description": "Install on Ubuntu the lastest version of:\r\n\r\n- MongoDB (mongodb-stable)\r\n-
      NGINX (0.8.53)\r\n- Passenger (3.0.2)\r\n- Ruby Enterprise Edition (1.8.7)\r\n-
      Rails (3.0.5)\r\n- Git (1.7.0)\r\n\r\nA complete web enviroment for rails development!",
      "rev_note": "NGINX Fix", "deployments_active": 3, "script": "#!/bin/bash\n#\n#
      Install a web enviroment with Ruby Enterprise Edition, NGINX, Passenger, Git
      and Rails.\n#\n# Written by IP_FIX <eversonfix@gmail.com>\n# GitHub - https://github.com/eversonfix\n#\n#
      Based on Nigma StackScripts - http://github.com/nigma/StackScripts \n#\n# 03/2011\n#\n#
      <UDF name=\"user_name\" label=\"Unprivileged user account name\" />\n# <UDF
      name=\"user_password\" label=\"Unprivileged user password\" />\n# <UDF name=\"sys_hostname\"
      Label=\"System hostname\" default=\"myvps\" example=\"Name of your server, i.e.
      linode1\" />\n# <UDF name=\"base_data_directory\" Label=\"Base data directory
      for MongoDB\" default=\"/opt\" example=\"/opt will install MongoDB to /opt/mongodb\"
      />\n# <UDF name=\"nginx_prefix\" Label=\"Install Prefix for NGINX\" default=\"/opt\"
      example=\"/opt will install NGINX to /opt/nginx\" />\n\nexec &> /root/stackscript.log\n\nsource
      <ssinclude StackScriptID=\"1\"> # StackScript Bash Library\nsystem_update\ngoodstuff\n\nsource
      <ssinclude StackScriptID=\"123\"> # lib-system-ubuntu\nsystem_enable_universe\n\n#
      source <ssinclude StackScriptID=\"123\"> # lib-system-ubuntu\n# Configure system\nsystem_update_locale_en_US_UTF_8\nsystem_update_hostname
      \"$SYS_HOSTNAME\"\n\nsystem_add_user \"$USER_NAME\" \"$USER_PASSWORD\" \"sudo\"\n\nsource
      <ssinclude StackScriptID=\"128\"> # lib-mongodb\nsystem_configure_mongodb_repository\nmongodb_install
      \"$BASE_DATA_DIRECTORY\"\n\n# Ruby Enterprise Edition Setup\n\nwget http://rubyenterpriseedition.googlecode.com/files/ruby-enterprise_1.8.7-2011.03_i386_ubuntu10.04.deb\ndpkg
      -i ruby-enterprise_1.8.7-2011.03_i386_ubuntu10.04.deb\n\napt-get -y install
      build-essential libcurl4-openssl-dev git-core\n\n# NGINX+Passenger Setup\n\npassenger-install-nginx-module
      --auto --auto-download --prefix=\"$NGINX_PREFIX/nginx\"\n\n# Startup script\n\nln
      -s \"$NGINX_PREFIX/nginx\" \"/opt/nginx\"\nwget http://library.linode.com/web-servers/nginx/installation/reference/init-deb.sh\nmv
      init-deb.sh /etc/init.d/nginx\nchmod +x /etc/init.d/nginx\n/usr/sbin/update-rc.d
      -f nginx defaults\n\n# Install Rails 3\n\ngem update --system\ngem install rails
      --no-ri --no-rdoc\n\n# Postfix\n\npostfix_install_loopback_only\n\nrestartServices"},
      {"is_public": true, "username": "elebertus", "id": 2421, "deployments_total":
      6, "user_defined_fields": [], "updated": "2011-04-23T19:55:48", "label": "Epel,
      puppet", "created": "2011-04-22T21:44:17", "images": ["linode/centos5.632bit"],
      "user_gravatar_id": "6b36c6ec06eee6cdea239812435e6c9b", "description": "Enable
      EPEL, install ruby, rvm, and puppet", "rev_note": "Epel, and Puppet", "deployments_active":
      0, "script": "#!/bin/bash\nfunction enable_epel {\n        rpm -Uvh http://download.fedora.redhat.com/pub/epel/5/i386/epel-release-5-4.noarch.rpm\n}\nfunction
      install_base {\n        yum install -yq puppet\n}"}, {"is_public": true, "username":
      "minalecs", "id": 2438, "deployments_total": 363, "user_defined_fields": [{"label":
      "MySQL root Password", "name": "db_password"}, {"label": "Rails/Rack environment
      to run", "name": "r_env", "default": "production"}, {"example": "p194", "label":
      "Ruby 1.9.3 Release", "name": "ruby_release", "default": "p194"}, {"label":
      "Name of deployment user", "name": "deploy_user", "default": "deploy"}, {"label":
      "Password for deployment user", "name": "deploy_password"}, {"label": "Deployment
      user public ssh key", "name": "deploy_sshkey"}, {"label": "Server''s hostname",
      "name": "new_hostname", "default": "appserver"}], "updated": "2012-09-22T09:03:48",
      "label": "ROR 3.2/ruby 1.9.3 Linux+Passenger/Nginx+Mysql+RVM", "created": "2011-04-26T00:52:36",
      "images": ["linode/ubuntu10.04lts32bit", "linode/ubuntu10.04lts", "linode/ubuntu11.1032bit",
      "linode/ubuntu11.10", "linode/ubuntu12.04lts32bit", "linode/ubuntu12.04lts"],
      "user_gravatar_id": "629de9633299a4070fa8ac3d0a79d520", "description": "# stackscript:
      RoR with Linux+Nnginx+Mysql+Passenger+RVM+Chef Solo\r\n# Installs Multiuser
      RVM + Ruby 1.9.3 + Nginx + Passenger + MySQL + Git + Bundler + Deploy User\r\n\r\n#
      updated for ubuntu 12.04 lts 09/21/12\r\n#Warning: having issues with download
      of init script may have to download manually and copy #into /etc/init.d/\r\n#http://pastebin.com/bh7xJ328\r\n\r\n#
      Things to remember after install or to automate later:\r\n# - adjust server
      timezone if required\r\n# - put SSL certificate files at /usr/local/share/ca-certificates/\r\n#
      - set up nginx to point to deployment app and eventual static site\r\n# - (installs
      logrotate) create logrotate file to the deployed app logs\r\n# - (generates
      keys)generate github ssh deployment keys\r\n# - setup reverse DNS on Linode
      control panel\r\n# - run cap production deploy:setup to configure initial files\r\n#
      - install imagemagick", "rev_note": "fix 2 for nginx init script", "deployments_active":
      105, "script": "#!/bin/bash\n# <UDF name=\"db_password\" Label=\"MySQL root
      Password\" />\n# <UDF name=\"r_env\" Label=\"Rails/Rack environment to run\"
      default=\"production\" />\n# <UDF name=\"ruby_release\" Label=\"Ruby 1.9.3 Release\"
      default=\"p194\" example=\"p194\" />\n# <UDF name=\"deploy_user\" Label=\"Name
      of deployment user\" default=\"deploy\" />\n# <UDF name=\"deploy_password\"
      Label=\"Password for deployment user\" />\n# <UDF name=\"deploy_sshkey\" Label=\"Deployment
      user public ssh key\" />\n# <UDF name=\"new_hostname\" Label=\"Server''s hostname\"
      default=\"appserver\" />\n\nexec &> /root/stackscript.log\n\nsource <ssinclude
      StackScriptID=1>  # Common bash functions\nsource <ssinclude StackScriptID=123>  #
      Awesome ubuntu utils script\n\nfunction log {\n  echo \"### $1 -- `date ''+%D
      %T''`\"\n}\n\nfunction system_install_logrotate {\n  apt-get -y install logrotate\n}\n\nfunction
      set_default_environment {\n  cat >> /etc/environment << EOF\n  RAILS_ENV=$R_ENV\n  RACK_ENV=$R_ENV\nEOF\n}\n\nfunction
      create_deployment_user {\n  system_add_user $DEPLOY_USER $DEPLOY_PASSWORD \"users,sudo\"\n  system_user_add_ssh_key
      $DEPLOY_USER \"$DEPLOY_SSHKEY\"\n  system_update_locale_en_US_UTF_8\n}\n\nfunction
      install_essentials {\n  aptitude -y install build-essential libpcre3-dev libssl-dev
      libcurl4-openssl-dev libreadline5-dev libxml2-dev libxslt1-dev libmysqlclient-dev
      openssh-server git-core\n  good_stuff\n}\n\nfunction set_nginx_boot_up {\n  wget
      http://pastebin.com/download.php?i=bh7xJ328 -O nginx\n  chmod 744 /etc/init.d/nginx\n  /usr/sbin/update-rc.d
      -f nginx defaults\n  cat > /etc/logrotate.d/nginx << EOF\n/usr/local/nginx/logs/*
      {\n  daily\n  missingok\n  rotate 52\n  compress\n  delaycompress\n  notifempty\n  create
      640 nobody root\n  sharedscripts\n  postrotate\n  [ ! -f /user/local/nginx/logs/nginx.pid
      ] || kill -USR1 `cat /user/local/logs/nginx.pid`\n  endscript\n}\nEOF\n}\n\nfunction
      set_production_gemrc {\n  cat > ~/.gemrc << EOF\nverbose: true\nbulk_treshold:
      1000\ninstall: --no-ri --no-rdoc\nbenchmark: false\nbacktrace: false\nupdate:
      --no-ri --no-rdoc\nupdate_sources: true\nEOF\n  cp ~/.gemrc $USER_HOME\n  chown
      $USER_NAME:$USER_NAME $USER_HOME/.gemrc\n}\n\n\nlog \"Updating System...\"\nsystem_update\n\nlog
      \"Installing essentials...includes goodstuff\"\ninstall_essentials\n\nlog \"Setting
      hostname to $NEW_HOSTNAME\"\nsystem_update_hostname $NEW_HOSTNAME\n\nlog \"Creating
      deployment user $DEPLOY_USER\"\ncreate_deployment_user\n\ncat >> /etc/sudoers
      <<EOF\nDefaults !secure_path\n$DEPLOY_USER ALL=(ALL) NOPASSWD: ALL\nEOF\n\n\nlog
      \"Setting basic security settings\"\nsystem_security_fail2ban\nsystem_security_ufw_install\nsystem_security_ufw_configure_basic\nsystem_sshd_permitrootlogin
      No\nsystem_sshd_passwordauthentication No\nsystem_sshd_pubkeyauthentication
      Yes\n/etc/init.d/ssh restart\n\nlog \"installing log_rotate\"\nsystem_install_logrotate\n\nlog
      \"Installing and tunning MySQL\"\nmysql_install \"$DB_PASSWORD\" && mysql_tune
      40\n\nlog \"Installing RVM and Ruby dependencies\" >> $logfile\naptitude -y
      install git-core libmysqlclient15-dev curl build-essential libcurl4-openssl-dev
      zlib1g-dev libssl-dev libreadline6 libreadline6-dev libperl-dev gcc libjpeg62-dev
      libbz2-dev libtiff4-dev libwmf-dev libx11-dev libxt-dev libxext-dev libxml2-dev
      libfreetype6-dev liblcms1-dev libexif-dev perl libjasper-dev libltdl3-dev graphviz
      gs-gpl pkg-config\n\nlog \"Installing RVM system-wide\"\ncurl -L get.rvm.io
      | sudo bash -s stable\nusermod -a -G rvm \"$DEPLOY_USER\"\n\nsource /etc/profile.d/rvm.sh\nsource
      /etc/profile\n\nlog \"Installing Ruby 1.9.3-$RUBY_RELEASE\"\nrvm install 1.9.3-$RUBY_RELEASE\nrvm
      use 1.9.3-$RUBY_RELEASE --default\n\nlog \"Updating Ruby gems\"\nset_production_gemrc\ngem
      update --system\n\n\nlog \"Instaling Phusion Passenger and Nginx\"\ngem install
      passenger\nrvmsudo passenger-install-nginx-module --auto --auto-download --prefix=\"/usr/local/nginx\"\n\nlog
      \"Setting up Nginx to start on boot and rotate logs\"\nset_nginx_boot_up\n\nlog
      \"Setting Rails/Rack defaults\"\nset_default_environment\n\nlog \"Install Bundler\"\ngem
      install bundler\n\nlog \"Restarting Services\"\nrestartServices"}]}'
    headers:
      Access-Control-Allow-Credentials:
      - "true"
      Access-Control-Allow-Headers:
      - Authorization, Origin, X-Requested-With, Content-Type, Accept, X-Filter
      Access-Control-Allow-Methods:
      - HEAD, GET, OPTIONS, POST, PUT, DELETE
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Status
      Cache-Control:
      - private, max-age=0, s-maxage=0, no-cache, no-store
      - private, max-age=60, s-maxage=60
      Connection:
      - keep-alive
      Content-Length:
      - "532641"
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json
      Date:
      - Tue, 27 Mar 2018 18:06:55 GMT
      Retry-After:
      - "115"
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization, X-Filter
      - Authorization, X-Filter
      X-Accepted-Oauth-Scopes:
      - stackscripts:view
      X-Content-Type-Options:
      - nosniff
      - nosniff
      X-Frame-Options:
      - DENY
      - DENY
      X-Oauth-Scopes:
      - linodes:delete,domains:delete,nodebalancers:delete,images:delete,stackscripts:delete,longview:delete,events:delete,tokens:delete,clients:delete,account:delete,users:delete,tickets:delete,ips:delete,volumes:delete
      X-Ratelimit-Limit:
      - "400"
      X-Ratelimit-Remaining:
      - "398"
      X-Ratelimit-Reset:
      - "1522174131"
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
- request:
    body: ""
    form: {}
    headers:
      Authorization:
      - Bearer awesometokenawesometokenawesometoken
      User-Agent:
      - go-linode 1.0.0 https://github.com/chiefy/go-linode
    url: https://api.linode.com/v4/linode/stackscripts/7
    method: GET
  response:
    body: '{"created": "2010-01-12T23:53:50", "deployments_total": 39, "username":
      "linode", "description": "Install MySQL or MariaDB to a Linode. Can also be
      used as a library for other StackScripts.", "id": 7, "script": "#!/usr/bin/env
      python\n\n\"\"\"\nMySQL StackScript\n\t\n\tAuthor: Ricardo N Feliciano <rfeliciano@linode.com>\n\tVersion:
      1.0.0.0\n\tRequirements:\n\t\t- ss://linode/python-library <ssinclude StackScriptID=\"3\">\n\nThis
      StackScript both deploys and provides a library for MySQL. The functions \nin
      this StackScript are designed to be run across the Linode Core Distributions:\n\t-
      Ubuntu\n\t- CentOS\n\t- Debian\n\t- Fedora\n\nStackScript User Defined Variables:\n\n<UDF
      name=\"db_root_password\" label=\"MySQL/MariaDB root password\" default=\"\"
      />\n\"\"\"\n\nimport os\nimport subprocess\nimport sys\n\ntry: # we''ll need
      to rename included StackScripts before we can import them\n\tos.rename(\"/root/ssinclude-3\",
      \"/root/pythonlib.py\")\nexcept:\n\tpass\n\nimport pythonlib\n\n\ndef mysql_install(root_pw
      = False, db_name = False):\n\t\"\"\"Install MySQL or MariaDB\"\"\"\n\t# add
      logging support\n\n\tpackage = {\n\t\t''debian'': ''mysql'',\n\t\t''redhat'':
      ''mariadb''\n\t}\n\n\tpythonlib.system_package_install(package[pythonlib.distro[''family'']]
      +\n\t\"-server\")\n\t\n\tmysql_start()\n\n\t# if provided with a root password,
      set it\n\tif root_pw :\n\t\tsubprocess.call([''mysqladmin'', ''-u'', ''root'',
      ''password'', root_pw])\n\t\n\t# if a database name was provided, let''s create
      it\n\tif db_name :\n\t\tsubprocess.call(''mysql -uroot -p'' + root_pw + '' -e
      \"create database '' + db_name + ''\"'', shell=True)\n\n\ndef mysql_start():\n\t\"\"\"Start
      MariaDB on CentOS and Fedora\"\"\"\n\n\tif pythonlib.distro[''family'']  ==
      \"redhat\":\n\t\tsubprocess.call([''systemctl'', ''start'', ''mariadb.service''])\n\n\ndef
      main():\n\t\"\"\"Install MySQL or MariaDB\"\"\"\n\t# add logging support\n\t\n\tpythonlib.init()\n\tpythonlib.system_update()\n\n\tif
      os.environ[''DB_ROOT_PASSWORD''] != \"\":\n\t\tmysql_install(os.environ[''DB_ROOT_PASSWORD''])\n\telse:\n\t\tmysql_install()\n\n\tpythonlib.end()\n\n\nif
      __name__ == \"__main__\":\n\tsys.exit(main())", "user_gravatar_id": "ead4da00f4fe6a4bd0b4f11a510c031d",
      "images": ["linode/centos7", "linode/debian7", "linode/debian8", "linode/fedora22",
      "linode/ubuntu14.04lts"], "is_public": true, "user_defined_fields": [{"name":
      "db_root_password", "label": "MySQL/MariaDB root password", "default": ""}],
      "deployments_active": 24, "updated": "2015-09-14T20:53:10", "label": "MySQL",
      "rev_note": "Initial import."}'
    headers:
      Access-Control-Allow-Credentials:
      - "true"
      Access-Control-Allow-Headers:
      - Authorization, Origin, X-Requested-With, Content-Type, Accept, X-Filter
      Access-Control-Allow-Methods:
      - HEAD, GET, OPTIONS, POST, PUT, DELETE
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Status
      Cache-Control:
      - private, max-age=0, s-maxage=0, no-cache, no-store
      - private, max-age=60, s-maxage=60
      Connection:
      - keep-alive
      Content-Length:
      - "2548"
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json
      Date:
      - Tue, 27 Mar 2018 18:06:56 GMT
      Retry-After:
      - "113"
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization, X-Filter
      - Authorization, X-Filter
      X-Accepted-Oauth-Scopes:
      - stackscripts:view
      X-Content-Type-Options:
      - nosniff
      - nosniff
      X-Frame-Options:
      - DENY
      - DENY
      X-Oauth-Scopes:
      - linodes:delete,domains:delete,nodebalancers:delete,images:delete,stackscripts:delete,longview:delete,events:delete,tokens:delete,clients:delete,account:delete,users:delete,tickets:delete,ips:delete,volumes:delete
      X-Ratelimit-Limit:
      - "400"
      X-Ratelimit-Remaining:
      - "396"
      X-Ratelimit-Reset:
      - "1522174130"
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
- request:
    body: ""
    form: {}
    headers:
      Authorization:
      - Bearer awesometokenawesometokenawesometoken
      User-Agent:
      - go-linode 1.0.0 https://github.com/chiefy/go-linode
    url: https://api.linode.com/v4/volumes
    method: GET
  response:
    body: '{"data": [{"label": "freemont", "id": 5029, "size": 10, "created": "2018-03-27T18:04:08",
      "linode_id": 7256733, "status": "active", "updated": null, "region": "us-west-1a"}],
      "pages": 1, "page": 1, "results": 1}'
    headers:
      Access-Control-Allow-Credentials:
      - "true"
      Access-Control-Allow-Headers:
      - Authorization, Origin, X-Requested-With, Content-Type, Accept, X-Filter
      Access-Control-Allow-Methods:
      - HEAD, GET, OPTIONS, POST, PUT, DELETE
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Status
      Cache-Control:
      - private, max-age=0, s-maxage=0, no-cache, no-store
      - private, max-age=60, s-maxage=60
      Connection:
      - keep-alive
      Content-Length:
      - "211"
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json
      Date:
      - Tue, 27 Mar 2018 18:06:56 GMT
      Retry-After:
      - "27"
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization, X-Filter
      - Authorization, X-Filter
      X-Accepted-Oauth-Scopes:
      - volumes:view
      X-Content-Type-Options:
      - nosniff
      - nosniff
      X-Frame-Options:
      - DENY
      - DENY
      X-Oauth-Scopes:
      - linodes:delete,domains:delete,nodebalancers:delete,images:delete,stackscripts:delete,longview:delete,events:delete,tokens:delete,clients:delete,account:delete,users:delete,tickets:delete,ips:delete,volumes:delete
      X-Ratelimit-Limit:
      - "400"
      X-Ratelimit-Remaining:
      - "397"
      X-Ratelimit-Reset:
      - "1522174044"
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
- request:
    body: ""
    form: {}
    headers:
      Authorization:
      - Bearer awesometokenawesometokenawesometoken
      User-Agent:
      - go-linode 1.0.0 https://github.com/chiefy/go-linode
    url: https://api.linode.com/v4/volumes/5029
    method: GET
  response:
    body: '{"size": 10, "region": "us-west-1a", "status": "active", "created": "2018-03-27T18:04:08",
      "id": 5029, "updated": null, "linode_id": 7256733, "label": "freemont"}'
    headers:
      Access-Control-Allow-Credentials:
      - "true"
      Access-Control-Allow-Headers:
      - Authorization, Origin, X-Requested-With, Content-Type, Accept, X-Filter
      Access-Control-Allow-Methods:
      - HEAD, GET, OPTIONS, POST, PUT, DELETE
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Status
      Cache-Control:
      - private, max-age=0, s-maxage=0, no-cache, no-store
      - private, max-age=60, s-maxage=60
      Connection:
      - keep-alive
      Content-Length:
      - "162"
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json
      Date:
      - Tue, 27 Mar 2018 18:06:56 GMT
      Retry-After:
      - "114"
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization, X-Filter
      - Authorization, X-Filter
      X-Accepted-Oauth-Scopes:
      - volumes:view
      X-Content-Type-Options:
      - nosniff
      - nosniff
      X-Frame-Options:
      - DENY
      - DENY
      X-Oauth-Scopes:
      - linodes:delete,domains:delete,nodebalancers:delete,images:delete,stackscripts:delete,longview:delete,events:delete,tokens:delete,clients:delete,account:delete,users:delete,tickets:delete,ips:delete,volumes:delete
      X-Ratelimit-Limit:
      - "400"
      X-Ratelimit-Remaining:
      - "397"
      X-Ratelimit-Reset:
      - "1522174131"
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
